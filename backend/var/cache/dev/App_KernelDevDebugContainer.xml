<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.project_dir">/srv/app</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.runtime_environment">%env(default:kernel.environment:APP_RUNTIME_ENV)%</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.build_dir">/srv/app/var/cache/dev</parameter>
    <parameter key="kernel.cache_dir">/srv/app/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/srv/app/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="DoctrineBundle">Doctrine\Bundle\DoctrineBundle\DoctrineBundle</parameter>
      <parameter key="DoctrineMigrationsBundle">Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle</parameter>
      <parameter key="TwigBundle">Symfony\Bundle\TwigBundle\TwigBundle</parameter>
      <parameter key="TwigExtraBundle">Twig\Extra\TwigExtraBundle\TwigExtraBundle</parameter>
      <parameter key="MakerBundle">Symfony\Bundle\MakerBundle\MakerBundle</parameter>
      <parameter key="NelmioAliceBundle">Nelmio\Alice\Bridge\Symfony\NelmioAliceBundle</parameter>
      <parameter key="FidryAliceDataFixturesBundle">Fidry\AliceDataFixtures\Bridge\Symfony\FidryAliceDataFixturesBundle</parameter>
      <parameter key="HautelookAliceBundle">Hautelook\AliceBundle\HautelookAliceBundle</parameter>
      <parameter key="SecurityBundle">Symfony\Bundle\SecurityBundle\SecurityBundle</parameter>
      <parameter key="NelmioCorsBundle">Nelmio\CorsBundle\NelmioCorsBundle</parameter>
      <parameter key="ApiPlatformBundle">ApiPlatform\Symfony\Bundle\ApiPlatformBundle</parameter>
      <parameter key="LexikJWTAuthenticationBundle">Lexik\Bundle\JWTAuthenticationBundle\LexikJWTAuthenticationBundle</parameter>
      <parameter key="WebProfilerBundle">Symfony\Bundle\WebProfilerBundle\WebProfilerBundle</parameter>
      <parameter key="MonologBundle">Symfony\Bundle\MonologBundle\MonologBundle</parameter>
      <parameter key="DebugBundle">Symfony\Bundle\DebugBundle\DebugBundle</parameter>
      <parameter key="FlysystemBundle">League\FlysystemBundle\FlysystemBundle</parameter>
      <parameter key="DoctrineFixturesBundle">Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle</parameter>
      <parameter key="VichUploaderBundle">Vich\UploaderBundle\VichUploaderBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/srv/app/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="DoctrineBundle" type="collection">
        <parameter key="path">/srv/app/vendor/doctrine/doctrine-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\DoctrineBundle</parameter>
      </parameter>
      <parameter key="DoctrineMigrationsBundle" type="collection">
        <parameter key="path">/srv/app/vendor/doctrine/doctrine-migrations-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\MigrationsBundle</parameter>
      </parameter>
      <parameter key="TwigBundle" type="collection">
        <parameter key="path">/srv/app/vendor/symfony/twig-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\TwigBundle</parameter>
      </parameter>
      <parameter key="TwigExtraBundle" type="collection">
        <parameter key="path">/srv/app/vendor/twig/extra-bundle</parameter>
        <parameter key="namespace">Twig\Extra\TwigExtraBundle</parameter>
      </parameter>
      <parameter key="MakerBundle" type="collection">
        <parameter key="path">/srv/app/vendor/symfony/maker-bundle/src</parameter>
        <parameter key="namespace">Symfony\Bundle\MakerBundle</parameter>
      </parameter>
      <parameter key="NelmioAliceBundle" type="collection">
        <parameter key="path">/srv/app/vendor/nelmio/alice/src/Bridge/Symfony</parameter>
        <parameter key="namespace">Nelmio\Alice\Bridge\Symfony</parameter>
      </parameter>
      <parameter key="FidryAliceDataFixturesBundle" type="collection">
        <parameter key="path">/srv/app/vendor/theofidry/alice-data-fixtures/src/Bridge/Symfony</parameter>
        <parameter key="namespace">Fidry\AliceDataFixtures\Bridge\Symfony</parameter>
      </parameter>
      <parameter key="HautelookAliceBundle" type="collection">
        <parameter key="path">/srv/app/vendor/hautelook/alice-bundle/src</parameter>
        <parameter key="namespace">Hautelook\AliceBundle</parameter>
      </parameter>
      <parameter key="SecurityBundle" type="collection">
        <parameter key="path">/srv/app/vendor/symfony/security-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\SecurityBundle</parameter>
      </parameter>
      <parameter key="NelmioCorsBundle" type="collection">
        <parameter key="path">/srv/app/vendor/nelmio/cors-bundle</parameter>
        <parameter key="namespace">Nelmio\CorsBundle</parameter>
      </parameter>
      <parameter key="ApiPlatformBundle" type="collection">
        <parameter key="path">/srv/app/vendor/api-platform/core/src/Symfony/Bundle</parameter>
        <parameter key="namespace">ApiPlatform\Symfony\Bundle</parameter>
      </parameter>
      <parameter key="LexikJWTAuthenticationBundle" type="collection">
        <parameter key="path">/srv/app/vendor/lexik/jwt-authentication-bundle</parameter>
        <parameter key="namespace">Lexik\Bundle\JWTAuthenticationBundle</parameter>
      </parameter>
      <parameter key="WebProfilerBundle" type="collection">
        <parameter key="path">/srv/app/vendor/symfony/web-profiler-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\WebProfilerBundle</parameter>
      </parameter>
      <parameter key="MonologBundle" type="collection">
        <parameter key="path">/srv/app/vendor/symfony/monolog-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\MonologBundle</parameter>
      </parameter>
      <parameter key="DebugBundle" type="collection">
        <parameter key="path">/srv/app/vendor/symfony/debug-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\DebugBundle</parameter>
      </parameter>
      <parameter key="FlysystemBundle" type="collection">
        <parameter key="path">/srv/app/vendor/league/flysystem-bundle/src</parameter>
        <parameter key="namespace">League\FlysystemBundle</parameter>
      </parameter>
      <parameter key="DoctrineFixturesBundle" type="collection">
        <parameter key="path">/srv/app/vendor/doctrine/doctrine-fixtures-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\FixturesBundle</parameter>
      </parameter>
      <parameter key="VichUploaderBundle" type="collection">
        <parameter key="path">/srv/app/vendor/vich/uploader-bundle</parameter>
        <parameter key="namespace">Vich\UploaderBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">App_KernelDevDebugContainer</parameter>
    <parameter key="uploadsDirectory">/srv/app/public/uploads</parameter>
    <parameter key="event_dispatcher.event_aliases" type="collection">
      <parameter key="Symfony\Component\Console\Event\ConsoleCommandEvent">console.command</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleErrorEvent">console.error</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleSignalEvent">console.signal</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleTerminateEvent">console.terminate</parameter>
      <parameter key="Symfony\Component\Form\Event\PreSubmitEvent">form.pre_submit</parameter>
      <parameter key="Symfony\Component\Form\Event\SubmitEvent">form.submit</parameter>
      <parameter key="Symfony\Component\Form\Event\PostSubmitEvent">form.post_submit</parameter>
      <parameter key="Symfony\Component\Form\Event\PreSetDataEvent">form.pre_set_data</parameter>
      <parameter key="Symfony\Component\Form\Event\PostSetDataEvent">form.post_set_data</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent">kernel.controller_arguments</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerEvent">kernel.controller</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ResponseEvent">kernel.response</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\FinishRequestEvent">kernel.finish_request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\RequestEvent">kernel.request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ViewEvent">kernel.view</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ExceptionEvent">kernel.exception</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\TerminateEvent">kernel.terminate</parameter>
      <parameter key="Symfony\Component\Security\Core\Event\AuthenticationSuccessEvent">security.authentication.success</parameter>
      <parameter key="Symfony\Component\Security\Http\Event\InteractiveLoginEvent">security.interactive_login</parameter>
      <parameter key="Symfony\Component\Security\Http\Event\SwitchUserEvent">security.switch_user</parameter>
    </parameter>
    <parameter key="fragment.renderer.hinclude.global_template">null</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">false</parameter>
    <parameter key="kernel.trust_x_sendfile_type_header">false</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="kernel.enabled_locales" type="collection"/>
    <parameter key="kernel.error_controller">error_controller</parameter>
    <parameter key="debug.file_link_format">%env(default::SYMFONY_IDE)%</parameter>
    <parameter key="asset.request_context.base_path">null</parameter>
    <parameter key="asset.request_context.secure">null</parameter>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/srv/app/var/cache/dev/App_KernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_dir">/srv/app/var/cache/dev</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="serializer.mapping.cache.file">/srv/app/var/cache/dev/serialization.php</parameter>
    <parameter key="cache.prefix.seed">_/srv/app.App_KernelDevDebugContainer</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter" type="string">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">null</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="form.type_extension.csrf.enabled">true</parameter>
    <parameter key="form.type_extension.csrf.field_name">_token</parameter>
    <parameter key="validator.mapping.cache.file">/srv/app/var/cache/dev/validation.php</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="profiler_listener.only_exceptions">false</parameter>
    <parameter key="profiler_listener.only_main_requests">false</parameter>
    <parameter key="profiler.storage.dsn">file:/srv/app/var/cache/dev/profiler</parameter>
    <parameter key="doctrine.dbal.configuration.class">Doctrine\DBAL\Configuration</parameter>
    <parameter key="doctrine.data_collector.class">Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector</parameter>
    <parameter key="doctrine.dbal.connection.event_manager.class">Symfony\Bridge\Doctrine\ContainerAwareEventManager</parameter>
    <parameter key="doctrine.dbal.connection_factory.class">Doctrine\Bundle\DoctrineBundle\ConnectionFactory</parameter>
    <parameter key="doctrine.dbal.events.mysql_session_init.class">Doctrine\DBAL\Event\Listeners\MysqlSessionInit</parameter>
    <parameter key="doctrine.dbal.events.oracle_session_init.class">Doctrine\DBAL\Event\Listeners\OracleSessionInit</parameter>
    <parameter key="doctrine.class">Doctrine\Bundle\DoctrineBundle\Registry</parameter>
    <parameter key="doctrine.entity_managers" type="collection">
      <parameter key="default">doctrine.orm.default_entity_manager</parameter>
    </parameter>
    <parameter key="doctrine.default_entity_manager">default</parameter>
    <parameter key="doctrine.dbal.connection_factory.types" type="collection"/>
    <parameter key="doctrine.connections" type="collection">
      <parameter key="default">doctrine.dbal.default_connection</parameter>
    </parameter>
    <parameter key="doctrine.default_connection">default</parameter>
    <parameter key="doctrine.orm.configuration.class">Doctrine\ORM\Configuration</parameter>
    <parameter key="doctrine.orm.entity_manager.class">Doctrine\ORM\EntityManager</parameter>
    <parameter key="doctrine.orm.manager_configurator.class">Doctrine\Bundle\DoctrineBundle\ManagerConfigurator</parameter>
    <parameter key="doctrine.orm.cache.array.class">Doctrine\Common\Cache\ArrayCache</parameter>
    <parameter key="doctrine.orm.cache.apc.class">Doctrine\Common\Cache\ApcCache</parameter>
    <parameter key="doctrine.orm.cache.memcache.class">Doctrine\Common\Cache\MemcacheCache</parameter>
    <parameter key="doctrine.orm.cache.memcache_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcache_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcache_instance.class">Memcache</parameter>
    <parameter key="doctrine.orm.cache.memcached.class">Doctrine\Common\Cache\MemcachedCache</parameter>
    <parameter key="doctrine.orm.cache.memcached_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcached_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcached_instance.class">Memcached</parameter>
    <parameter key="doctrine.orm.cache.redis.class">Doctrine\Common\Cache\RedisCache</parameter>
    <parameter key="doctrine.orm.cache.redis_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.redis_port">6379</parameter>
    <parameter key="doctrine.orm.cache.redis_instance.class">Redis</parameter>
    <parameter key="doctrine.orm.cache.xcache.class">Doctrine\Common\Cache\XcacheCache</parameter>
    <parameter key="doctrine.orm.cache.wincache.class">Doctrine\Common\Cache\WinCacheCache</parameter>
    <parameter key="doctrine.orm.cache.zenddata.class">Doctrine\Common\Cache\ZendDataCache</parameter>
    <parameter key="doctrine.orm.metadata.driver_chain.class">Doctrine\Persistence\Mapping\Driver\MappingDriverChain</parameter>
    <parameter key="doctrine.orm.metadata.annotation.class">Doctrine\ORM\Mapping\Driver\AnnotationDriver</parameter>
    <parameter key="doctrine.orm.metadata.xml.class">Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver</parameter>
    <parameter key="doctrine.orm.metadata.yml.class">Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver</parameter>
    <parameter key="doctrine.orm.metadata.php.class">Doctrine\ORM\Mapping\Driver\PHPDriver</parameter>
    <parameter key="doctrine.orm.metadata.staticphp.class">Doctrine\ORM\Mapping\Driver\StaticPHPDriver</parameter>
    <parameter key="doctrine.orm.metadata.attribute.class">Doctrine\ORM\Mapping\Driver\AttributeDriver</parameter>
    <parameter key="doctrine.orm.proxy_cache_warmer.class">Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer</parameter>
    <parameter key="form.type_guesser.doctrine.class">Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser</parameter>
    <parameter key="doctrine.orm.validator.unique.class">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator</parameter>
    <parameter key="doctrine.orm.validator_initializer.class">Symfony\Bridge\Doctrine\Validator\DoctrineInitializer</parameter>
    <parameter key="doctrine.orm.security.user.provider.class">Symfony\Bridge\Doctrine\Security\User\EntityUserProvider</parameter>
    <parameter key="doctrine.orm.listeners.resolve_target_entity.class">Doctrine\ORM\Tools\ResolveTargetEntityListener</parameter>
    <parameter key="doctrine.orm.listeners.attach_entity_listeners.class">Doctrine\ORM\Tools\AttachEntityListenersListener</parameter>
    <parameter key="doctrine.orm.naming_strategy.default.class">Doctrine\ORM\Mapping\DefaultNamingStrategy</parameter>
    <parameter key="doctrine.orm.naming_strategy.underscore.class">Doctrine\ORM\Mapping\UnderscoreNamingStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.default.class">Doctrine\ORM\Mapping\DefaultQuoteStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.ansi.class">Doctrine\ORM\Mapping\AnsiQuoteStrategy</parameter>
    <parameter key="doctrine.orm.entity_listener_resolver.class">Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_cache_factory.class">Doctrine\ORM\Cache\DefaultCacheFactory</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_region.class">Doctrine\ORM\Cache\Region\DefaultRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.filelock_region.class">Doctrine\ORM\Cache\Region\FileLockRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_chain.class">Doctrine\ORM\Cache\Logging\CacheLoggerChain</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_statistics.class">Doctrine\ORM\Cache\Logging\StatisticsCacheLogger</parameter>
    <parameter key="doctrine.orm.second_level_cache.cache_configuration.class">Doctrine\ORM\Cache\CacheConfiguration</parameter>
    <parameter key="doctrine.orm.second_level_cache.regions_configuration.class">Doctrine\ORM\Cache\RegionsConfiguration</parameter>
    <parameter key="doctrine.orm.auto_generate_proxy_classes">true</parameter>
    <parameter key="doctrine.orm.enable_lazy_ghost_objects">true</parameter>
    <parameter key="doctrine.orm.proxy_dir">/srv/app/var/cache/dev/doctrine/orm/Proxies</parameter>
    <parameter key="doctrine.orm.proxy_namespace">Proxies</parameter>
    <parameter key="doctrine.migrations.preferred_em">null</parameter>
    <parameter key="doctrine.migrations.preferred_connection">null</parameter>
    <parameter key="twig.form.resources" type="collection">
      <parameter>@VichUploader/Form/fields.html.twig</parameter>
      <parameter>form_div_layout.html.twig</parameter>
    </parameter>
    <parameter key="twig.default_path">/srv/app/templates</parameter>
    <parameter key="nelmio_alice.functions_blacklist" type="collection">
      <parameter>current</parameter>
      <parameter>shuffle</parameter>
      <parameter>date</parameter>
      <parameter>time</parameter>
      <parameter>file</parameter>
      <parameter>md5</parameter>
      <parameter>sha1</parameter>
    </parameter>
    <parameter key="nelmio_alice.locale">en_US</parameter>
    <parameter key="nelmio_alice.seed">1</parameter>
    <parameter key="nelmio_alice.loading_limit">5</parameter>
    <parameter key="nelmio_alice.max_unique_values_retry">150</parameter>
    <parameter key="fidry_alice_data_fixtures.default_purge_mode">delete</parameter>
    <parameter key="hautelook_alice.fixtures_path" type="collection">
      <parameter>fixtures</parameter>
    </parameter>
    <parameter key="hautelook_alice.root_dirs" type="collection">
      <parameter>/srv/app</parameter>
    </parameter>
    <parameter key="security.role_hierarchy.roles" type="collection">
      <parameter key="ROLE_EMPLOYEE" type="collection">
        <parameter>ROLE_USER</parameter>
      </parameter>
      <parameter key="ROLE_MANAGER" type="collection">
        <parameter>ROLE_EMPLOYEE</parameter>
      </parameter>
      <parameter key="ROLE_PRESTATAIRE" type="collection">
        <parameter>ROLE_MANAGER</parameter>
      </parameter>
      <parameter key="ROLE_ADMIN" type="collection">
        <parameter>ROLE_PRESTATAIRE</parameter>
      </parameter>
    </parameter>
    <parameter key="security.access.denied_url">null</parameter>
    <parameter key="security.authentication.manager.erase_credentials">true</parameter>
    <parameter key="security.authentication.session_strategy.strategy">migrate</parameter>
    <parameter key="security.authentication.hide_user_not_found">true</parameter>
    <parameter key="security.firewalls" type="collection">
      <parameter>dev</parameter>
      <parameter>api</parameter>
      <parameter>main</parameter>
    </parameter>
    <parameter key="lexik_jwt_authentication.authenticator_manager_enabled">true</parameter>
    <parameter key="nelmio_cors.map" type="collection">
      <parameter key="^/" type="collection">
        <parameter key="skip_same_as_origin">true</parameter>
      </parameter>
    </parameter>
    <parameter key="nelmio_cors.defaults" type="collection">
      <parameter key="allow_origin">true</parameter>
      <parameter key="allow_credentials">false</parameter>
      <parameter key="allow_headers" type="collection">
        <parameter>content-type</parameter>
        <parameter>authorization</parameter>
      </parameter>
      <parameter key="expose_headers" type="collection">
        <parameter>Link</parameter>
      </parameter>
      <parameter key="allow_methods" type="collection">
        <parameter>GET</parameter>
        <parameter>OPTIONS</parameter>
        <parameter>POST</parameter>
        <parameter>PUT</parameter>
        <parameter>PATCH</parameter>
        <parameter>DELETE</parameter>
      </parameter>
      <parameter key="max_age">3600</parameter>
      <parameter key="hosts" type="collection"/>
      <parameter key="origin_regex">false</parameter>
      <parameter key="forced_allow_origin_value">null</parameter>
      <parameter key="skip_same_as_origin">true</parameter>
    </parameter>
    <parameter key="nelmio_cors.cors_listener.class">Nelmio\CorsBundle\EventListener\CorsListener</parameter>
    <parameter key="nelmio_cors.options_resolver.class">Nelmio\CorsBundle\Options\Resolver</parameter>
    <parameter key="nelmio_cors.options_provider.config.class">Nelmio\CorsBundle\Options\ConfigProvider</parameter>
    <parameter key="api_platform.event_listeners_backward_compatibility_layer">true</parameter>
    <parameter key="api_platform.enable_entrypoint">true</parameter>
    <parameter key="api_platform.enable_docs">true</parameter>
    <parameter key="api_platform.keep_legacy_inflector">true</parameter>
    <parameter key="api_platform.title">Hello API Platform</parameter>
    <parameter key="api_platform.description"></parameter>
    <parameter key="api_platform.version">1.0.0</parameter>
    <parameter key="api_platform.show_webby">true</parameter>
    <parameter key="api_platform.url_generation_strategy">1</parameter>
    <parameter key="api_platform.exception_to_status" type="collection">
      <parameter key="Symfony\Component\Serializer\Exception\ExceptionInterface">400</parameter>
      <parameter key="ApiPlatform\Exception\InvalidArgumentException">400</parameter>
      <parameter key="ApiPlatform\Exception\FilterValidationException">400</parameter>
      <parameter key="Doctrine\ORM\OptimisticLockException">409</parameter>
    </parameter>
    <parameter key="api_platform.formats" type="collection">
      <parameter key="jsonld" type="collection">
        <parameter>application/ld+json</parameter>
      </parameter>
      <parameter key="json" type="collection">
        <parameter>application/json</parameter>
      </parameter>
      <parameter key="html" type="collection">
        <parameter>text/html</parameter>
      </parameter>
      <parameter key="multipart" type="collection">
        <parameter>multipart/form-data</parameter>
      </parameter>
    </parameter>
    <parameter key="api_platform.patch_formats" type="collection">
      <parameter key="json" type="collection">
        <parameter>application/merge-patch+json</parameter>
      </parameter>
    </parameter>
    <parameter key="api_platform.error_formats" type="collection">
      <parameter key="jsonproblem" type="collection">
        <parameter>application/problem+json</parameter>
      </parameter>
      <parameter key="jsonld" type="collection">
        <parameter>application/ld+json</parameter>
      </parameter>
      <parameter key="html" type="collection">
        <parameter>text/html</parameter>
      </parameter>
      <parameter key="json" type="collection">
        <parameter>application/problem+json</parameter>
        <parameter>application/json</parameter>
      </parameter>
    </parameter>
    <parameter key="api_platform.docs_formats" type="collection">
      <parameter key="jsonopenapi" type="collection">
        <parameter>application/vnd.openapi+json</parameter>
      </parameter>
      <parameter key="yamlopenapi" type="collection">
        <parameter>application/vnd.openapi+yaml</parameter>
      </parameter>
      <parameter key="json" type="collection">
        <parameter>application/json</parameter>
      </parameter>
      <parameter key="jsonld" type="collection">
        <parameter>application/ld+json</parameter>
      </parameter>
      <parameter key="html" type="collection">
        <parameter>text/html</parameter>
      </parameter>
    </parameter>
    <parameter key="api_platform.eager_loading.enabled">true</parameter>
    <parameter key="api_platform.eager_loading.max_joins">30</parameter>
    <parameter key="api_platform.eager_loading.fetch_partial">false</parameter>
    <parameter key="api_platform.eager_loading.force_eager">true</parameter>
    <parameter key="api_platform.collection.exists_parameter_name">exists</parameter>
    <parameter key="api_platform.collection.order">ASC</parameter>
    <parameter key="api_platform.collection.order_parameter_name">order</parameter>
    <parameter key="api_platform.collection.order_nulls_comparison">null</parameter>
    <parameter key="api_platform.collection.pagination.enabled">true</parameter>
    <parameter key="api_platform.collection.pagination.partial">false</parameter>
    <parameter key="api_platform.collection.pagination.client_enabled">false</parameter>
    <parameter key="api_platform.collection.pagination.client_items_per_page">false</parameter>
    <parameter key="api_platform.collection.pagination.client_partial">false</parameter>
    <parameter key="api_platform.collection.pagination.items_per_page">30</parameter>
    <parameter key="api_platform.collection.pagination.maximum_items_per_page">null</parameter>
    <parameter key="api_platform.collection.pagination.page_parameter_name">page</parameter>
    <parameter key="api_platform.collection.pagination.enabled_parameter_name">pagination</parameter>
    <parameter key="api_platform.collection.pagination.items_per_page_parameter_name">itemsPerPage</parameter>
    <parameter key="api_platform.collection.pagination.partial_parameter_name">partial</parameter>
    <parameter key="api_platform.collection.pagination" type="collection">
      <parameter key="enabled">true</parameter>
      <parameter key="page_parameter_name">page</parameter>
      <parameter key="enabled_parameter_name">pagination</parameter>
      <parameter key="items_per_page_parameter_name">itemsPerPage</parameter>
      <parameter key="partial_parameter_name">partial</parameter>
    </parameter>
    <parameter key="api_platform.http_cache.etag">true</parameter>
    <parameter key="api_platform.http_cache.max_age">null</parameter>
    <parameter key="api_platform.http_cache.shared_max_age">null</parameter>
    <parameter key="api_platform.http_cache.vary" type="collection">
      <parameter>Content-Type</parameter>
      <parameter>Authorization</parameter>
      <parameter>Origin</parameter>
    </parameter>
    <parameter key="api_platform.http_cache.public">null</parameter>
    <parameter key="api_platform.http_cache.invalidation.max_header_length">7500</parameter>
    <parameter key="api_platform.http_cache.invalidation.xkey.glue"> </parameter>
    <parameter key="api_platform.asset_package">null</parameter>
    <parameter key="api_platform.defaults" type="collection">
      <parameter key="extra_properties" type="collection">
        <parameter key="standard_put">true</parameter>
      </parameter>
      <parameter key="stateless">true</parameter>
      <parameter key="cache_headers" type="collection">
        <parameter key="vary" type="collection">
          <parameter>Content-Type</parameter>
          <parameter>Authorization</parameter>
          <parameter>Origin</parameter>
        </parameter>
      </parameter>
    </parameter>
    <parameter key="api_platform.rfc_7807_compliant_errors">false</parameter>
    <parameter key="api_platform.resource_class_directories" type="collection">
      <parameter>/srv/app/vendor/vich/uploader-bundle/src/Entity</parameter>
      <parameter>/srv/app/src/Entity</parameter>
    </parameter>
    <parameter key="api_platform.class_name_resources" type="collection">
      <parameter>ApiPlatform\ApiResource\Error</parameter>
      <parameter>ApiPlatform\Symfony\Validator\Exception\ValidationException</parameter>
    </parameter>
    <parameter key="api_platform.oauth.enabled">false</parameter>
    <parameter key="api_platform.oauth.clientId"></parameter>
    <parameter key="api_platform.oauth.clientSecret"></parameter>
    <parameter key="api_platform.oauth.type">oauth2</parameter>
    <parameter key="api_platform.oauth.flow">application</parameter>
    <parameter key="api_platform.oauth.tokenUrl"></parameter>
    <parameter key="api_platform.oauth.authorizationUrl"></parameter>
    <parameter key="api_platform.oauth.refreshUrl"></parameter>
    <parameter key="api_platform.oauth.scopes" type="collection"/>
    <parameter key="api_platform.oauth.pkce">false</parameter>
    <parameter key="api_platform.openapi.termsOfService">null</parameter>
    <parameter key="api_platform.openapi.contact.name">null</parameter>
    <parameter key="api_platform.openapi.contact.url">null</parameter>
    <parameter key="api_platform.openapi.contact.email">null</parameter>
    <parameter key="api_platform.openapi.license.name">null</parameter>
    <parameter key="api_platform.openapi.license.url">null</parameter>
    <parameter key="api_platform.swagger.versions" type="collection">
      <parameter>3</parameter>
    </parameter>
    <parameter key="api_platform.enable_swagger_ui">true</parameter>
    <parameter key="api_platform.enable_re_doc">true</parameter>
    <parameter key="api_platform.swagger.api_keys" type="collection">
      <parameter key="JWT" type="collection">
        <parameter key="name">Authorization</parameter>
        <parameter key="type">header</parameter>
      </parameter>
    </parameter>
    <parameter key="api_platform.swagger_ui.extra_configuration" type="collection"/>
    <parameter key="api_platform.graphql.enabled">true</parameter>
    <parameter key="api_platform.graphql.introspection.enabled">true</parameter>
    <parameter key="api_platform.graphql.graphiql.enabled">true</parameter>
    <parameter key="api_platform.graphql.graphql_playground.enabled">true</parameter>
    <parameter key="api_platform.graphql.collection.pagination" type="collection">
      <parameter key="enabled">true</parameter>
    </parameter>
    <parameter key="api_platform.graphql.default_ide">graphiql</parameter>
    <parameter key="api_platform.graphql.nesting_separator">_</parameter>
    <parameter key="api_platform.validator.serialize_payload_fields" type="collection"/>
    <parameter key="api_platform.validator.query_parameter_validation">true</parameter>
    <parameter key="api_platform.elasticsearch.enabled">false</parameter>
    <parameter key="lexik_jwt_authentication.pass_phrase">%env(JWT_PASSPHRASE)%</parameter>
    <parameter key="lexik_jwt_authentication.token_ttl">3600</parameter>
    <parameter key="lexik_jwt_authentication.clock_skew">0</parameter>
    <parameter key="lexik_jwt_authentication.user_identity_field">username</parameter>
    <parameter key="lexik_jwt_authentication.allow_no_expiration">false</parameter>
    <parameter key="lexik_jwt_authentication.user_id_claim">username</parameter>
    <parameter key="lexik_jwt_authentication.encoder.signature_algorithm">RS256</parameter>
    <parameter key="lexik_jwt_authentication.encoder.crypto_engine">openssl</parameter>
    <parameter key="web_profiler.debug_toolbar.intercept_redirects">false</parameter>
    <parameter key="web_profiler.debug_toolbar.mode">2</parameter>
    <parameter key="monolog.use_microseconds">true</parameter>
    <parameter key="monolog.swift_mailer.handlers" type="collection"/>
    <parameter key="monolog.handlers_to_channels" type="collection">
      <parameter key="monolog.handler.console" type="collection">
        <parameter key="type">exclusive</parameter>
        <parameter key="elements" type="collection">
          <parameter>event</parameter>
          <parameter>doctrine</parameter>
          <parameter>console</parameter>
        </parameter>
      </parameter>
      <parameter key="monolog.handler.main" type="collection">
        <parameter key="type">exclusive</parameter>
        <parameter key="elements" type="collection">
          <parameter>event</parameter>
        </parameter>
      </parameter>
    </parameter>
    <parameter key="env(VAR_DUMPER_SERVER)">127.0.0.1:9912</parameter>
    <parameter key="vich_uploader.default_filename_attribute_suffix">_name</parameter>
    <parameter key="vich_uploader.mappings" type="collection">
      <parameter key="media_uploads" type="collection">
        <parameter key="uri_prefix">/uploads/videos</parameter>
        <parameter key="upload_destination">/srv/app/public/uploads/media</parameter>
        <parameter key="namer" type="collection">
          <parameter key="service">Vich\UploaderBundle\Naming\OrignameNamer.media_uploads</parameter>
          <parameter key="options" type="collection"/>
        </parameter>
        <parameter key="directory_namer" type="collection">
          <parameter key="service">null</parameter>
          <parameter key="options">null</parameter>
        </parameter>
        <parameter key="delete_on_remove">true</parameter>
        <parameter key="delete_on_update">true</parameter>
        <parameter key="inject_on_load">false</parameter>
        <parameter key="db_driver">orm</parameter>
      </parameter>
    </parameter>
    <parameter key="vich_uploader.file_injector.class">Vich\UploaderBundle\Injector\FileInjector</parameter>
    <parameter key="data_collector.templates" type="collection">
      <parameter key="data_collector.request" type="collection">
        <parameter>request</parameter>
        <parameter>@WebProfiler/Collector/request.html.twig</parameter>
      </parameter>
      <parameter key="api_platform.data_collector.request" type="collection">
        <parameter>api_platform.data_collector.request</parameter>
        <parameter>@ApiPlatform/DataCollector/request.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.time" type="collection">
        <parameter>time</parameter>
        <parameter>@WebProfiler/Collector/time.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.memory" type="collection">
        <parameter>memory</parameter>
        <parameter>@WebProfiler/Collector/memory.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.validator" type="collection">
        <parameter>validator</parameter>
        <parameter>@WebProfiler/Collector/validator.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.ajax" type="collection">
        <parameter>ajax</parameter>
        <parameter>@WebProfiler/Collector/ajax.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.form" type="collection">
        <parameter>form</parameter>
        <parameter>@WebProfiler/Collector/form.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.exception" type="collection">
        <parameter>exception</parameter>
        <parameter>@WebProfiler/Collector/exception.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.logger" type="collection">
        <parameter>logger</parameter>
        <parameter>@WebProfiler/Collector/logger.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.events" type="collection">
        <parameter>events</parameter>
        <parameter>@WebProfiler/Collector/events.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.router" type="collection">
        <parameter>router</parameter>
        <parameter>@WebProfiler/Collector/router.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.cache" type="collection">
        <parameter>cache</parameter>
        <parameter>@WebProfiler/Collector/cache.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.security" type="collection">
        <parameter>security</parameter>
        <parameter>@Security/Collector/security.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.twig" type="collection">
        <parameter>twig</parameter>
        <parameter>@WebProfiler/Collector/twig.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.http_client" type="collection">
        <parameter>http_client</parameter>
        <parameter>@WebProfiler/Collector/http_client.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.doctrine" type="collection">
        <parameter>db</parameter>
        <parameter>@Doctrine/Collector/db.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.dump" type="collection">
        <parameter>dump</parameter>
        <parameter>@Debug/Profiler/dump.html.twig</parameter>
      </parameter>
      <parameter key="mailer.data_collector" type="collection">
        <parameter>mailer</parameter>
        <parameter>@WebProfiler/Collector/mailer.html.twig</parameter>
      </parameter>
      <parameter key="serializer.data_collector" type="collection">
        <parameter>serializer</parameter>
        <parameter>@WebProfiler/Collector/serializer.html.twig</parameter>
      </parameter>
      <parameter key="Vich\UploaderBundle\DataCollector\MappingCollector" type="collection">
        <parameter>vich_uploader.mapping_collector</parameter>
        <parameter>@VichUploader/Collector/mapping_collector.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.config" type="collection">
        <parameter>config</parameter>
        <parameter>@WebProfiler/Collector/config.html.twig</parameter>
      </parameter>
    </parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="kernel" class="App\Kernel" public="true" synthetic="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="routing.route_loader"/>
    </service>
    <service id="App\Entity" class="App\Entity" abstract="true">
      <tag name="container.excluded" source="in &quot;config/services.yaml&quot;"/>
    </service>
    <service id="App\Controller\AddEstablishmentToPrestataireController" class="App\Controller\AddEstablishmentToPrestataireController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="App\Services\UploaderService"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="security.helper"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\AddEstablishmentToPrestataireController"/>
      </call>
    </service>
    <service id="App\Controller\AddPrestationToEstablishmentController" class="App\Controller\AddPrestationToEstablishmentController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="App\Services\UploaderService"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\CategoryRepository"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\AddPrestationToEstablishmentController"/>
      </call>
    </service>
    <service id="App\Controller\DeleteEstablishmentController" class="App\Controller\DeleteEstablishmentController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="security.helper"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\DeleteEstablishmentController"/>
      </call>
    </service>
    <service id="App\Controller\DeletePrestataireController" class="App\Controller\DeletePrestataireController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="security.helper"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\DeletePrestataireController"/>
      </call>
    </service>
    <service id="App\Controller\DeteteBookingController" class="App\Controller\DeteteBookingController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="security.helper"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\DeteteBookingController"/>
      </call>
    </service>
    <service id="App\Controller\GetEstablishmentsByPrestataireController" class="App\Controller\GetEstablishmentsByPrestataireController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\GetEstablishmentsByPrestataireController"/>
      </call>
    </service>
    <service id="App\Controller\MediaOploaderController" class="App\Controller\MediaOploaderController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="App\Services\UploaderService"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\MediaOploaderController"/>
      </call>
    </service>
    <service id="App\Controller\PaymentController" class="App\Controller\PaymentController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\PrestationRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="App\Repository\UserRepository"/>
      <argument type="service" id="lexik_jwt_authentication.encoder.lcobucci"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\PaymentController"/>
      </call>
    </service>
    <service id="App\Controller\RegisterPrestataireController" class="App\Controller\RegisterPrestataireController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="App\Services\UploaderService"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="mailer.mailer"/>
      <argument type="service" id="security.helper"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\RegisterPrestataireController"/>
      </call>
    </service>
    <service id="App\Controller\RegistrationController" class="App\Controller\RegistrationController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\RegistrationController"/>
      </call>
    </service>
    <service id="App\Controller\ResearchPrestationController" class="App\Controller\ResearchPrestationController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\ResearchPrestationController"/>
      </call>
    </service>
    <service id="App\Controller\TestController" class="App\Controller\TestController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\TestController"/>
      </call>
    </service>
    <service id="App\Controller\VideoOploaderController" class="App\Controller\VideoOploaderController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="App\Services\UploaderService"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\VideoOploaderController"/>
      </call>
    </service>
    <service id="App\DataFixtures\DataFixtures" class="App\DataFixtures\DataFixtures" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixture.orm"/>
      <argument type="service" id="security.user_password_hasher"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\Dto\AssignManagerToEtabDto" class="App\Dto\AssignManagerToEtabDto" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;App\Dto\AssignManagerToEtabDto&quot;: argument &quot;$firstname&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="App\Dto\PatchUserDto" class="App\Dto\PatchUserDto" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;App\Dto\PatchUserDto&quot;: argument &quot;$firstname&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="App\Dto\RegisterEmployeeDto" class="App\Dto\RegisterEmployeeDto" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;App\Dto\RegisterEmployeeDto&quot;: argument &quot;$email&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="App\Dto\RegisterPrestataireDto" class="App\Dto\RegisterPrestataireDto" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;App\Dto\RegisterPrestataireDto&quot;: argument &quot;$name&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="App\Dto\RegisterUserDto" class="App\Dto\RegisterUserDto" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;App\Dto\RegisterUserDto&quot;: argument &quot;$firstname&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="App\EventListener\JWTCreatedListener" class="App\EventListener\JWTCreatedListener" autowire="true" autoconfigure="true">
      <tag name="kernel.event_listener" event="lexik_jwt_authentication.on_jwt_created" method="onJWTCreated"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="App\Form\PersonneType" class="App\Form\PersonneType" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="App\Form\TestType" class="App\Form\TestType" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="App\Purger\CustomPurger" class="App\Purger\CustomPurger" autowire="true" autoconfigure="true">
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="App\Repository\EstablishmentRepository"/>
      <argument type="service" id="App\Repository\PrestataireRepository"/>
      <argument type="service" id="App\Repository\PrestationRepository"/>
      <argument type="service" id="App\Repository\CategoryRepository"/>
    </service>
    <service id="App\Purger\CustomPurgerFactory" class="App\Purger\CustomPurgerFactory" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixtures.purger_factory" alias="my_purger"/>
      <argument type="service" id="App\Repository\EstablishmentRepository"/>
      <argument type="service" id="App\Repository\PrestataireRepository"/>
      <argument type="service" id="App\Repository\PrestationRepository"/>
      <argument type="service" id="App\Repository\CategoryRepository"/>
    </service>
    <service id="App\Repository\BookingRepository" class="App\Repository\BookingRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\CategoryRepository" class="App\Repository\CategoryRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\EmployeeScheduleRepository" class="App\Repository\EmployeeScheduleRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\EstablishmentRepository" class="App\Repository\EstablishmentRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\FeedbackRepository" class="App\Repository\FeedbackRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\MediaRepository" class="App\Repository\MediaRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\PrestataireRepository" class="App\Repository\PrestataireRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\PrestationRepository" class="App\Repository\PrestationRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\SlotRepository" class="App\Repository\SlotRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\TestRepository" class="App\Repository\TestRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\UserRepository" class="App\Repository\UserRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\VideoRepository" class="App\Repository\VideoRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Services\MailerService" class="App\Services\MailerService" autowire="true" autoconfigure="true">
      <argument type="service" id="mailer.mailer"/>
    </service>
    <service id="App\Services\UploaderService" class="App\Services\UploaderService" autowire="true" autoconfigure="true">
      <argument type="service" id="slugger"/>
      <argument>/srv/app/public/uploads</argument>
      <argument type="service" id="Aws\S3\S3Client"/>
      <argument>%env(APP_ENV)%</argument>
    </service>
    <service id="App\State\ApprovePrestataireProcessor" class="App\State\ApprovePrestataireProcessor" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="mailer.mailer"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="App\State\AssignManagerToEstablishmentStateProcessor" class="App\State\AssignManagerToEstablishmentStateProcessor" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\EstablishmentRepository"/>
      <argument type="service" id="App\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\State\CreateEstablishmentProcessor" class="App\State\CreateEstablishmentProcessor" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="App\State\GetBookingsStateProvider" class="App\State\GetBookingsStateProvider" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_provider"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\BookingRepository"/>
    </service>
    <service id="App\State\GetEmployeesByPrestataireStateProvider" class="App\State\GetEmployeesByPrestataireStateProvider" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_provider"/>
      <argument type="service" id="App\Repository\PrestataireRepository"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\UserRepository"/>
    </service>
    <service id="App\State\GetEmployeesStateProvider" class="App\State\GetEmployeesStateProvider" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_provider"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\PrestataireRepository"/>
      <argument type="service" id="App\Repository\UserRepository"/>
    </service>
    <service id="App\State\GetEstablishmentByPrestataireStateProvider" class="App\State\GetEstablishmentByPrestataireStateProvider" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_provider"/>
      <argument type="service" id="App\Repository\PrestataireRepository"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="App\State\GetEstablishmentsStateProvider" class="App\State\GetEstablishmentsStateProvider" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_provider"/>
      <argument type="service" id="App\Repository\EstablishmentRepository"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="App\State\GetOneEstablishmentStateProvider" class="App\State\GetOneEstablishmentStateProvider" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_provider"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\EstablishmentRepository"/>
    </service>
    <service id="App\State\GetPrestatairesForUserStateProvider" class="App\State\GetPrestatairesForUserStateProvider" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_provider"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\PrestataireRepository"/>
    </service>
    <service id="App\State\RegisterEmployeeProcessor" class="App\State\RegisterEmployeeProcessor" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="security.user_password_hasher"/>
      <argument type="service" id="security.helper"/>
      <argument type="service" id="App\Repository\UserRepository"/>
    </service>
    <service id="App\State\RegisterPrestataireProcessor" class="App\State\RegisterPrestataireProcessor" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="mailer.mailer"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="App\State\RejectPrestataireProcessor" class="App\State\RejectPrestataireProcessor" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="mailer.mailer"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="App\State\UserPasswordHasher" class="App\State\UserPasswordHasher" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="api_platform.doctrine.orm.state.persist_processor"/>
      <argument type="service" id="security.user_password_hasher"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="mailer.mailer"/>
    </service>
    <service id="App\State\UserPatchProcessor" class="App\State\UserPatchProcessor" autowire="true" autoconfigure="true">
      <tag name="api_platform.state_processor" resource_class="App\Entity\User" operation="patch"/>
      <tag name="api_platform.state_processor"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="App\Services\UploaderService"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="App\Trait\TraitCreateAdminUser" class="App\Trait\TraitCreateAdminUser" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;App\Trait\TraitCreateAdminUser&quot; to be defined in file &quot;/srv/app/vendor/composer/../../src/Trait/TraitCreateAdminUser.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="Aws\S3\S3Client" class="Aws\S3\S3Client" autowire="true" autoconfigure="true">
      <argument type="collection">
        <argument key="version">latest</argument>
        <argument key="region">eu-central-1</argument>
        <argument key="credentials" type="collection">
          <argument key="key">%env(AWS_ACCESS_KEY)%</argument>
          <argument key="secret">%env(AWS_SECRET_KEY)%</argument>
        </argument>
      </argument>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory"/>
    <service id="argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="clock" on-invalid="null"/>
    </service>
    <service id="argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" lazy="true">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver">controller.targeted_value_resolver</tag>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="debug.validator" on-invalid="null"/>
      <argument>null</argument>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">
      <tag priority="-50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id=".service_locator.LWAGtDU"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">
      <tag priority="-100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">
      <tag priority="-150" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">controller.targeted_value_resolver</tag>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
      <argument>false</argument>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
      <argument>false</argument>
      <argument type="collection"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="error_controller" class="Symfony\Component\HttpKernel\Controller\ErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>error_controller</argument>
      <argument type="service" id="error_handler.error_renderer.serializer"/>
    </service>
    <service id="exception_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorListener">
      <tag name="monolog.logger" channel="request"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument>error_controller</argument>
      <argument type="service" id="monolog.logger.request" on-invalid="null"/>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="controller.cache_attribute_listener" class="Symfony\Component\HttpKernel\EventListener\CacheAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag">
      <argument type="service" id="service_container"/>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\HttpKernelRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\ResponseRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\SymfonyRuntime"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="debug.controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="debug.argument_resolver"/>
      <argument>true</argument>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="http_cache" class="Symfony\Bundle\FrameworkBundle\HttpCache\HttpCache">
      <tag name="container.hot_path"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="http_cache.store"/>
      <argument>null</argument>
      <argument type="collection">
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="http_cache.store" class="Symfony\Component\HttpKernel\HttpCache\Store">
      <argument>/srv/app/var/cache/dev/http_cache</argument>
    </service>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <tag name="container.no_preload"/>
      <argument type="tagged_iterator" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/srv/app/var/cache/dev/App_KernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="tagged_iterator" tag="kernel.cache_clearer"/>
    </service>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory">
      <argument type="tagged_iterator" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="http_client.transport" type="service" id="http_client.transport" on-invalid="ignore_uninitialized"/>
        <argument key="mailer.message_logger_listener" type="service" id="mailer.message_logger_listener" on-invalid="ignore_uninitialized"/>
        <argument key="debug.stopwatch" type="service" id="debug.stopwatch" on-invalid="ignore_uninitialized"/>
        <argument key="debug.event_dispatcher" type="service" id="debug.event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="session_listener" type="service" id="session_listener" on-invalid="ignore_uninitialized"/>
        <argument key="form.choice_list_factory.cached" type="service" id="form.choice_list_factory.cached" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="profiler" type="service" id="profiler" on-invalid="ignore_uninitialized"/>
        <argument key="debug.validator" type="service" id="debug.validator" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine" type="service" id="doctrine" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.debug_data_holder" type="service" id="doctrine.debug_data_holder" on-invalid="ignore_uninitialized"/>
        <argument key="form.type.entity" type="service" id="form.type.entity" on-invalid="ignore_uninitialized"/>
        <argument key="twig.form.engine" type="service" id="twig.form.engine" on-invalid="ignore_uninitialized"/>
        <argument key="security.token_storage" type="service" id="security.token_storage" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_is_granted_attribute_expression_language" type="service" id="cache.security_is_granted_attribute_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall" type="service" id="debug.security.firewall" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall.authenticator.api" type="service" id="debug.security.firewall.authenticator.api" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall.authenticator.main" type="service" id="debug.security.firewall.authenticator.main" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.route_name_resolver" type="service" id="api_platform.cache.route_name_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.resource" type="service" id="api_platform.cache.metadata.resource" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.property" type="service" id="api_platform.cache.metadata.property" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.resource_collection" type="service" id="api_platform.cache.metadata.resource_collection" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.graphql.cache.subscription" type="service" id="api_platform.graphql.cache.subscription" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.handler.main" type="service" id="monolog.handler.main" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.handler.console" type="service" id="monolog.handler.console" on-invalid="ignore_uninitialized"/>
        <argument key=".debug.http_client" type="service" id=".debug.http_client" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="cache.app" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.system" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.serializer" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.annotations" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.property_info" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="http_client.transport" type="collection">
          <argument>?reset</argument>
        </argument>
        <argument key="mailer.message_logger_listener" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.stopwatch" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.event_dispatcher" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="session_listener" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="form.choice_list_factory.cached" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator_expression_language" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="profiler" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="doctrine" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="doctrine.debug_data_holder" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="form.type.entity" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="twig.form.engine" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="security.token_storage" type="collection">
          <argument>disableUsageTracking</argument>
          <argument>setToken</argument>
        </argument>
        <argument key="cache.security_expression_language" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.security_is_granted_attribute_expression_language" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.security.firewall" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.security.firewall.authenticator.api" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.security.firewall.authenticator.main" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="api_platform.cache.route_name_resolver" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="api_platform.cache.metadata.resource" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="api_platform.cache.metadata.property" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="api_platform.cache.metadata.resource_collection" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="api_platform.graphql.cache.subscription" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="monolog.handler.main" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="monolog.handler.console" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key=".debug.http_client" type="collection">
          <argument>reset</argument>
        </argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.XXv1IfR"/>
    </service>
    <service id="locale_aware_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleAwareListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="iterator">
        <argument type="service" id="slugger"/>
      </argument>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="container.env_var_processor" class="Symfony\Component\DependencyInjection\EnvVarProcessor">
      <tag name="container.env_var_processor"/>
      <argument type="service" id="service_container"/>
      <argument type="tagged_iterator" tag="container.env_var_loader"/>
    </service>
    <service id="slugger" class="Symfony\Component\String\Slugger\AsciiSlugger">
      <tag name="kernel.locale_aware"/>
      <argument>en</argument>
    </service>
    <service id="container.getenv" class="Closure">
      <tag name="routing.expression_language_function" function="env"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>getEnv</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.get_routing_condition_service" class="Closure" public="true">
      <tag name="routing.expression_language_function" function="service"/>
      <argument type="collection">
        <argument type="service" id="api_platform.graphql.resolver_locator"/>
        <argument>get</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.env" class="Symfony\Component\String\LazyString" constructor="fromCallable" abstract="true">
      <argument type="service" id="container.getenv"/>
    </service>
    <service id="config_builder.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="clock" class="Symfony\Component\Clock\Clock"/>
    <service id="Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Request" class="Symfony\Component\HttpFoundation\Request" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Response" class="Symfony\Component\HttpFoundation\Response" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" class="Symfony\Component\HttpFoundation\Session\SessionInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler">
      <argument type="service" id=".service_locator.lLv4pWF"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.uri_generator" class="Symfony\Component\HttpKernel\Fragment\FragmentUriGenerator">
      <argument>/_fragment</argument>
      <argument type="service" id="uri_signer"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="error_handler.error_renderer.html" class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer">
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
      <argument>UTF-8</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/srv/app</argument>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="getAndCleanOutputBuffer"/>
        </service>
      </argument>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener">
      <tag name="monolog.logger" channel="console"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="monolog.logger.console" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>about</argument>
      </call>
      <call method="setDescription">
        <argument>Display information about the current project</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>/srv/app</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
      <call method="setDescription">
        <argument>Install bundle's web assets under a public directory</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear the cache</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.validator_expression_language</argument>
        <argument>cache.doctrine.orm.default.result</argument>
        <argument>cache.doctrine.orm.default.query</argument>
        <argument>cache.security_expression_language</argument>
        <argument>cache.security_is_granted_attribute_expression_language</argument>
        <argument>api_platform.cache.route_name_resolver</argument>
        <argument>api_platform.cache.metadata.resource</argument>
        <argument>api_platform.cache.metadata.property</argument>
        <argument>api_platform.cache.metadata.resource_collection</argument>
        <argument>api_platform.graphql.cache.subscription</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
      <call method="setDescription">
        <argument>Prune cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_invalidate_tags" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.NBUFN6A"/>
      <call method="setName">
        <argument>cache:pool:invalidate-tags</argument>
      </call>
      <call method="setDescription">
        <argument>Invalidate cache tags for all or a specific pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.validator_expression_language</argument>
        <argument>cache.doctrine.orm.default.result</argument>
        <argument>cache.doctrine.orm.default.query</argument>
        <argument>cache.security_expression_language</argument>
        <argument>cache.security_is_granted_attribute_expression_language</argument>
        <argument>api_platform.cache.route_name_resolver</argument>
        <argument>api_platform.cache.metadata.resource</argument>
        <argument>api_platform.cache.metadata.property</argument>
        <argument>api_platform.cache.metadata.resource_collection</argument>
        <argument>api_platform.graphql.cache.subscription</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
      <call method="setDescription">
        <argument>Delete an item from a cache pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.validator_expression_language</argument>
        <argument>cache.doctrine.orm.default.result</argument>
        <argument>cache.doctrine.orm.default.query</argument>
        <argument>cache.security_expression_language</argument>
        <argument>cache.security_is_granted_attribute_expression_language</argument>
        <argument>api_platform.cache.route_name_resolver</argument>
        <argument>api_platform.cache.metadata.resource</argument>
        <argument>api_platform.cache.metadata.property</argument>
        <argument>api_platform.cache.metadata.resource_collection</argument>
        <argument>api_platform.graphql.cache.subscription</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
      <call method="setDescription">
        <argument>List available cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
      <call method="setDescription">
        <argument>Warm up an empty cache</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the current configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the default configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
      <call method="setDescription">
        <argument>Display current services for an application</argument>
      </call>
    </service>
    <service id="console.command.container_lint" class="Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:container</argument>
      </call>
      <call method="setDescription">
        <argument>Ensure that arguments injected into services match type declarations</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
      <call method="setDescription">
        <argument>List classes/interfaces you can use for autowiring</argument>
      </call>
    </service>
    <service id="console.command.dotenv_debug" class="Symfony\Component\Dotenv\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>dev</argument>
      <argument>/srv/app</argument>
      <call method="setName">
        <argument>debug:dotenv</argument>
      </call>
      <call method="setDescription">
        <argument>Lists all dotenv files with variables and values</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.im8QGPA"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
      <call method="setDescription">
        <argument>Display configured listeners for an application</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
      <call method="setDescription">
        <argument>Display current routes for an application</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="tagged_iterator" tag="routing.expression_language_provider"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
      <call method="setDescription">
        <argument>Help debug routes by simulating a path info match</argument>
      </call>
    </service>
    <service id="console.command.serializer_debug" class="Symfony\Component\Serializer\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
      <call method="setName">
        <argument>debug:serializer</argument>
      </call>
      <call method="setDescription">
        <argument>Display serialization information for classes</argument>
      </call>
    </service>
    <service id="console.command.validator_debug" class="Symfony\Component\Validator\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="debug.validator"/>
      <call method="setName">
        <argument>debug:validator</argument>
      </call>
      <call method="setDescription">
        <argument>Display validation constraints for classes</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
      <call method="setDescription">
        <argument>Lint a YAML file and outputs encountered errors</argument>
      </call>
    </service>
    <service id="console.command.form_debug" class="Symfony\Component\Form\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="form.registry"/>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type</argument>
        <argument>App\Form</argument>
        <argument>Symfony\Bridge\Doctrine\Form\Type</argument>
        <argument>Vich\UploaderBundle\Form\Type</argument>
      </argument>
      <argument type="collection">
        <argument>App\Form\PersonneType</argument>
        <argument>App\Form\TestType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\FormType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\ChoiceType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\FileType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\ColorType</argument>
        <argument>Symfony\Bridge\Doctrine\Form\Type\EntityType</argument>
        <argument>Vich\UploaderBundle\Form\Type\VichFileType</argument>
        <argument>Vich\UploaderBundle\Form\Type\VichImageType</argument>
      </argument>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension</argument>
        <argument>Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension</argument>
        <argument>Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension</argument>
        <argument>Symfony\Component\Form\Extension\PasswordHasher\Type\FormTypePasswordHasherExtension</argument>
        <argument>Symfony\Component\Form\Extension\PasswordHasher\Type\PasswordTypePasswordHasherExtension</argument>
      </argument>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser</argument>
        <argument>Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser</argument>
      </argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:form</argument>
      </call>
      <call method="setDescription">
        <argument>Display form type information</argument>
      </call>
    </service>
    <service id="console.command.secrets_set" class="Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:set</argument>
      </call>
      <call method="setDescription">
        <argument>Set a secret in the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_remove" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:remove</argument>
      </call>
      <call method="setDescription">
        <argument>Remove a secret from the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_generate_key" class="Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:generate-keys</argument>
      </call>
      <call method="setDescription">
        <argument>Generate new encryption keys</argument>
      </call>
    </service>
    <service id="console.command.secrets_list" class="Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:list</argument>
      </call>
      <call method="setDescription">
        <argument>List all secrets</argument>
      </call>
    </service>
    <service id="console.command.secrets_decrypt_to_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:decrypt-to-local</argument>
      </call>
      <call method="setDescription">
        <argument>Decrypt all secrets and stores them in the local vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_encrypt_from_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:encrypt-from-local</argument>
      </call>
      <call method="setDescription">
        <argument>Encrypt all local secrets to the vault</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.app.recorder_inner"/>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter">
      <tag name="cache.taggable" pool="cache.app"/>
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.system.recorder_inner"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.validator.recorder_inner"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.serializer.recorder_inner"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.annotations.recorder_inner"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.property_info.recorder_inner"/>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/srv/app/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer" reset="reset"/>
      <argument type="abstract">PSR-6 provider service</argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.redis_tag_aware" class="Symfony\Component\Cache\Adapter\RedisTagAwareAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Memcached connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine_dbal" class="Symfony\Component\Cache\Adapter\DoctrineDbalAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_dbal_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">DBAL connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">PDO connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_is_granted_attribute_expression_language" type="service" id="cache.security_is_granted_attribute_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.route_name_resolver" type="service" id="api_platform.cache.route_name_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.resource" type="service" id="api_platform.cache.metadata.resource" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.property" type="service" id="api_platform.cache.metadata.property" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.resource_collection" type="service" id="api_platform.cache.metadata.resource_collection" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.graphql.cache.subscription" type="service" id="api_platform.graphql.cache.subscription" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.doctrine.orm.default.result" type="service" id="cache.doctrine.orm.default.result" on-invalid="ignore_uninitialized"/>
        <argument key="cache.doctrine.orm.default.query" type="service" id="cache.doctrine.orm.default.query" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_is_granted_attribute_expression_language" type="service" id="cache.security_is_granted_attribute_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.route_name_resolver" type="service" id="api_platform.cache.route_name_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.resource" type="service" id="api_platform.cache.metadata.resource" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.property" type="service" id="api_platform.cache.metadata.property" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.cache.metadata.resource_collection" type="service" id="api_platform.cache.metadata.resource_collection" on-invalid="ignore_uninitialized"/>
        <argument key="api_platform.graphql.cache.subscription" type="service" id="api_platform.graphql.cache.subscription" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="assets.packages" class="Symfony\Component\Asset\Packages">
      <argument type="service" id="assets._default_package"/>
      <argument type="tagged_iterator" tag="assets.package" index-by="package" default-index-method="getDefaultPackageName" default-priority-method="getDefaultPackagePriority"/>
    </service>
    <service id="assets.empty_package" class="Symfony\Component\Asset\Package">
      <argument type="service" id="assets.empty_version_strategy"/>
    </service>
    <service id="assets.context" class="Symfony\Component\Asset\Context\RequestStackContext">
      <argument type="service" id="request_stack"/>
      <argument type="service">
        <service class="string">
          <factory service="router.request_context" method="getBaseUrl"/>
        </service>
      </argument>
      <argument type="service">
        <service class="bool">
          <factory service="router.request_context" method="isSecure"/>
        </service>
      </argument>
    </service>
    <service id="assets.path_package" class="Symfony\Component\Asset\PathPackage" abstract="true">
      <argument type="abstract">base path</argument>
      <argument type="abstract">version strategy</argument>
      <argument type="service" id="assets.context"/>
    </service>
    <service id="assets.url_package" class="Symfony\Component\Asset\UrlPackage" abstract="true">
      <argument type="abstract">base URLs</argument>
      <argument type="abstract">version strategy</argument>
      <argument type="service" id="assets.context"/>
    </service>
    <service id="assets.static_version_strategy" class="Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy" abstract="true">
      <argument type="abstract">version</argument>
      <argument type="abstract">format</argument>
    </service>
    <service id="assets.empty_version_strategy" class="Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy"/>
    <service id="assets.json_manifest_version_strategy" class="Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy" abstract="true">
      <argument type="abstract">manifest path</argument>
      <argument type="service" id=".debug.http_client" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="assets._default_package" class="Symfony\Component\Asset\PathPackage">
      <argument></argument>
      <argument type="service" id="assets.empty_version_strategy"/>
      <argument type="service" id="assets.context"/>
    </service>
    <service id="http_client.transport" class="Symfony\Contracts\HttpClient\HttpClientInterface">
      <tag name="monolog.logger" channel="http_client"/>
      <tag name="kernel.reset" method="reset" on_invalid="ignore"/>
      <argument type="collection"/>
      <argument>6</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.http_client" on-invalid="ignore"/>
      </call>
      <factory class="Symfony\Component\HttpClient\HttpClient" method="create"/>
    </service>
    <service id="psr18.http_client" class="Symfony\Component\HttpClient\Psr18Client">
      <argument type="service" id=".debug.http_client"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="http_client.abstract_retry_strategy" class="Symfony\Component\HttpClient\Retry\GenericRetryStrategy" abstract="true">
      <argument type="abstract">http codes</argument>
      <argument type="abstract">delay ms</argument>
      <argument type="abstract">multiplier</argument>
      <argument type="abstract">max delay ms</argument>
      <argument type="abstract">jitter</argument>
    </service>
    <service id="http_client.uri_template" class="Symfony\Component\HttpClient\UriTemplateHttpClient">
      <argument type="service" id="http_client.uri_template.inner"/>
      <argument>null</argument>
      <argument type="collection"/>
    </service>
    <service id="http_client.uri_template_expander.guzzle" class="Closure">
      <argument type="collection">
        <argument>GuzzleHttp\UriTemplate\UriTemplate</argument>
        <argument>expand</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="http_client.uri_template_expander.rize" class="Closure">
      <argument type="collection">
        <argument type="service">
          <service class="Rize\UriTemplate"/>
        </argument>
        <argument>expand</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="mailer.mailer" class="Symfony\Component\Mailer\Mailer">
      <argument type="service" id="mailer.transports"/>
      <argument>null</argument>
      <argument type="service" id="debug.event_dispatcher" on-invalid="ignore"/>
    </service>
    <service id="mailer.transports" class="Symfony\Component\Mailer\Transport\Transports">
      <argument type="collection">
        <argument key="main">%env(MAILER_DSN)%</argument>
      </argument>
      <factory service="mailer.transport_factory" method="fromStrings"/>
    </service>
    <service id="mailer.transport_factory" class="Symfony\Component\Mailer\Transport">
      <argument type="tagged_iterator" tag="mailer.transport_factory"/>
    </service>
    <service id="mailer.default_transport" class="Symfony\Component\Mailer\Transport\TransportInterface">
      <argument>%env(MAILER_DSN)%</argument>
      <factory service="mailer.transport_factory" method="fromString"/>
    </service>
    <service id="mailer.messenger.message_handler" class="Symfony\Component\Mailer\Messenger\MessageHandler">
      <tag name="messenger.message_handler"/>
      <argument type="service" id="mailer.transports"/>
    </service>
    <service id="mailer.envelope_listener" class="Symfony\Component\Mailer\EventListener\EnvelopeListener">
      <tag name="kernel.event_subscriber"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="mailer.message_logger_listener" class="Symfony\Component\Mailer\EventListener\MessageLoggerListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="mailer.messenger_transport_listener" class="Symfony\Component\Mailer\EventListener\MessengerTransportListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="console.command.mailer_test" class="Symfony\Component\Mailer\Command\MailerTestCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="mailer.transports"/>
      <call method="setName">
        <argument>mailer:test</argument>
      </call>
      <call method="setDescription">
        <argument>Test Mailer transports by sending an email</argument>
      </call>
    </service>
    <service id="mailer.transport_factory.abstract" class="Symfony\Component\Mailer\Transport\AbstractTransportFactory" abstract="true">
      <tag name="monolog.logger" channel="mailer"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id=".debug.http_client" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.mailer" on-invalid="ignore"/>
    </service>
    <service id="mailer.transport_factory.null" class="Symfony\Component\Mailer\Transport\NullTransportFactory">
      <tag name="mailer.transport_factory"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id=".debug.http_client" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.mailer" on-invalid="ignore"/>
    </service>
    <service id="mailer.transport_factory.sendmail" class="Symfony\Component\Mailer\Transport\SendmailTransportFactory">
      <tag name="mailer.transport_factory"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id=".debug.http_client" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.mailer" on-invalid="ignore"/>
    </service>
    <service id="mailer.transport_factory.sendinblue" class="Symfony\Component\Mailer\Bridge\Sendinblue\Transport\SendinblueTransportFactory">
      <tag name="mailer.transport_factory"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id=".debug.http_client" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.mailer" on-invalid="ignore"/>
    </service>
    <service id="mailer.transport_factory.smtp" class="Symfony\Component\Mailer\Transport\Smtp\EsmtpTransportFactory">
      <tag name="mailer.transport_factory" priority="-100"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id=".debug.http_client" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.mailer" on-invalid="ignore"/>
    </service>
    <service id="mailer.transport_factory.native" class="Symfony\Component\Mailer\Transport\NativeTransportFactory">
      <tag name="mailer.transport_factory"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id=".debug.http_client" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.mailer" on-invalid="ignore"/>
    </service>
    <service id="debug.error_handler_configurator" class="Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator" public="true">
      <tag name="monolog.logger" channel="php"/>
      <argument type="service" id="monolog.logger.php"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="service" id="monolog.logger.deprecation"/>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter">
      <argument>%env(default::SYMFONY_IDE)%</argument>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
      <argument>/srv/app</argument>
      <argument type="service_closure" id="debug.file_link_formatter.url_format"/>
    </service>
    <service id="debug.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch">
      <tag name="kernel.reset" method="reset"/>
      <argument>true</argument>
    </service>
    <service id="debug.event_dispatcher" class="Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher">
      <tag name="container.hot_path"/>
      <tag name="event_dispatcher">event_dispatcher.dispatcher</tag>
      <tag name="monolog.logger" channel="event"/>
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="event_dispatcher" inner="debug.event_dispatcher.inner"/>
      <argument type="service" id="debug.event_dispatcher.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="monolog.logger.event" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>lexik_jwt_authentication.on_jwt_created</argument>
        <argument type="collection">
          <argument type="service_closure" id="App\EventListener\JWTCreatedListener"/>
          <argument>onJWTCreated</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service_closure" id="data_collector.router"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.context_listener.0"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="nelmio_cors.cors_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>250</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="nelmio_cors.cors_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="nelmio_cors.cacheable_response_vary_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.exception"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-96</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.request.add_format"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>28</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.request.read"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>4</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.view.write"/>
          <argument>onKernelView</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.request.deserialize"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>2</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.view.serialize"/>
          <argument>onKernelView</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.view.respond"/>
          <argument>onKernelView</argument>
        </argument>
        <argument>8</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.exception.validation"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.swagger.listener.ui"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.hydra.listener.response.add_link_header"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.http_cache.listener.response.configure"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.view.validate"/>
          <argument>onKernelView</argument>
        </argument>
        <argument>64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.listener.view.validate_query_parameters"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.security.listener.request.deny_access"/>
          <argument>onSecurity</argument>
        </argument>
        <argument>3</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.security.listener.request.deny_access"/>
          <argument>onSecurityPostDenormalize</argument>
        </argument>
        <argument>1</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service_closure" id="api_platform.security.listener.request.deny_access"/>
          <argument>onSecurityPostValidation</argument>
        </argument>
        <argument>63</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="argument_resolver.request_payload"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>removeCspHeader</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_aware_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>15</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_aware_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>-15</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Mailer\Event\MessageEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="mailer.envelope_listener"/>
          <argument>onMessage</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Mailer\Event\MessageEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="mailer.message_logger_listener"/>
          <argument>onMessage</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Mailer\Event\MessageEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="mailer.messenger_transport_listener"/>
          <argument>onMessage</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="web_link.add_link_header_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="profiler_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="profiler_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="profiler_listener"/>
          <argument>onKernelTerminate</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service_closure" id="data_collector.request"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="data_collector.request"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.template_attribute_listener"/>
          <argument>onKernelView</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Mailer\Event\MessageEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="twig.mailer.message_listener"/>
          <argument>onMessage</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.is_granted_attribute_listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>20</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.check_authenticator_credentials"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.password_migrating"/>
          <argument>onLoginSuccess</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>debug.security.authorization.vote</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.voter.vote_listener"/>
          <argument>onVoterVote</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.firewall"/>
          <argument>configureLogoutUrlGenerator</argument>
        </argument>
        <argument>8</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.firewall"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>8</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.firewall"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="web_profiler.debug_toolbar"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="monolog.handler.console"/>
          <argument>onCommand</argument>
        </argument>
        <argument>255</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="monolog.handler.console"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.dump_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.csrf_protection"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>512</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.csrf_token_clearing"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="debug.controller_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableControllerResolver">
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.decorator" id="controller_resolver" inner="debug.controller_resolver.inner"/>
      <argument type="service" id="debug.controller_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver">
      <tag name="container.decorator" id="argument_resolver" inner="debug.argument_resolver.inner"/>
      <argument type="service" id="debug.argument_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="argument_resolver.not_tagged_controller" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\NotTaggedControllerValueResolver">
      <tag name="controller.argument_value_resolver" priority="-200"/>
      <argument type="service" id=".service_locator.LWAGtDU"/>
    </service>
    <service id="debug.log_processor" class="Symfony\Bridge\Monolog\Processor\DebugProcessor">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.container"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="api_platform.route_loader"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.file"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.psr4"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.container" class="Symfony\Component\Routing\Loader\ContainerLoader">
      <tag name="routing.loader"/>
      <argument type="service" id=".service_locator..6hZeC_"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.annotation" class="Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument>null</argument>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.annotation.directory" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.annotation.file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.psr4" class="Symfony\Component\Routing\Loader\Psr4DirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="routing.resolver"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.yEoeHjj.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/srv/app/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.router" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
      <call method="addExpressionLanguageProvider">
        <argument type="service" id="router.expression_language_provider"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" constructor="fromUri">
      <argument></argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
      <call method="setParameter">
        <argument>_functions</argument>
        <argument type="service" id="router.expression_language_provider" on-invalid="ignore"/>
      </call>
    </service>
    <service id="router.expression_language_provider" class="Symfony\Component\Routing\Matcher\ExpressionLanguageProvider">
      <tag name="routing.expression_language_provider"/>
      <argument type="service" id=".service_locator.Kl0E_Fe"/>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.cUcW89y.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="monolog.logger" channel="request"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
      <argument>/srv/app</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument type="service" id="twig" on-invalid="ignore"/>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor">
      <argument>3</argument>
      <argument>2</argument>
      <argument type="service" id="cache.property_access" on-invalid="ignore"/>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
    </service>
    <service id="secrets.vault" class="Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault">
      <tag name="container.env_var_loader"/>
      <argument>/srv/app/config/secrets/%env(default:kernel.environment:APP_RUNTIME_ENV)%</argument>
      <argument type="service" id="secrets.decryption_key" on-invalid="ignore"/>
    </service>
    <service id="secrets.decryption_key" class="Symfony\Component\String\LazyString" constructor="fromCallable">
      <argument type="service" id="container.getenv"/>
      <argument>base64:default::SYMFONY_DECRYPTION_SECRET</argument>
    </service>
    <service id="secrets.local_vault" class="Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault">
      <argument>/srv/app/.env.dev.local</argument>
    </service>
    <service id="serializer.mapping.class_discriminator_resolver" class="Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata">
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="serializer.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer" autowire="true">
      <tag name="serializer.normalizer" priority="-915"/>
      <argument type="collection"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
    </service>
    <service id="serializer.normalizer.mime_message" class="Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
      <argument type="service" id="serializer.normalizer.property"/>
    </service>
    <service id="serializer.normalizer.datetimezone" class="Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.dateinterval" class="Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.data_uri" class="Symfony\Component\Serializer\Normalizer\DataUriNormalizer">
      <tag name="serializer.normalizer" priority="-920"/>
      <argument type="service" id="mime_types" on-invalid="null"/>
    </service>
    <service id="serializer.normalizer.datetime" class="Symfony\Component\Serializer\Normalizer\DateTimeNormalizer">
      <tag name="serializer.normalizer" priority="-910"/>
    </service>
    <service id="serializer.normalizer.json_serializable" class="Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer">
      <tag name="serializer.normalizer" priority="-950"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="serializer.normalizer.problem" class="Symfony\Component\Serializer\Normalizer\ProblemNormalizer">
      <tag name="serializer.normalizer" priority="-890"/>
      <argument key="0">true</argument>
      <argument key="translator">null</argument>
    </service>
    <service id="serializer.denormalizer.unwrapping" class="Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer">
      <tag name="serializer.normalizer" priority="1000"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="serializer.normalizer.uid" class="Symfony\Component\Serializer\Normalizer\UidNormalizer">
      <tag name="serializer.normalizer" priority="-890"/>
    </service>
    <service id="serializer.normalizer.form_error" class="Symfony\Component\Serializer\Normalizer\FormErrorNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.object" class="Symfony\Component\Serializer\Normalizer\ObjectNormalizer">
      <tag name="serializer.normalizer" priority="-1000"/>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="property_info" on-invalid="ignore"/>
      <argument type="service" id="serializer.mapping.class_discriminator_resolver" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="serializer.normalizer.property" class="Symfony\Component\Serializer\Normalizer\PropertyNormalizer">
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
      <argument type="service" id="property_info" on-invalid="ignore"/>
      <argument type="service" id="serializer.mapping.class_discriminator_resolver" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="serializer.denormalizer.array" class="Symfony\Component\Serializer\Normalizer\ArrayDenormalizer">
      <tag name="serializer.normalizer" priority="-990"/>
    </service>
    <service id="serializer.mapping.chain_loader" class="Symfony\Component\Serializer\Mapping\Loader\LoaderChain">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader">
            <argument>null</argument>
          </service>
        </argument>
      </argument>
    </service>
    <service id="serializer.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader">
            <argument>null</argument>
          </service>
        </argument>
      </argument>
      <argument>/srv/app/var/cache/dev/serialization.php</argument>
    </service>
    <service id="serializer.mapping.cache.symfony" class="Psr\Cache\CacheItemPoolInterface">
      <argument>/srv/app/var/cache/dev/serialization.php</argument>
      <argument type="service" id="cache.serializer"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="serializer.encoder.xml" class="Symfony\Component\Serializer\Encoder\XmlEncoder">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.json" class="Symfony\Component\Serializer\Encoder\JsonEncoder">
      <tag name="serializer.encoder"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="serializer.encoder.yaml" class="Symfony\Component\Serializer\Encoder\YamlEncoder">
      <tag name="serializer.encoder"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="serializer.encoder.csv" class="Symfony\Component\Serializer\Encoder\CsvEncoder">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.name_converter.camel_case_to_snake_case" class="Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter"/>
    <service id="serializer.name_converter.metadata_aware" class="Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter">
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="property_info.serializer_extractor" class="Symfony\Component\PropertyInfo\Extractor\SerializerExtractor">
      <tag name="property_info.list_extractor" priority="-999"/>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="error_handler.error_renderer.serializer" class="Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer">
      <argument type="service" id="debug.serializer"/>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer" method="getPreferredFormat"/>
        </service>
      </argument>
      <argument type="service" id="twig.error_renderer.html"/>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
    </service>
    <service id="serializer.normalizer.backed_enum" class="Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="property_info" class="Symfony\Component\PropertyInfo\PropertyInfoExtractor">
      <argument type="iterator">
        <argument type="service" id="property_info.serializer_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
        <argument type="service" id="property_info.phpstan_extractor"/>
        <argument type="service" id="property_info.php_doc_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.php_doc_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
    </service>
    <service id="property_info.reflection_extractor" class="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor">
      <tag name="property_info.list_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1002"/>
      <tag name="property_info.access_extractor" priority="-1000"/>
      <tag name="property_info.initializable_extractor" priority="-1000"/>
    </service>
    <service id="property_info.phpstan_extractor" class="Symfony\Component\PropertyInfo\Extractor\PhpStanExtractor">
      <tag name="property_info.type_extractor" priority="-1000"/>
    </service>
    <service id="property_info.php_doc_extractor" class="Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor">
      <tag name="property_info.description_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1001"/>
    </service>
    <service id="web_link.http_header_serializer" class="Symfony\Component\WebLink\HttpHeaderSerializer"/>
    <service id="web_link.add_link_header_listener" class="Symfony\Component\WebLink\EventListener\AddLinkHeaderListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="web_link.http_header_serializer"/>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id="cache.property_access" class="Symfony\Component\Cache\Adapter\ArrayAdapter">
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="session.factory" class="Symfony\Component\HttpFoundation\Session\SessionFactory">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="session.storage.factory.native"/>
      <argument type="collection">
        <argument type="service" id="session_listener"/>
        <argument>onSessionUsage</argument>
      </argument>
    </service>
    <service id="session.storage.factory.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory">
      <argument>%session.storage.options%</argument>
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorageFactory">
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorageFactory">
      <argument>/srv/app/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
    </service>
    <service id="session.handler.native" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="SessionHandler"/>
      </argument>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
          <argument>null</argument>
        </service>
      </argument>
    </service>
    <service id="session.abstract_handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler">
      <argument type="abstract">A string or a connection object</argument>
      <argument type="collection"/>
      <factory class="Symfony\Component\HttpFoundation\Session\Storage\Handler\SessionHandlerFactory" method="createHandler"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.cXsfP3P"/>
      <argument>true</argument>
      <argument>%session.storage.options%</argument>
    </service>
    <service id="session.marshaller" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\IdentityMarshaller"/>
    <service id="security.csrf.token_generator" class="Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator"/>
    <service id="security.csrf.token_storage" class="Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.csrf.token_manager" class="Symfony\Component\Security\Csrf\CsrfTokenManager">
      <argument type="service" id="security.csrf.token_generator"/>
      <argument type="service" id="security.csrf.token_storage"/>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="twig.runtime.security_csrf" class="Symfony\Bridge\Twig\Extension\CsrfRuntime">
      <tag name="twig.runtime"/>
      <argument type="service" id="security.csrf.token_manager"/>
    </service>
    <service id="twig.extension.security_csrf" class="Symfony\Bridge\Twig\Extension\CsrfExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="form.resolved_type_factory" class="Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy">
      <argument type="service">
        <service class="Symfony\Component\Form\ResolvedFormTypeFactory"/>
      </argument>
      <argument type="service" id="data_collector.form"/>
    </service>
    <service id="form.registry" class="Symfony\Component\Form\FormRegistry">
      <argument type="collection">
        <argument type="service" id="form.extension"/>
      </argument>
      <argument type="service" id="form.resolved_type_factory"/>
    </service>
    <service id="form.factory" class="Symfony\Component\Form\FormFactory">
      <argument type="service" id="form.registry"/>
    </service>
    <service id="form.extension" class="Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension">
      <argument type="service" id=".service_locator.YdAW.ov"/>
      <argument type="collection">
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="iterator">
          <argument type="service" id="form.type_extension.form.transformation_failure_handling"/>
          <argument type="service" id="form.type_extension.form.http_foundation"/>
          <argument type="service" id="form.type_extension.form.validator"/>
          <argument type="service" id="form.type_extension.csrf"/>
          <argument type="service" id="form.type_extension.form.data_collector"/>
          <argument type="service" id="form.type_extension.form.password_hasher"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\RepeatedType" type="iterator">
          <argument type="service" id="form.type_extension.repeated.validator"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\SubmitType" type="iterator">
          <argument type="service" id="form.type_extension.submit.validator"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\PasswordType" type="iterator">
          <argument type="service" id="form.type_extension.password.password_hasher"/>
        </argument>
      </argument>
      <argument type="iterator">
        <argument type="service" id="form.type_guesser.validator"/>
        <argument type="service" id="form.type_guesser.doctrine"/>
      </argument>
    </service>
    <service id="form.type_guesser.validator" class="Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser">
      <tag name="form.type_guesser"/>
      <argument type="service" id="debug.validator"/>
    </service>
    <service id="form.choice_list_factory.default" class="Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory"/>
    <service id="form.choice_list_factory.property_access" class="Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator">
      <argument type="service" id="form.choice_list_factory.default"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.choice_list_factory.cached" class="Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator">
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="form.choice_list_factory.property_access"/>
    </service>
    <service id="form.type.form" class="Symfony\Component\Form\Extension\Core\Type\FormType">
      <tag name="form.type"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.type.choice" class="Symfony\Component\Form\Extension\Core\Type\ChoiceType">
      <tag name="form.type"/>
      <argument type="service" id="form.choice_list_factory.cached"/>
      <argument>null</argument>
    </service>
    <service id="form.type.file" class="Symfony\Component\Form\Extension\Core\Type\FileType">
      <tag name="form.type"/>
      <argument>null</argument>
    </service>
    <service id="form.type.color" class="Symfony\Component\Form\Extension\Core\Type\ColorType">
      <tag name="form.type"/>
      <argument>null</argument>
    </service>
    <service id="form.type_extension.form.transformation_failure_handling" class="Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension">
      <tag name="form.type_extension" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument>null</argument>
    </service>
    <service id="form.type_extension.form.http_foundation" class="Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension">
      <tag name="form.type_extension"/>
      <argument type="service" id="form.type_extension.form.request_handler"/>
    </service>
    <service id="form.type_extension.form.request_handler" class="Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler">
      <argument type="service" id="form.server_params"/>
    </service>
    <service id="form.server_params" class="Symfony\Component\Form\Util\ServerParams">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="form.type_extension.form.validator" class="Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension">
      <tag name="form.type_extension" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="debug.validator"/>
      <argument>false</argument>
      <argument type="service" id="twig.form.renderer" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="form.type_extension.repeated.validator" class="Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension">
      <tag name="form.type_extension"/>
    </service>
    <service id="form.type_extension.submit.validator" class="Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension">
      <tag name="form.type_extension" extended-type="Symfony\Component\Form\Extension\Core\Type\SubmitType"/>
    </service>
    <service id="form.type_extension.csrf" class="Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension">
      <tag name="form.type_extension"/>
      <argument type="service" id="security.csrf.token_manager"/>
      <argument>true</argument>
      <argument>_token</argument>
      <argument>null</argument>
      <argument>validators</argument>
      <argument type="service" id="form.server_params"/>
    </service>
    <service id="validator.builder" class="Symfony\Component\Validator\ValidatorBuilder">
      <call method="setConstraintValidatorFactory">
        <argument type="service" id="validator.validator_factory"/>
      </call>
      <call method="setTranslationDomain">
        <argument>validators</argument>
      </call>
      <call method="addXmlMappings">
        <argument type="collection">
          <argument>/srv/app/vendor/symfony/form/Resources/config/validation.xml</argument>
        </argument>
      </call>
      <call method="enableAnnotationMapping">
        <argument>true</argument>
      </call>
      <call method="addMethodMapping">
        <argument>loadValidatorMetadata</argument>
      </call>
      <call method="addObjectInitializers">
        <argument type="collection">
          <argument type="service" id="doctrine.orm.validator_initializer"/>
        </argument>
      </call>
      <call method="addLoader">
        <argument type="service" id="validator.property_info_loader"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="doctrine.orm.default_entity_manager.validator_loader"/>
      </call>
      <factory class="Symfony\Component\Validator\Validation" method="createValidatorBuilder"/>
    </service>
    <service id="validator.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="validator.builder"/>
      <argument>/srv/app/var/cache/dev/validation.php</argument>
    </service>
    <service id="validator.mapping.cache.adapter" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" constructor="create">
      <argument>/srv/app/var/cache/dev/validation.php</argument>
      <argument type="service" id="cache.validator"/>
    </service>
    <service id="validator.validator_factory" class="Symfony\Component\Validator\ContainerConstraintValidatorFactory">
      <argument type="service" id=".service_locator.F9PKc.7"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionLanguageSyntaxValidator" class="Symfony\Component\Validator\Constraints\ExpressionLanguageSyntaxValidator" abstract="true">
      <tag name="container.excluded" source="in &quot;config/validator.php&quot;"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\AllValidator" class="Symfony\Component\Validator\Constraints\AllValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\AtLeastOneOfValidator" class="Symfony\Component\Validator\Constraints\AtLeastOneOfValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\BicValidator" class="Symfony\Component\Validator\Constraints\BicValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\BlankValidator" class="Symfony\Component\Validator\Constraints\BlankValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CallbackValidator" class="Symfony\Component\Validator\Constraints\CallbackValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CardSchemeValidator" class="Symfony\Component\Validator\Constraints\CardSchemeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ChoiceValidator" class="Symfony\Component\Validator\Constraints\ChoiceValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CidrValidator" class="Symfony\Component\Validator\Constraints\CidrValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CollectionValidator" class="Symfony\Component\Validator\Constraints\CollectionValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CompoundValidator" class="Symfony\Component\Validator\Constraints\CompoundValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CountValidator" class="Symfony\Component\Validator\Constraints\CountValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CountryValidator" class="Symfony\Component\Validator\Constraints\CountryValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CssColorValidator" class="Symfony\Component\Validator\Constraints\CssColorValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CurrencyValidator" class="Symfony\Component\Validator\Constraints\CurrencyValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DateTimeValidator" class="Symfony\Component\Validator\Constraints\DateTimeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DateValidator" class="Symfony\Component\Validator\Constraints\DateValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DivisibleByValidator" class="Symfony\Component\Validator\Constraints\DivisibleByValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\EmailValidator" class="Symfony\Component\Validator\Constraints\EmailValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\EqualToValidator" class="Symfony\Component\Validator\Constraints\EqualToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionSyntaxValidator" class="Symfony\Component\Validator\Constraints\ExpressionSyntaxValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionValidator" class="Symfony\Component\Validator\Constraints\ExpressionValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\FileValidator" class="Symfony\Component\Validator\Constraints\FileValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\GreaterThanOrEqualValidator" class="Symfony\Component\Validator\Constraints\GreaterThanOrEqualValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\GreaterThanValidator" class="Symfony\Component\Validator\Constraints\GreaterThanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\HostnameValidator" class="Symfony\Component\Validator\Constraints\HostnameValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IbanValidator" class="Symfony\Component\Validator\Constraints\IbanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IdenticalToValidator" class="Symfony\Component\Validator\Constraints\IdenticalToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ImageValidator" class="Symfony\Component\Validator\Constraints\ImageValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IpValidator" class="Symfony\Component\Validator\Constraints\IpValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsFalseValidator" class="Symfony\Component\Validator\Constraints\IsFalseValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsNullValidator" class="Symfony\Component\Validator\Constraints\IsNullValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsTrueValidator" class="Symfony\Component\Validator\Constraints\IsTrueValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsbnValidator" class="Symfony\Component\Validator\Constraints\IsbnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsinValidator" class="Symfony\Component\Validator\Constraints\IsinValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IssnValidator" class="Symfony\Component\Validator\Constraints\IssnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\JsonValidator" class="Symfony\Component\Validator\Constraints\JsonValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LanguageValidator" class="Symfony\Component\Validator\Constraints\LanguageValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LengthValidator" class="Symfony\Component\Validator\Constraints\LengthValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LessThanOrEqualValidator" class="Symfony\Component\Validator\Constraints\LessThanOrEqualValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LessThanValidator" class="Symfony\Component\Validator\Constraints\LessThanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LocaleValidator" class="Symfony\Component\Validator\Constraints\LocaleValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LuhnValidator" class="Symfony\Component\Validator\Constraints\LuhnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" class="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotBlankValidator" class="Symfony\Component\Validator\Constraints\NotBlankValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" class="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotEqualToValidator" class="Symfony\Component\Validator\Constraints\NotEqualToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotIdenticalToValidator" class="Symfony\Component\Validator\Constraints\NotIdenticalToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotNullValidator" class="Symfony\Component\Validator\Constraints\NotNullValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\PasswordStrengthValidator" class="Symfony\Component\Validator\Constraints\PasswordStrengthValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\RangeValidator" class="Symfony\Component\Validator\Constraints\RangeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\RegexValidator" class="Symfony\Component\Validator\Constraints\RegexValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\SequentiallyValidator" class="Symfony\Component\Validator\Constraints\SequentiallyValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TimeValidator" class="Symfony\Component\Validator\Constraints\TimeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TimezoneValidator" class="Symfony\Component\Validator\Constraints\TimezoneValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TypeValidator" class="Symfony\Component\Validator\Constraints\TypeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UlidValidator" class="Symfony\Component\Validator\Constraints\UlidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UniqueValidator" class="Symfony\Component\Validator\Constraints\UniqueValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UrlValidator" class="Symfony\Component\Validator\Constraints\UrlValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UuidValidator" class="Symfony\Component\Validator\Constraints\UuidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ValidValidator" class="Symfony\Component\Validator\Constraints\ValidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\WhenValidator" class="Symfony\Component\Validator\Constraints\WhenValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="validator.expression" class="Symfony\Component\Validator\Constraints\ExpressionValidator">
      <tag name="validator.constraint_validator" alias="validator.expression"/>
      <argument type="service" id="validator.expression_language" on-invalid="null"/>
    </service>
    <service id="validator.expression_language" class="Symfony\Component\ExpressionLanguage\ExpressionLanguage">
      <argument type="service" id="cache.validator_expression_language" on-invalid="null"/>
    </service>
    <service id="cache.validator_expression_language" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.validator_expression_language.recorder_inner"/>
    </service>
    <service id="validator.email" class="Symfony\Component\Validator\Constraints\EmailValidator">
      <tag name="validator.constraint_validator"/>
      <argument>html5</argument>
    </service>
    <service id="validator.not_compromised_password" class="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator">
      <tag name="validator.constraint_validator"/>
      <argument type="service" id=".debug.http_client" on-invalid="null"/>
      <argument>UTF-8</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="validator.when" class="Symfony\Component\Validator\Constraints\WhenValidator">
      <tag name="validator.constraint_validator"/>
      <argument type="service" id="validator.expression_language" on-invalid="null"/>
    </service>
    <service id="validator.no_suspicious_characters" class="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator">
      <tag name="validator.constraint_validator" alias="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator"/>
      <argument type="collection"/>
    </service>
    <service id="validator.property_info_loader" class="Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader">
      <tag name="validator.auto_mapper"/>
      <argument type="service" id="property_info"/>
      <argument type="service" id="property_info"/>
      <argument type="service" id="property_info"/>
      <argument>null</argument>
    </service>
    <service id="profiler" class="Symfony\Component\HttpKernel\Profiler\Profiler" public="true">
      <tag name="monolog.logger" channel="profiler"/>
      <tag name="container.private" package="symfony/framework-bundle" version="5.4"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="profiler.storage"/>
      <argument type="service" id="monolog.logger.profiler" on-invalid="null"/>
      <argument>true</argument>
      <call method="add">
        <argument type="service" id="data_collector.request"/>
      </call>
      <call method="add">
        <argument type="service" id="api_platform.data_collector.request"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.time"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.memory"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.validator"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.ajax"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.form"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.exception"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.logger"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.events"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.router"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.cache"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.security"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.twig"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.http_client"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.doctrine"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.dump"/>
      </call>
      <call method="add">
        <argument type="service" id="mailer.data_collector"/>
      </call>
      <call method="add">
        <argument type="service" id="serializer.data_collector"/>
      </call>
      <call method="add">
        <argument type="service" id="Vich\UploaderBundle\DataCollector\MappingCollector"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.config"/>
      </call>
    </service>
    <service id="profiler.storage" class="Symfony\Component\HttpKernel\Profiler\FileProfilerStorage">
      <argument>file:/srv/app/var/cache/dev/profiler</argument>
    </service>
    <service id="profiler_listener" class="Symfony\Component\HttpKernel\EventListener\ProfilerListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="profiler"/>
      <argument type="service" id="request_stack"/>
      <argument>null</argument>
      <argument>false</argument>
      <argument>false</argument>
      <argument>null</argument>
    </service>
    <service id="data_collector.config" class="Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/config.html.twig" id="config" priority="-255"/>
      <call method="setKernel">
        <argument type="service" id="kernel" on-invalid="ignore"/>
      </call>
    </service>
    <service id="data_collector.request" class="Symfony\Component\HttpKernel\DataCollector\RequestDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/request.html.twig" id="request" priority="335"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="data_collector.request.session_collector" class="Closure">
      <argument type="collection">
        <argument type="service" id="data_collector.request"/>
        <argument>collectSessionUsage</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="data_collector.ajax" class="Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/ajax.html.twig" id="ajax" priority="315"/>
    </service>
    <service id="data_collector.exception" class="Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/exception.html.twig" id="exception" priority="305"/>
    </service>
    <service id="data_collector.events" class="Symfony\Component\HttpKernel\DataCollector\EventDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/events.html.twig" id="events" priority="290"/>
      <argument type="tagged_iterator" tag="event_dispatcher.dispatcher" index-by="name" default-index-method="getDefaultNameName" default-priority-method="getDefaultNamePriority"/>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="data_collector.logger" class="Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector">
      <tag name="monolog.logger" channel="profiler"/>
      <tag name="data_collector" template="@WebProfiler/Collector/logger.html.twig" id="logger" priority="300"/>
      <argument type="service" id="monolog.logger.profiler" on-invalid="ignore"/>
      <argument>/srv/app/var/cache/dev/App_KernelDevDebugContainer</argument>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="data_collector.time" class="Symfony\Component\HttpKernel\DataCollector\TimeDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/time.html.twig" id="time" priority="330"/>
      <argument type="service" id="kernel" on-invalid="ignore"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
    </service>
    <service id="data_collector.memory" class="Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/memory.html.twig" id="memory" priority="325"/>
    </service>
    <service id="data_collector.router" class="Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/router.html.twig" id="router" priority="285"/>
      <tag name="kernel.event_listener" event="kernel.controller" method="onKernelController"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="data_collector.cache" class="Symfony\Component\Cache\DataCollector\CacheDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/cache.html.twig" id="cache" priority="275"/>
      <call method="addInstance">
        <argument>cache.app</argument>
        <argument type="service" id="cache.app"/>
      </call>
      <call method="addInstance">
        <argument>cache.system</argument>
        <argument type="service" id="cache.system"/>
      </call>
      <call method="addInstance">
        <argument>cache.validator</argument>
        <argument type="service" id="cache.validator"/>
      </call>
      <call method="addInstance">
        <argument>cache.serializer</argument>
        <argument type="service" id="cache.serializer"/>
      </call>
      <call method="addInstance">
        <argument>cache.annotations</argument>
        <argument type="service" id="cache.annotations"/>
      </call>
      <call method="addInstance">
        <argument>cache.property_info</argument>
        <argument type="service" id="cache.property_info"/>
      </call>
      <call method="addInstance">
        <argument>cache.validator_expression_language</argument>
        <argument type="service" id="cache.validator_expression_language"/>
      </call>
      <call method="addInstance">
        <argument>cache.doctrine.orm.default.result</argument>
        <argument type="service" id="cache.doctrine.orm.default.result"/>
      </call>
      <call method="addInstance">
        <argument>cache.doctrine.orm.default.query</argument>
        <argument type="service" id="cache.doctrine.orm.default.query"/>
      </call>
      <call method="addInstance">
        <argument>cache.security_expression_language</argument>
        <argument type="service" id="cache.security_expression_language"/>
      </call>
      <call method="addInstance">
        <argument>cache.security_is_granted_attribute_expression_language</argument>
        <argument type="service" id="cache.security_is_granted_attribute_expression_language"/>
      </call>
      <call method="addInstance">
        <argument>api_platform.cache.route_name_resolver</argument>
        <argument type="service" id="api_platform.cache.route_name_resolver"/>
      </call>
      <call method="addInstance">
        <argument>api_platform.cache.metadata.resource</argument>
        <argument type="service" id="api_platform.cache.metadata.resource"/>
      </call>
      <call method="addInstance">
        <argument>api_platform.cache.metadata.property</argument>
        <argument type="service" id="api_platform.cache.metadata.property"/>
      </call>
      <call method="addInstance">
        <argument>api_platform.cache.metadata.resource_collection</argument>
        <argument type="service" id="api_platform.cache.metadata.resource_collection"/>
      </call>
      <call method="addInstance">
        <argument>api_platform.graphql.cache.subscription</argument>
        <argument type="service" id="api_platform.graphql.cache.subscription"/>
      </call>
    </service>
    <service id="cache_pool_clearer.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\CachePoolClearerCacheWarmer">
      <tag name="kernel.cache_warmer" priority="64"/>
      <argument type="service" id="cache.system_clearer"/>
      <argument type="collection">
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
      </argument>
    </service>
    <service id="form.type_extension.form.data_collector" class="Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension">
      <tag name="form.type_extension"/>
      <argument type="service" id="data_collector.form"/>
    </service>
    <service id="data_collector.form.extractor" class="Symfony\Component\Form\Extension\DataCollector\FormDataExtractor"/>
    <service id="data_collector.form" class="Symfony\Component\Form\Extension\DataCollector\FormDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/form.html.twig" id="form" priority="310"/>
      <argument type="service" id="data_collector.form.extractor"/>
    </service>
    <service id="debug.validator" class="Symfony\Component\Validator\Validator\TraceableValidator">
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="validator" inner="debug.validator.inner"/>
      <argument type="service" id="debug.validator.inner"/>
    </service>
    <service id="data_collector.validator" class="Symfony\Component\Validator\DataCollector\ValidatorDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/validator.html.twig" id="validator" priority="320"/>
      <argument type="service" id="debug.validator"/>
    </service>
    <service id="mailer.data_collector" class="Symfony\Component\Mailer\DataCollector\MessageDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/mailer.html.twig" id="mailer"/>
      <argument type="service" id="mailer.message_logger_listener"/>
    </service>
    <service id="data_collector.http_client" class="Symfony\Component\HttpClient\DataCollector\HttpClientDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/http_client.html.twig" id="http_client" priority="250"/>
      <call method="registerClient">
        <argument>http_client</argument>
        <argument type="service" id=".debug.http_client"/>
      </call>
    </service>
    <service id="debug.serializer" class="Symfony\Component\Serializer\Debug\TraceableSerializer">
      <tag name="container.decorator" id="serializer" inner="debug.serializer.inner"/>
      <argument type="service" id="debug.serializer.inner"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id="serializer.data_collector" class="Symfony\Component\Serializer\DataCollector\SerializerDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/serializer.html.twig" id="serializer"/>
    </service>
    <service id="mime_types" class="Symfony\Component\Mime\MimeTypes">
      <call method="setDefault">
        <argument type="service" id="mime_types"/>
      </call>
    </service>
    <service id="data_collector.doctrine" class="Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector">
      <tag name="data_collector" template="@Doctrine/Collector/db.html.twig" id="db" priority="250"/>
      <argument type="service" id="doctrine"/>
      <argument>true</argument>
      <argument type="service" id="doctrine.debug_data_holder" on-invalid="null"/>
    </service>
    <service id="doctrine.dbal.connection_factory" class="Doctrine\Bundle\DoctrineBundle\ConnectionFactory">
      <argument type="collection"/>
      <argument type="service" id="doctrine.dbal.connection_factory.dsn_parser"/>
    </service>
    <service id="doctrine.dbal.connection_factory.dsn_parser" class="Doctrine\DBAL\Tools\DsnParser">
      <argument type="collection">
        <argument key="db2">ibm_db2</argument>
        <argument key="mssql">pdo_sqlsrv</argument>
        <argument key="mysql">pdo_mysql</argument>
        <argument key="mysql2">pdo_mysql</argument>
        <argument key="postgres">pdo_pgsql</argument>
        <argument key="postgresql">pdo_pgsql</argument>
        <argument key="pgsql">pdo_pgsql</argument>
        <argument key="sqlite">pdo_sqlite</argument>
        <argument key="sqlite3">pdo_sqlite</argument>
      </argument>
    </service>
    <service id="doctrine.dbal.connection" class="Doctrine\DBAL\Connection" abstract="true">
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="doctrine.dbal.connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager" abstract="true">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.dbal.connection.configuration" class="Doctrine\DBAL\Configuration" abstract="true"/>
    <service id="doctrine" class="Doctrine\Bundle\DoctrineBundle\Registry" public="true">
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="service_container"/>
      <argument>%doctrine.connections%</argument>
      <argument>%doctrine.entity_managers%</argument>
      <argument>default</argument>
      <argument>default</argument>
    </service>
    <service id="doctrine.twig.doctrine_extension" class="Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="doctrine.dbal.schema_asset_filter_manager" class="Doctrine\Bundle\DoctrineBundle\Dbal\SchemaAssetsFilterManager" abstract="true"/>
    <service id="doctrine.dbal.well_known_schema_asset_filter" class="Doctrine\Bundle\DoctrineBundle\Dbal\BlacklistSchemaAssetFilter">
      <argument type="collection"/>
    </service>
    <service id="doctrine.database_create_command" class="Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:create"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:create</argument>
      </call>
    </service>
    <service id="doctrine.database_drop_command" class="Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:drop"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:drop</argument>
      </call>
    </service>
    <service id="doctrine.query_sql_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand">
      <tag name="console.command" command="doctrine:query:sql"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider" on-invalid="null"/>
      <call method="setName">
        <argument>doctrine:query:sql</argument>
      </call>
    </service>
    <service id="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand" class="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand">
      <tag name="console.command" command="dbal:run-sql"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider" on-invalid="null"/>
      <call method="setName">
        <argument>dbal:run-sql</argument>
      </call>
    </service>
    <service id="Doctrine\Bundle\DoctrineBundle\Controller\ProfilerController" class="Doctrine\Bundle\DoctrineBundle\Controller\ProfilerController" public="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="twig"/>
      <argument type="service" id="doctrine"/>
      <argument type="service" id="profiler"/>
    </service>
    <service id="doctrine.dbal.default_schema_manager_factory" class="Doctrine\DBAL\Schema\DefaultSchemaManagerFactory"/>
    <service id="doctrine.dbal.legacy_schema_manager_factory" class="Doctrine\DBAL\Schema\LegacySchemaManagerFactory"/>
    <service id="doctrine.dbal.default_connection.configuration" class="Doctrine\DBAL\Configuration">
      <call method="setSchemaManagerFactory">
        <argument type="service" id="doctrine.dbal.legacy_schema_manager_factory"/>
      </call>
      <call method="setMiddlewares">
        <argument type="collection">
          <argument type="service">
            <service class="Doctrine\DBAL\Logging\Middleware">
              <argument type="service" id="monolog.logger.doctrine"/>
            </service>
          </argument>
          <argument type="service">
            <service class="Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware">
              <argument type="service" id="doctrine.debug_data_holder"/>
              <argument type="service" id="debug.stopwatch" on-invalid="null"/>
              <call method="setConnectionName">
                <argument>default</argument>
              </call>
            </service>
          </argument>
        </argument>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager">
      <argument type="service" id=".service_locator.Iv5zWDQ"/>
      <argument type="collection">
        <argument type="collection">
          <argument type="collection">
            <argument>preUpdate</argument>
          </argument>
          <argument>vich_uploader.listener.clean.media_uploads</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.doctrine_token_provider_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.pdo_session_handler_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.lock_store_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>loadClassMetadata</argument>
          </argument>
          <argument>doctrine.orm.default_listeners.attach_entity_listeners</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>preRemove</argument>
          </argument>
          <argument>vich_uploader.listener.remove.media_uploads</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postFlush</argument>
          </argument>
          <argument>vich_uploader.listener.remove.media_uploads</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>prePersist</argument>
          </argument>
          <argument>vich_uploader.listener.upload.media_uploads</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>preUpdate</argument>
          </argument>
          <argument>vich_uploader.listener.upload.media_uploads</argument>
        </argument>
      </argument>
    </service>
    <service id="doctrine.dbal.default_connection" class="Doctrine\DBAL\Connection" public="true">
      <argument type="collection">
        <argument key="url">%env(resolve:DATABASE_URL)%</argument>
        <argument key="driver">pdo_mysql</argument>
        <argument key="host">localhost</argument>
        <argument key="port">null</argument>
        <argument key="user">root</argument>
        <argument key="password">null</argument>
        <argument key="driverOptions" type="collection"/>
        <argument key="serverVersion">%env(resolve:DATABASE_VERSION)%</argument>
        <argument key="defaultTableOptions" type="collection"/>
      </argument>
      <argument type="service" id="doctrine.dbal.default_connection.configuration"/>
      <argument type="service" id="doctrine.dbal.default_connection.event_manager"/>
      <argument type="collection"/>
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider" class="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider">
      <argument type="service">
        <service class="Doctrine\Bundle\DoctrineBundle\Registry" public="true">
          <tag name="kernel.reset" method="reset"/>
          <argument type="service" id="service_container"/>
          <argument>%doctrine.connections%</argument>
          <argument>%doctrine.entity_managers%</argument>
          <argument>default</argument>
          <argument>default</argument>
        </service>
      </argument>
    </service>
    <service id="doctrine.dbal.logging_middleware" class="Doctrine\DBAL\Logging\Middleware" abstract="true">
      <tag name="monolog.logger" channel="doctrine"/>
      <tag name="doctrine.middleware" connection="default"/>
      <argument type="service" id="monolog.logger.doctrine"/>
    </service>
    <service id="doctrine.debug_data_holder" class="Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder">
      <tag name="kernel.reset" method="reset"/>
      <argument type="collection">
        <argument>default</argument>
      </argument>
    </service>
    <service id="doctrine.dbal.debug_middleware" class="Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware" abstract="true">
      <tag name="doctrine.middleware" connection="default"/>
      <argument type="service" id="doctrine.debug_data_holder"/>
      <argument type="service" id="debug.stopwatch" on-invalid="null"/>
    </service>
    <service id=".1_ServiceLocator~jhZ5H6E" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.proxy_cache_warmer" class="Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type_guesser.doctrine" class="Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser">
      <tag name="form.type_guesser"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type.entity" class="Symfony\Bridge\Doctrine\Form\Type\EntityType">
      <tag name="form.type" alias="entity"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.configuration" class="Doctrine\ORM\Configuration" abstract="true"/>
    <service id="doctrine.orm.entity_manager.abstract" class="Doctrine\ORM\EntityManager" lazy="true" abstract="true"/>
    <service id="doctrine.orm.container_repository_factory" class="Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory">
      <argument type="service" id=".service_locator.LeyfvDN"/>
    </service>
    <service id="doctrine.orm.manager_configurator.abstract" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator" abstract="true">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.validator.unique" class="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator">
      <tag name="validator.constraint_validator" alias="doctrine.orm.validator.unique"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.validator_initializer" class="Symfony\Bridge\Doctrine\Validator\DoctrineInitializer">
      <tag name="validator.initializer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.security.user.provider" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider" abstract="true">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.listeners.resolve_target_entity" class="Doctrine\ORM\Tools\ResolveTargetEntityListener"/>
    <service id="doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\DoctrineDbalCacheAdapterSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.listeners.doctrine_token_provider_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\RememberMeTokenProviderDoctrineSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="tagged_iterator" tag="security.remember_me_handler"/>
    </service>
    <service id="doctrine.orm.listeners.pdo_session_handler_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\PdoSessionHandlerSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="service" id="session.handler.native"/>
    </service>
    <service id="doctrine.orm.listeners.lock_store_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\LockStoreSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="tagged_iterator" tag="lock.store"/>
    </service>
    <service id="doctrine.orm.naming_strategy.default" class="Doctrine\ORM\Mapping\DefaultNamingStrategy"/>
    <service id="doctrine.orm.naming_strategy.underscore" class="Doctrine\ORM\Mapping\UnderscoreNamingStrategy"/>
    <service id="doctrine.orm.naming_strategy.underscore_number_aware" class="Doctrine\ORM\Mapping\UnderscoreNamingStrategy">
      <argument>0</argument>
      <argument>true</argument>
    </service>
    <service id="doctrine.orm.quote_strategy.default" class="Doctrine\ORM\Mapping\DefaultQuoteStrategy"/>
    <service id="doctrine.orm.quote_strategy.ansi" class="Doctrine\ORM\Mapping\AnsiQuoteStrategy"/>
    <service id="doctrine.ulid_generator" class="Symfony\Bridge\Doctrine\IdGenerator\UlidGenerator">
      <tag name="doctrine.id_generator"/>
      <argument>null</argument>
    </service>
    <service id="doctrine.uuid_generator" class="Symfony\Bridge\Doctrine\IdGenerator\UuidGenerator">
      <tag name="doctrine.id_generator"/>
      <argument>null</argument>
    </service>
    <service id="doctrine.orm.command.entity_manager_provider" class="Doctrine\Bundle\DoctrineBundle\Orm\ManagerRegistryAwareEntityManagerProvider">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.entity_value_resolver" class="Symfony\Bridge\Doctrine\ArgumentResolver\EntityValueResolver">
      <tag name="Symfony\Bridge\Doctrine\ArgumentResolver\EntityValueResolver" priority="110">controller.argument_value_resolver</tag>
      <argument type="service" id="doctrine"/>
      <argument type="service" id="doctrine.orm.entity_value_resolver.expression_language" on-invalid="ignore"/>
    </service>
    <service id="doctrine.orm.entity_value_resolver.expression_language" class="Symfony\Component\ExpressionLanguage\ExpressionLanguage"/>
    <service id="doctrine.cache_clear_metadata_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\MetadataCommand">
      <tag name="console.command" command="doctrine:cache:clear-metadata"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-metadata</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_query_cache_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\QueryCommand">
      <tag name="console.command" command="doctrine:cache:clear-query"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_result_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\ResultCommand">
      <tag name="console.command" command="doctrine:cache:clear-result"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-result</argument>
      </call>
    </service>
    <service id="doctrine.cache_collection_region_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\CollectionRegionCommand">
      <tag name="console.command" command="doctrine:cache:clear-collection-region"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-collection-region</argument>
      </call>
    </service>
    <service id="doctrine.mapping_convert_command" class="Doctrine\ORM\Tools\Console\Command\ConvertMappingCommand">
      <tag name="console.command" command="doctrine:mapping:convert"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:mapping:convert</argument>
      </call>
    </service>
    <service id="doctrine.schema_create_command" class="Doctrine\ORM\Tools\Console\Command\SchemaTool\CreateCommand">
      <tag name="console.command" command="doctrine:schema:create"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:create</argument>
      </call>
    </service>
    <service id="doctrine.schema_drop_command" class="Doctrine\ORM\Tools\Console\Command\SchemaTool\DropCommand">
      <tag name="console.command" command="doctrine:schema:drop"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:drop</argument>
      </call>
    </service>
    <service id="doctrine.ensure_production_settings_command" class="Doctrine\ORM\Tools\Console\Command\EnsureProductionSettingsCommand">
      <tag name="console.command" command="doctrine:ensure-production-settings"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:ensure-production-settings</argument>
      </call>
    </service>
    <service id="doctrine.clear_entity_region_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\EntityRegionCommand">
      <tag name="console.command" command="doctrine:cache:clear-entity-region"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-entity-region</argument>
      </call>
    </service>
    <service id="doctrine.mapping_info_command" class="Doctrine\ORM\Tools\Console\Command\InfoCommand">
      <tag name="console.command" command="doctrine:mapping:info"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:mapping:info</argument>
      </call>
    </service>
    <service id="doctrine.clear_query_region_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\QueryRegionCommand">
      <tag name="console.command" command="doctrine:cache:clear-query-region"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query-region</argument>
      </call>
    </service>
    <service id="doctrine.query_dql_command" class="Doctrine\ORM\Tools\Console\Command\RunDqlCommand">
      <tag name="console.command" command="doctrine:query:dql"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:query:dql</argument>
      </call>
    </service>
    <service id="doctrine.schema_update_command" class="Doctrine\ORM\Tools\Console\Command\SchemaTool\UpdateCommand">
      <tag name="console.command" command="doctrine:schema:update"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:update</argument>
      </call>
    </service>
    <service id="doctrine.schema_validate_command" class="Doctrine\ORM\Tools\Console\Command\ValidateSchemaCommand">
      <tag name="console.command" command="doctrine:schema:validate"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:validate</argument>
      </call>
    </service>
    <service id="doctrine.mapping_import_command" class="Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:import"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine"/>
      <argument>%kernel.bundles%</argument>
      <call method="setName">
        <argument>doctrine:mapping:import</argument>
      </call>
    </service>
    <service id="doctrine.orm.default_configuration" class="Doctrine\ORM\Configuration">
      <tag name="doctrine.orm.configuration"/>
      <call method="setEntityNamespaces">
        <argument type="collection">
          <argument key="App">App\Entity</argument>
          <argument key="VichUploaderBundle">Vich\UploaderBundle\Entity</argument>
        </argument>
      </call>
      <call method="setMetadataCache">
        <argument type="service" id="cache.doctrine.orm.default.metadata"/>
      </call>
      <call method="setQueryCache">
        <argument type="service" id="cache.doctrine.orm.default.query"/>
      </call>
      <call method="setResultCache">
        <argument type="service" id="cache.doctrine.orm.default.result"/>
      </call>
      <call method="setMetadataDriverImpl">
        <argument type="service" id=".doctrine.orm.default_metadata_driver"/>
      </call>
      <call method="setProxyDir">
        <argument>/srv/app/var/cache/dev/doctrine/orm/Proxies</argument>
      </call>
      <call method="setProxyNamespace">
        <argument>Proxies</argument>
      </call>
      <call method="setAutoGenerateProxyClasses">
        <argument>true</argument>
      </call>
      <call method="setSchemaIgnoreClasses">
        <argument type="collection"/>
      </call>
      <call method="setClassMetadataFactoryName">
        <argument>Doctrine\Bundle\DoctrineBundle\Mapping\ClassMetadataFactory</argument>
      </call>
      <call method="setDefaultRepositoryClassName">
        <argument>Doctrine\ORM\EntityRepository</argument>
      </call>
      <call method="setNamingStrategy">
        <argument type="service" id="doctrine.orm.naming_strategy.underscore_number_aware"/>
      </call>
      <call method="setQuoteStrategy">
        <argument type="service" id="doctrine.orm.quote_strategy.default"/>
      </call>
      <call method="setEntityListenerResolver">
        <argument type="service" id="doctrine.orm.default_entity_listener_resolver"/>
      </call>
      <call method="setLazyGhostObjectEnabled">
        <argument>true</argument>
      </call>
      <call method="setRepositoryFactory">
        <argument type="service" id="doctrine.orm.container_repository_factory"/>
      </call>
    </service>
    <service id="doctrine.orm.default_attribute_metadata_driver" class="Doctrine\ORM\Mapping\Driver\AttributeDriver">
      <argument type="collection">
        <argument>/srv/app/src/Entity</argument>
      </argument>
      <argument>true</argument>
    </service>
    <service id="doctrine.orm.default_xml_metadata_driver" class="Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver">
      <argument type="collection">
        <argument key="/srv/app/vendor/vich/uploader-bundle/config/doctrine">Vich\UploaderBundle\Entity</argument>
      </argument>
      <argument>.orm.xml</argument>
      <argument>true</argument>
      <call method="setGlobalBasename">
        <argument>mapping</argument>
      </call>
    </service>
    <service id="cache.doctrine.orm.default.metadata" class="Symfony\Component\Cache\Adapter\ArrayAdapter"/>
    <service id="cache.doctrine.orm.default.result" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.doctrine.orm.default.result.recorder_inner"/>
    </service>
    <service id="cache.doctrine.orm.default.query" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.doctrine.orm.default.query.recorder_inner"/>
    </service>
    <service id="doctrine.orm.default_entity_listener_resolver" class="Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.orm.default_listeners.attach_entity_listeners" class="Doctrine\ORM\Tools\AttachEntityListenersListener">
      <tag name="doctrine.event_listener" event="loadClassMetadata"/>
    </service>
    <service id="doctrine.orm.default_manager_configurator" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.default_entity_manager" class="Doctrine\ORM\EntityManager" public="true" lazy="true">
      <tag name="container.preload" class="Doctrine\ORM\Proxy\Autoloader"/>
      <argument type="service" id="doctrine.dbal.default_connection"/>
      <argument type="service" id="doctrine.orm.default_configuration"/>
      <argument type="service" id="doctrine.dbal.default_connection.event_manager"/>
      <configurator service="doctrine.orm.default_manager_configurator" method="configure"/>
    </service>
    <service id="doctrine.orm.default_entity_manager.property_info_extractor" class="Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor">
      <tag name="property_info.list_extractor" priority="-1001"/>
      <tag name="property_info.type_extractor" priority="-999"/>
      <tag name="property_info.access_extractor" priority="-999"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="doctrine.orm.default_entity_manager.validator_loader" class="Symfony\Bridge\Doctrine\Validator\DoctrineLoader">
      <tag name="validator.auto_mapper" priority="-100"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument>null</argument>
    </service>
    <service id="doctrine.migrations.dependency_factory" class="Doctrine\Migrations\DependencyFactory" constructor="fromEntityManager">
      <argument type="service" id="doctrine.migrations.configuration_loader"/>
      <argument type="service" id="doctrine.migrations.entity_manager_registry_loader"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <call method="setDefinition">
        <argument>Doctrine\Migrations\Version\MigrationFactory</argument>
        <argument type="service_closure" id="doctrine.migrations.container_aware_migrations_factory"/>
      </call>
    </service>
    <service id="doctrine.migrations.configuration_loader" class="Doctrine\Migrations\Configuration\Migration\ExistingConfiguration">
      <argument type="service" id="doctrine.migrations.configuration"/>
    </service>
    <service id="doctrine.migrations.connection_loader" class="Doctrine\Migrations\Configuration\Connection\ExistingConnection"/>
    <service id="doctrine.migrations.em_loader" class="Doctrine\Migrations\Configuration\EntityManager\ExistingEntityManager"/>
    <service id="doctrine.migrations.entity_manager_registry_loader" class="Doctrine\Migrations\Configuration\EntityManager\ManagerRegistryEntityManager" constructor="withSimpleDefault">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.migrations.connection_registry_loader" class="Doctrine\Migrations\Configuration\Connection\ConnectionRegistryConnection" constructor="withSimpleDefault">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.migrations.configuration" class="Doctrine\Migrations\Configuration\Configuration">
      <call method="addMigrationsDirectory">
        <argument>DoctrineMigrations</argument>
        <argument>/srv/app/migrations</argument>
      </call>
      <call method="setAllOrNothing">
        <argument>false</argument>
      </call>
      <call method="setCheckDatabasePlatform">
        <argument>true</argument>
      </call>
      <call method="setTransactional">
        <argument>true</argument>
      </call>
      <call method="setMetadataStorageConfiguration">
        <argument type="service" id="doctrine.migrations.storage.table_storage"/>
      </call>
    </service>
    <service id="doctrine.migrations.container_aware_migrations_factory" class="Doctrine\Bundle\MigrationsBundle\MigrationsFactory\ContainerAwareMigrationFactory">
      <tag name="container.decorator" id="doctrine.migrations.migrations_factory" inner="doctrine.migrations.container_aware_migrations_factory.inner"/>
      <argument type="service" id="doctrine.migrations.container_aware_migrations_factory.inner"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine_migrations.diff_command" class="Doctrine\Migrations\Tools\Console\Command\DiffCommand">
      <tag name="console.command" command="doctrine:migrations:diff"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:diff</argument>
      <call method="setName">
        <argument>doctrine:migrations:diff</argument>
      </call>
      <call method="setDescription">
        <argument>Generate a migration by comparing your current database to your mapping information.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.sync_metadata_command" class="Doctrine\Migrations\Tools\Console\Command\SyncMetadataCommand">
      <tag name="console.command" command="doctrine:migrations:sync-metadata-storage"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:sync-metadata-storage</argument>
      <call method="setName">
        <argument>doctrine:migrations:sync-metadata-storage</argument>
      </call>
      <call method="setDescription">
        <argument>Ensures that the metadata storage is at the latest version.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.versions_command" class="Doctrine\Migrations\Tools\Console\Command\ListCommand">
      <tag name="console.command" command="doctrine:migrations:list"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:versions</argument>
      <call method="setName">
        <argument>doctrine:migrations:list</argument>
      </call>
      <call method="setDescription">
        <argument>Display a list of all available migrations and their status.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.current_command" class="Doctrine\Migrations\Tools\Console\Command\CurrentCommand">
      <tag name="console.command" command="doctrine:migrations:current"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:current</argument>
      <call method="setName">
        <argument>doctrine:migrations:current</argument>
      </call>
      <call method="setDescription">
        <argument>Outputs the current version</argument>
      </call>
    </service>
    <service id="doctrine_migrations.dump_schema_command" class="Doctrine\Migrations\Tools\Console\Command\DumpSchemaCommand">
      <tag name="console.command" command="doctrine:migrations:dump-schema"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:dump-schema</argument>
      <call method="setName">
        <argument>doctrine:migrations:dump-schema</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the schema for your database to a migration.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.execute_command" class="Doctrine\Migrations\Tools\Console\Command\ExecuteCommand">
      <tag name="console.command" command="doctrine:migrations:execute"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:execute</argument>
      <call method="setName">
        <argument>doctrine:migrations:execute</argument>
      </call>
      <call method="setDescription">
        <argument>Execute one or more migration versions up or down manually.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.generate_command" class="Doctrine\Migrations\Tools\Console\Command\GenerateCommand">
      <tag name="console.command" command="doctrine:migrations:generate"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:generate</argument>
      <call method="setName">
        <argument>doctrine:migrations:generate</argument>
      </call>
      <call method="setDescription">
        <argument>Generate a blank migration class.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.latest_command" class="Doctrine\Migrations\Tools\Console\Command\LatestCommand">
      <tag name="console.command" command="doctrine:migrations:latest"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:latest</argument>
      <call method="setName">
        <argument>doctrine:migrations:latest</argument>
      </call>
      <call method="setDescription">
        <argument>Outputs the latest version</argument>
      </call>
    </service>
    <service id="doctrine_migrations.migrate_command" class="Doctrine\Migrations\Tools\Console\Command\MigrateCommand">
      <tag name="console.command" command="doctrine:migrations:migrate"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:migrate</argument>
      <call method="setName">
        <argument>doctrine:migrations:migrate</argument>
      </call>
      <call method="setDescription">
        <argument>Execute a migration to a specified version or the latest available version.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.rollup_command" class="Doctrine\Migrations\Tools\Console\Command\RollupCommand">
      <tag name="console.command" command="doctrine:migrations:rollup"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:rollup</argument>
      <call method="setName">
        <argument>doctrine:migrations:rollup</argument>
      </call>
      <call method="setDescription">
        <argument>Rollup migrations by deleting all tracked versions and insert the one version that exists.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.status_command" class="Doctrine\Migrations\Tools\Console\Command\StatusCommand">
      <tag name="console.command" command="doctrine:migrations:status"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:status</argument>
      <call method="setName">
        <argument>doctrine:migrations:status</argument>
      </call>
      <call method="setDescription">
        <argument>View the status of a set of migrations.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.up_to_date_command" class="Doctrine\Migrations\Tools\Console\Command\UpToDateCommand">
      <tag name="console.command" command="doctrine:migrations:up-to-date"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:up-to-date</argument>
      <call method="setName">
        <argument>doctrine:migrations:up-to-date</argument>
      </call>
      <call method="setDescription">
        <argument>Tells you if your schema is up-to-date.</argument>
      </call>
    </service>
    <service id="doctrine_migrations.version_command" class="Doctrine\Migrations\Tools\Console\Command\VersionCommand">
      <tag name="console.command" command="doctrine:migrations:version"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:version</argument>
      <call method="setName">
        <argument>doctrine:migrations:version</argument>
      </call>
      <call method="setDescription">
        <argument>Manually add and delete migration versions from the version table.</argument>
      </call>
    </service>
    <service id="doctrine.migrations.storage.table_storage" class="Doctrine\Migrations\Metadata\Storage\TableMetadataStorageConfiguration"/>
    <service id="twig" class="Twig\Environment">
      <tag name="container.preload" class="Twig\Cache\FilesystemCache"/>
      <tag name="container.preload" class="Twig\Extension\CoreExtension"/>
      <tag name="container.preload" class="Twig\Extension\EscaperExtension"/>
      <tag name="container.preload" class="Twig\Extension\OptimizerExtension"/>
      <tag name="container.preload" class="Twig\Extension\StagingExtension"/>
      <tag name="container.preload" class="Twig\ExtensionSet"/>
      <tag name="container.preload" class="Twig\Template"/>
      <tag name="container.preload" class="Twig\TemplateWrapper"/>
      <argument type="service" id="twig.loader.native_filesystem"/>
      <argument type="collection">
        <argument key="autoescape">name</argument>
        <argument key="cache">/srv/app/var/cache/dev/twig</argument>
        <argument key="charset">UTF-8</argument>
        <argument key="debug">true</argument>
        <argument key="strict_variables">true</argument>
      </argument>
      <call method="addExtension">
        <argument type="service" id="twig.extension.security_csrf"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.profiler"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.trans"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.assets"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.code"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.routing"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.yaml"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.debug.stopwatch"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.expression"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpkernel"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpfoundation"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.weblink"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.serializer"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.form"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.logout_url"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.security"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.dump"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="doctrine.twig.doctrine_extension"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.webprofiler"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="Vich\UploaderBundle\Twig\Extension\UploaderExtension"/>
      </call>
      <call method="addGlobal">
        <argument>app</argument>
        <argument type="service" id="twig.app_variable"/>
      </call>
      <call method="addRuntimeLoader">
        <argument type="service" id="twig.runtime_loader"/>
      </call>
      <call method="registerUndefinedFilterCallback">
        <argument type="collection">
          <argument type="service" id="twig.missing_extension_suggestor"/>
          <argument>suggestFilter</argument>
        </argument>
      </call>
      <call method="registerUndefinedFunctionCallback">
        <argument type="collection">
          <argument type="service" id="twig.missing_extension_suggestor"/>
          <argument>suggestFunction</argument>
        </argument>
      </call>
      <call method="registerUndefinedTokenParserCallback">
        <argument type="collection">
          <argument type="service" id="twig.missing_extension_suggestor"/>
          <argument>suggestTag</argument>
        </argument>
      </call>
      <configurator service="twig.configurator.environment" method="configure"/>
    </service>
    <service id="twig.app_variable" class="Symfony\Bridge\Twig\AppVariable">
      <call method="setEnvironment">
        <argument>dev</argument>
      </call>
      <call method="setDebug">
        <argument>true</argument>
      </call>
      <call method="setTokenStorage">
        <argument type="service" id="security.token_storage" on-invalid="ignore"/>
      </call>
      <call method="setRequestStack">
        <argument type="service" id="request_stack" on-invalid="ignore"/>
      </call>
    </service>
    <service id="twig.template_iterator" class="Symfony\Bundle\TwigBundle\TemplateIterator">
      <argument type="service" id="kernel"/>
      <argument type="collection">
        <argument key="/srv/app/vendor/symfony/twig-bridge/Resources/views/Email">email</argument>
        <argument key="/srv/app/vendor/symfony/twig-bridge/Resources/views/Form">null</argument>
      </argument>
      <argument>/srv/app/templates</argument>
      <argument type="collection"/>
    </service>
    <service id="twig.template_cache_warmer" class="Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <tag name="container.service_subscriber" id="twig"/>
      <argument type="service" id=".service_locator.etVElvN.twig.template_cache_warmer"/>
      <argument type="service" id="twig.template_iterator"/>
    </service>
    <service id="twig.loader.native_filesystem" class="Twig\Loader\FilesystemLoader">
      <tag name="twig.loader"/>
      <argument type="collection"/>
      <argument>/srv/app</argument>
      <call method="addPath">
        <argument>/srv/app/vendor/doctrine/doctrine-bundle/Resources/views</argument>
        <argument>Doctrine</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/doctrine/doctrine-bundle/Resources/views</argument>
        <argument>!Doctrine</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/doctrine/doctrine-migrations-bundle/Resources/views</argument>
        <argument>DoctrineMigrations</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/doctrine/doctrine-migrations-bundle/Resources/views</argument>
        <argument>!DoctrineMigrations</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/security-bundle/Resources/views</argument>
        <argument>Security</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/security-bundle/Resources/views</argument>
        <argument>!Security</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/api-platform/core/src/Symfony/Bundle/Resources/views</argument>
        <argument>ApiPlatform</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/api-platform/core/src/Symfony/Bundle/Resources/views</argument>
        <argument>!ApiPlatform</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/web-profiler-bundle/Resources/views</argument>
        <argument>WebProfiler</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/web-profiler-bundle/Resources/views</argument>
        <argument>!WebProfiler</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/debug-bundle/Resources/views</argument>
        <argument>Debug</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/debug-bundle/Resources/views</argument>
        <argument>!Debug</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/vich/uploader-bundle/templates</argument>
        <argument>VichUploader</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/vich/uploader-bundle/templates</argument>
        <argument>!VichUploader</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/templates</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/twig-bridge/Resources/views/Email</argument>
        <argument>email</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/twig-bridge/Resources/views/Email</argument>
        <argument>!email</argument>
      </call>
      <call method="addPath">
        <argument>/srv/app/vendor/symfony/twig-bridge/Resources/views/Form</argument>
      </call>
    </service>
    <service id="twig.loader.chain" class="Twig\Loader\ChainLoader"/>
    <service id="twig.extension.profiler" class="Symfony\Bridge\Twig\Extension\ProfilerExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="twig.profile"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
    </service>
    <service id="twig.profile" class="Twig\Profiler\Profile"/>
    <service id="data_collector.twig" class="Symfony\Bridge\Twig\DataCollector\TwigDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/twig.html.twig" id="twig" priority="257"/>
      <argument type="service" id="twig.profile"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.extension.trans" class="Symfony\Bridge\Twig\Extension\TranslationExtension">
      <tag name="twig.extension"/>
      <argument>null</argument>
    </service>
    <service id="twig.extension.assets" class="Symfony\Bridge\Twig\Extension\AssetExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="assets.packages"/>
    </service>
    <service id="twig.extension.code" class="Symfony\Bridge\Twig\Extension\CodeExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
      <argument>/srv/app</argument>
      <argument>UTF-8</argument>
    </service>
    <service id="twig.extension.routing" class="Symfony\Bridge\Twig\Extension\RoutingExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="router.default"/>
    </service>
    <service id="twig.extension.yaml" class="Symfony\Bridge\Twig\Extension\YamlExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.debug.stopwatch" class="Symfony\Bridge\Twig\Extension\StopwatchExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
      <argument>true</argument>
    </service>
    <service id="twig.extension.expression" class="Symfony\Bridge\Twig\Extension\ExpressionExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.htmlsanitizer" class="Symfony\Bridge\Twig\Extension\HtmlSanitizerExtension">
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
    </service>
    <service id="twig.extension.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.runtime.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelRuntime">
      <tag name="twig.runtime"/>
      <argument type="service" id="fragment.handler"/>
      <argument type="service" id="fragment.uri_generator" on-invalid="ignore"/>
    </service>
    <service id="twig.extension.httpfoundation" class="Symfony\Bridge\Twig\Extension\HttpFoundationExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="url_helper"/>
    </service>
    <service id="twig.extension.debug" class="Twig\Extension\DebugExtension"/>
    <service id="twig.extension.weblink" class="Symfony\Bridge\Twig\Extension\WebLinkExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="twig.configurator.environment" class="Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator">
      <argument>F j, Y H:i</argument>
      <argument>%d days</argument>
      <argument>null</argument>
      <argument>0</argument>
      <argument>.</argument>
      <argument>,</argument>
    </service>
    <service id="twig.runtime_loader" class="Twig\RuntimeLoader\ContainerRuntimeLoader">
      <argument type="service" id=".service_locator.MaCAr52"/>
    </service>
    <service id="twig.error_renderer.html" class="Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer">
      <argument type="service" id="twig"/>
      <argument type="service" id="error_handler.error_renderer.html"/>
      <argument type="service">
        <service class="bool">
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer" method="isDebug"/>
        </service>
      </argument>
    </service>
    <service id="twig.runtime.serializer" class="Symfony\Bridge\Twig\Extension\SerializerRuntime">
      <tag name="twig.runtime"/>
      <argument type="service" id="debug.serializer"/>
    </service>
    <service id="twig.extension.serializer" class="Symfony\Bridge\Twig\Extension\SerializerExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="controller.template_attribute_listener" class="Symfony\Bridge\Twig\EventListener\TemplateAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.extension.form" class="Symfony\Bridge\Twig\Extension\FormExtension">
      <tag name="twig.extension"/>
      <argument>null</argument>
    </service>
    <service id="twig.form.engine" class="Symfony\Bridge\Twig\Form\TwigRendererEngine">
      <tag name="kernel.reset" method="reset"/>
      <argument>%twig.form.resources%</argument>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.form.renderer" class="Symfony\Component\Form\FormRenderer">
      <tag name="twig.runtime"/>
      <argument type="service" id="twig.form.engine"/>
      <argument type="service" id="security.csrf.token_manager" on-invalid="null"/>
    </service>
    <service id="twig.command.debug" class="Symfony\Bridge\Twig\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="twig"/>
      <argument>/srv/app</argument>
      <argument>%kernel.bundles_metadata%</argument>
      <argument>/srv/app/templates</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:twig</argument>
      </call>
      <call method="setDescription">
        <argument>Show a list of twig functions, filters, globals and tests</argument>
      </call>
    </service>
    <service id="twig.command.lint" class="Symfony\Bundle\TwigBundle\Command\LintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="twig"/>
      <argument type="collection">
        <argument>*.twig</argument>
      </argument>
      <call method="setName">
        <argument>lint:twig</argument>
      </call>
      <call method="setDescription">
        <argument>Lint a Twig template and outputs encountered errors</argument>
      </call>
    </service>
    <service id="twig.mailer.message_listener" class="Symfony\Component\Mailer\EventListener\MessageListener">
      <tag name="kernel.event_subscriber"/>
      <argument>null</argument>
      <argument type="service" id="twig.mime_body_renderer"/>
    </service>
    <service id="twig.mime_body_renderer" class="Symfony\Bridge\Twig\Mime\BodyRenderer">
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.missing_extension_suggestor" class="Twig\Extra\TwigExtraBundle\MissingExtensionSuggestor"/>
    <service id="maker.file_manager" class="Symfony\Bundle\MakerBundle\FileManager">
      <argument type="service" id="filesystem"/>
      <argument type="service" id="maker.autoloader_util"/>
      <argument type="service" id="maker.file_link_formatter"/>
      <argument>/srv/app</argument>
      <argument>/srv/app/templates</argument>
    </service>
    <service id="maker.autoloader_finder" class="Symfony\Bundle\MakerBundle\Util\ComposerAutoloaderFinder">
      <argument>App</argument>
    </service>
    <service id="maker.autoloader_util" class="Symfony\Bundle\MakerBundle\Util\AutoloaderUtil">
      <argument type="service" id="maker.autoloader_finder"/>
    </service>
    <service id="maker.file_link_formatter" class="Symfony\Bundle\MakerBundle\Util\MakerFileLinkFormatter">
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
    </service>
    <service id="maker.event_registry" class="Symfony\Bundle\MakerBundle\EventRegistry">
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="maker.console_error_listener" class="Symfony\Bundle\MakerBundle\Event\ConsoleErrorSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="maker.doctrine_helper" class="Symfony\Bundle\MakerBundle\Doctrine\DoctrineHelper">
      <argument>App\Entity</argument>
      <argument type="service" id="doctrine" on-invalid="ignore"/>
      <argument type="collection">
        <argument key="default" type="collection">
          <argument type="collection">
            <argument>App\Entity</argument>
            <argument type="service" id="doctrine.orm.default_attribute_metadata_driver"/>
          </argument>
          <argument type="collection">
            <argument>Vich\UploaderBundle\Entity</argument>
            <argument type="service" id="doctrine.orm.default_xml_metadata_driver"/>
          </argument>
        </argument>
      </argument>
    </service>
    <service id="maker.template_linter" class="Symfony\Bundle\MakerBundle\Util\TemplateLinter">
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_BINARY_PATH)%</argument>
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_CONFIG_PATH)%</argument>
    </service>
    <service id="maker.auto_command.abstract" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" abstract="true">
      <argument></argument>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
    </service>
    <service id="maker.generator" class="Symfony\Bundle\MakerBundle\Generator">
      <argument type="service" id="maker.file_manager"/>
      <argument>App</argument>
      <argument>null</argument>
      <argument type="service" id="maker.template_component_generator"/>
    </service>
    <service id="maker.entity_class_generator" class="Symfony\Bundle\MakerBundle\Doctrine\EntityClassGenerator">
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.user_class_builder" class="Symfony\Bundle\MakerBundle\Security\UserClassBuilder"/>
    <service id="maker.security_config_updater" class="Symfony\Bundle\MakerBundle\Security\SecurityConfigUpdater"/>
    <service id="maker.renderer.form_type_renderer" class="Symfony\Bundle\MakerBundle\Renderer\FormTypeRenderer">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.security_controller_builder" class="Symfony\Bundle\MakerBundle\Security\SecurityControllerBuilder"/>
    <service id="maker.php_compat_util" class="Symfony\Bundle\MakerBundle\Util\PhpCompatUtil">
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.template_component_generator" class="Symfony\Bundle\MakerBundle\Util\TemplateComponentGenerator"/>
    <service id="maker.maker.make_authenticator" class="Symfony\Bundle\MakerBundle\Maker\MakeAuthenticator">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id="maker.maker.make_command" class="Symfony\Bundle\MakerBundle\Maker\MakeCommand">
      <tag name="maker.command"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_twig_component" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigComponent">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeController">
      <tag name="maker.command"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_crud" class="Symfony\Bundle\MakerBundle\Maker\MakeCrud">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_docker_database" class="Symfony\Bundle\MakerBundle\Maker\MakeDockerDatabase">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_entity" class="Symfony\Bundle\MakerBundle\Maker\MakeEntity">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument>null</argument>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.entity_class_generator"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_fixtures" class="Symfony\Bundle\MakerBundle\Maker\MakeFixtures">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form" class="Symfony\Bundle\MakerBundle\Maker\MakeForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_functional_test" class="Symfony\Bundle\MakerBundle\Maker\MakeFunctionalTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_message" class="Symfony\Bundle\MakerBundle\Maker\MakeMessage">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Maker\MakeMessengerMiddleware">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_registration_form" class="Symfony\Bundle\MakerBundle\Maker\MakeRegistrationForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="maker.maker.make_reset_password" class="Symfony\Bundle\MakerBundle\Maker\MakeResetPassword">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.entity_class_generator"/>
    </service>
    <service id="maker.maker.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerEncoder">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerNormalizer">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_subscriber" class="Symfony\Bundle\MakerBundle\Maker\MakeSubscriber">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
    </service>
    <service id="maker.maker.make_twig_extension" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigExtension">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_test" class="Symfony\Bundle\MakerBundle\Maker\MakeTest">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_unit_test" class="Symfony\Bundle\MakerBundle\Maker\MakeUnitTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_validator" class="Symfony\Bundle\MakerBundle\Maker\MakeValidator">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_voter" class="Symfony\Bundle\MakerBundle\Maker\MakeVoter">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_user" class="Symfony\Bundle\MakerBundle\Maker\MakeUser">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.user_class_builder"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.entity_class_generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.maker.make_migration" class="Symfony\Bundle\MakerBundle\Maker\MakeMigration">
      <tag name="maker.command"/>
      <argument>/srv/app</argument>
      <argument type="service" id="maker.file_link_formatter"/>
    </service>
    <service id="maker.maker.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeStimulusController">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form_login" class="Symfony\Bundle\MakerBundle\Maker\Security\MakeFormLogin">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.registry" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\TokenParserRegistry">
      <argument type="collection">
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.dynamic_array_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.escaped_value_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_list_reference_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_method_reference_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_range_reference_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.method_reference_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.optional_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.parameter_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.property_reference_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_reference_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.simple_reference_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_array_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.tolerant_function_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_token_parser"/>
        <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.wildcard_reference_token_parser"/>
      </argument>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.argument_escaper" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\ArgumentEscaper"/>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.dynamic_array_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\DynamicArrayTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.escaped_value_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\EscapedValueTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_list_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureListReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_method_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureMethodReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_range_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureRangeReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.method_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\MethodReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.optional_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\OptionalTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.parameter_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\ParameterTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.property_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\PropertyReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\VariableReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.simple_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\SimpleReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_array_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\StringArrayTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\StringTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.argument_escaper"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.tolerant_function_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\TolerantFunctionTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.identity_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.identity_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\IdentityTokenParser">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.function_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.function_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FunctionTokenParser">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.argument_escaper"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\VariableTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.wildcard_reference_token_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\WildcardReferenceTokenParser">
      <tag name="nelmio_alice.fixture_builder.expression_language.chainable_token_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.function_fixture_reference_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\FunctionFixtureReferenceParser">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.string_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.string_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\StringMergerParser">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.simple_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.simple_parser" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\SimpleParser">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.lexer.empty_value_lexer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.token_parser.registry"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer.empty_value_lexer" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\EmptyValueLexer">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.lexer.reference_escaper_lexer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer.reference_escaper_lexer" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\ReferenceEscaperLexer">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.lexer.globals_patterns_lexer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer.globals_patterns_lexer" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\GlobalPatternsLexer">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.lexer.function_lexer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer.function_lexer" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\FunctionLexer">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.lexer.string_then_reference_lexer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer.string_then_reference_lexer" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\StringThenReferenceLexer">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.lexer.sub_patterns_lexer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer.sub_patterns_lexer" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\SubPatternsLexer">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.lexer.reference_lexer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer.reference_lexer" class="Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\ReferenceLexer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.simple_fixture_bag_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SimpleFixtureBagDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.tolerant_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.element"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.tolerant_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\TolerantFixtureDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.registry_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.registry_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\FixtureDenormalizerRegistry">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.element"/>
      <argument type="collection">
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_list"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.reference_range_name"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_range"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple"/>
      </argument>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_list" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\NullListNameDenormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_list" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\CollectionDenormalizerWithTemporaryFixture">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_list"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_list" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\SimpleCollectionDenormalizer">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_fixture_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_list"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_range" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\NullRangeNameDenormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.reference_range_name" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\ReferenceRangeNameDenormalizer">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_fixture_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.specs.simple"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_range" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\CollectionDenormalizerWithTemporaryFixture">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_range"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_range" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\SimpleCollectionDenormalizer">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_fixture_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_range"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\SimpleDenormalizer">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_fixture_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.specs.simple"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.specs.simple" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\SimpleSpecificationsDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.legacy_constructor_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.property.simple_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.simple_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.legacy_constructor_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Constructor\LegacyConstructorDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.constructor_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.factory_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.factory_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Constructor\FactoryDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.simple_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.constructor_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Constructor\ConstructorDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments.simple_arguments_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments.simple_arguments_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Arguments\SimpleArgumentsDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.unique_value_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.unique_value_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Value\UniqueValueDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.simple_value_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.simple_value_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Value\SimpleValueDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.expression_language.parser.function_fixture_reference_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.property.simple_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Property\SimplePropertyDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.unique_value_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.simple_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\CallsWithFlagsDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.function_denormalizer"/>
      <argument type="collection">
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.configurator_flag_handler"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.optional_flag_handler"/>
      </argument>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.function_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\FunctionDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments.simple_arguments_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.configurator_flag_handler" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\MethodFlagHandler\ConfiguratorFlagHandler">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_method_flag_handler"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.optional_flag_handler" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\MethodFlagHandler\OptionalFlagHandler">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_method_flag_handler"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser.element" class="Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\ElementFlagParser">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.registry"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser.registry" class="Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\FlagParserRegistry">
      <argument type="collection">
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.configurator"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.extend"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.optional"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.template"/>
        <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.unique"/>
      </argument>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.configurator" class="Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\ConfiguratorFlagParser">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_flag_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.extend" class="Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\ExtendFlagParser">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_flag_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.optional" class="Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\OptionalFlagParser">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_flag_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.template" class="Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\TemplateFlagParser">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_flag_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.unique" class="Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\UniqueFlagParser">
      <tag name="nelmio_alice.fixture_builder.denormalizer.chainable_flag_parser"/>
    </service>
    <service id="nelmio_alice.fixture_builder.simple" class="Nelmio\Alice\FixtureBuilder\SimpleBuilder">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.simple"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.simple" class="Nelmio\Alice\FixtureBuilder\Denormalizer\SimpleDenormalizer">
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer"/>
      <argument type="service" id="nelmio_alice.fixture_builder.denormalizer.fixture.simple_fixture_bag_denormalizer"/>
    </service>
    <service id="nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer" class="Nelmio\Alice\FixtureBuilder\Denormalizer\Parameter\SimpleParameterBagDenormalizer"/>
    <service id="nelmio_alice.property_accessor.std" class="Nelmio\Alice\PropertyAccess\StdPropertyAccessor">
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="nelmio_alice.faker.generator" class="Faker\Generator">
      <argument>en_US</argument>
      <call method="seed">
        <argument>1</argument>
      </call>
      <call method="addProvider">
        <argument type="service" id="nelmio_alice.faker.provider.alice"/>
      </call>
      <factory class="Faker\Factory" method="create"/>
    </service>
    <service id="nelmio_alice.faker.provider.alice" class="Nelmio\Alice\Faker\Provider\AliceProvider">
      <tag name="nelmio_alice.faker.provider"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.registry" class="Nelmio\Alice\Generator\Resolver\Value\ValueResolverRegistry">
      <argument type="collection">
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.array_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.dynamic_array_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.evaluated_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.function_argument_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.fixture_property_reference_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.fixture_method_call_reference_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.unresolved_fixture_reference_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.fixture_wildcard_reference_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.list_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.optional_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.parameter_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.unique_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.value_for_current_value_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.variable_value_resolver"/>
      </argument>
    </service>
    <service id="nelmio_alice.generator.resolver.value.unique_values_pool" class="Nelmio\Alice\Generator\Resolver\UniqueValuesPool"/>
    <service id="nelmio_alice.generator.resolver.value.chainable.array_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\ArrayValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.dynamic_array_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\DynamicArrayValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.evaluated_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\EvaluatedValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.faker_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\FakerFunctionCallValueResolver">
      <argument type="service" id="nelmio_alice.faker.generator"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.php_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\PhpFunctionCallValueResolver">
      <argument>%nelmio_alice.functions_blacklist%</argument>
      <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.faker_value_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.function_argument_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\FunctionCallArgumentResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
      <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.php_value_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.fixture_property_reference_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\FixturePropertyReferenceResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
      <argument type="service" id="nelmio_alice.property_accessor.std"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.fixture_method_call_reference_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureMethodCallReferenceResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.fixture_reference_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureReferenceResolver"/>
    <service id="nelmio_alice.generator.resolver.value.chainable.self_fixture_reference_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\SelfFixtureReferenceResolver">
      <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.fixture_reference_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.unresolved_fixture_reference_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\UnresolvedFixtureReferenceIdResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
      <argument type="service" id="nelmio_alice.generator.resolver.value.chainable.self_fixture_reference_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.fixture_wildcard_reference_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureWildcardReferenceResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.list_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\ListValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.optional_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\OptionalValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.parameter_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\ParameterValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.unique_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\UniqueValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
      <argument type="service" id="nelmio_alice.generator.resolver.value.unique_values_pool"/>
      <argument>null</argument>
      <argument>150</argument>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.value_for_current_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\ValueForCurrentValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.value.chainable.variable_value_resolver" class="Nelmio\Alice\Generator\Resolver\Value\Chainable\VariableValueResolver">
      <tag name="nelmio_alice.generator.resolver.value.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.fixture_set.remove_conflicting_objects" class="Nelmio\Alice\Generator\Resolver\FixtureSet\RemoveConflictingObjectsResolver">
      <argument type="service" id="nelmio_alice.generator.resolver.fixture_set.simple"/>
    </service>
    <service id="nelmio_alice.generator.resolver.fixture_set.simple" class="Nelmio\Alice\Generator\Resolver\FixtureSet\SimpleFixtureSetResolver">
      <argument type="service" id="nelmio_alice.generator.resolver.parameter_bag.remove_conflicting_parameters"/>
      <argument type="service" id="nelmio_alice.generator.resolver.fixture_bag.template_bag"/>
    </service>
    <service id="nelmio_alice.generator.named_arguments_resolver" class="Nelmio\Alice\Generator\NamedArgumentsResolver"/>
    <service id="nelmio_alice.generator.resolver.parameter_bag.remove_conflicting_parameters" class="Nelmio\Alice\Generator\Resolver\Parameter\RemoveConflictingParametersParameterBagResolver">
      <argument type="service" id="nelmio_alice.generator.resolver.parameter_bag.simple"/>
    </service>
    <service id="nelmio_alice.generator.resolver.parameter_bag.simple" class="Nelmio\Alice\Generator\Resolver\Parameter\SimpleParameterBagResolver">
      <argument type="service" id="nelmio_alice.generator.resolver.parameter.registry"/>
    </service>
    <service id="nelmio_alice.generator.resolver.parameter.registry" class="Nelmio\Alice\Generator\Resolver\Parameter\ParameterResolverRegistry">
      <argument type="collection">
        <argument type="service" id="nelmio_alice.generator.resolver.parameter.chainable.static_parameter_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.parameter.chainable.array_parameter_resolver"/>
        <argument type="service" id="nelmio_alice.generator.resolver.parameter.chainable.recursive_parameter_resolver"/>
      </argument>
    </service>
    <service id="nelmio_alice.generator.resolver.parameter.chainable.static_parameter_resolver" class="Nelmio\Alice\Generator\Resolver\Parameter\Chainable\StaticParameterResolver">
      <tag name="nelmio_alice.generator.resolver.parameter.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.parameter.chainable.array_parameter_resolver" class="Nelmio\Alice\Generator\Resolver\Parameter\Chainable\ArrayParameterResolver">
      <tag name="nelmio_alice.generator.resolver.parameter.chainable_resolver"/>
    </service>
    <service id="nelmio_alice.generator.resolver.parameter.chainable.recursive_parameter_resolver" class="Nelmio\Alice\Generator\Resolver\Parameter\Chainable\RecursiveParameterResolver">
      <tag name="nelmio_alice.generator.resolver.parameter.chainable_resolver"/>
      <argument type="service" id="nelmio_alice.generator.resolver.parameter.chainable.string_parameter_resolver"/>
      <argument>5</argument>
    </service>
    <service id="nelmio_alice.generator.resolver.parameter.chainable.string_parameter_resolver" class="Nelmio\Alice\Generator\Resolver\Parameter\Chainable\StringParameterResolver"/>
    <service id="nelmio_alice.generator.resolver.fixture_bag.template_bag" class="Nelmio\Alice\Generator\Resolver\Fixture\TemplateFixtureBagResolver"/>
    <service id="nelmio_alice.generator.caller.simple" class="Nelmio\Alice\Generator\Caller\SimpleCaller">
      <argument type="service" id="nelmio_alice.generator.caller.registry"/>
      <argument type="service" id="nelmio_alice.generator.resolver.value.registry"/>
      <argument type="service" id="nelmio_alice.generator.named_arguments_resolver"/>
    </service>
    <service id="nelmio_alice.generator.caller.registry" class="Nelmio\Alice\Generator\Caller\CallProcessorRegistry">
      <argument type="collection">
        <argument type="service" id="nelmio_alice.generator.caller.chainable.configurator_method_call"/>
        <argument type="service" id="nelmio_alice.generator.caller.chainable.method_call_with_reference"/>
        <argument type="service" id="nelmio_alice.generator.caller.chainable.optional_method_call"/>
        <argument type="service" id="nelmio_alice.generator.caller.chainable.simple_call"/>
      </argument>
    </service>
    <service id="nelmio_alice.generator.caller.chainable.configurator_method_call" class="Nelmio\Alice\Generator\Caller\Chainable\ConfiguratorMethodCallProcessor">
      <tag name="nelmio_alice.generator.caller.chainable_call_processor"/>
    </service>
    <service id="nelmio_alice.generator.caller.chainable.method_call_with_reference" class="Nelmio\Alice\Generator\Caller\Chainable\MethodCallWithReferenceProcessor">
      <tag name="nelmio_alice.generator.caller.chainable_call_processor"/>
    </service>
    <service id="nelmio_alice.generator.caller.chainable.optional_method_call" class="Nelmio\Alice\Generator\Caller\Chainable\OptionalMethodCallProcessor">
      <tag name="nelmio_alice.generator.caller.chainable_call_processor"/>
    </service>
    <service id="nelmio_alice.generator.caller.chainable.simple_call" class="Nelmio\Alice\Generator\Caller\Chainable\SimpleMethodCallProcessor">
      <tag name="nelmio_alice.generator.caller.chainable_call_processor"/>
    </service>
    <service id="nelmio_alice.generator.double_pass" class="Nelmio\Alice\Generator\DoublePassGenerator">
      <argument type="service" id="nelmio_alice.generator.resolver.fixture_set.remove_conflicting_objects"/>
      <argument type="service" id="nelmio_alice.generator.object_generator.complete"/>
    </service>
    <service id="nelmio_alice.generator.object_generator.complete" class="Nelmio\Alice\Generator\ObjectGenerator\CompleteObjectGenerator">
      <argument type="service" id="nelmio_alice.generator.object_generator.simple"/>
    </service>
    <service id="nelmio_alice.generator.object_generator.simple" class="Nelmio\Alice\Generator\ObjectGenerator\SimpleObjectGenerator">
      <argument type="service" id="nelmio_alice.generator.resolver.value.registry"/>
      <argument type="service" id="nelmio_alice.generator.instantiator.existing_instance"/>
      <argument type="service" id="nelmio_alice.generator.hydrator.simple"/>
      <argument type="service" id="nelmio_alice.generator.caller.simple"/>
    </service>
    <service id="nelmio_alice.generator.instantiator.existing_instance" class="Nelmio\Alice\Generator\Instantiator\ExistingInstanceInstantiator">
      <argument type="service" id="nelmio_alice.generator.instantiator.resolver"/>
    </service>
    <service id="nelmio_alice.generator.instantiator.resolver" class="Nelmio\Alice\Generator\Instantiator\InstantiatorResolver">
      <argument type="service" id="nelmio_alice.generator.instantiator.registry"/>
    </service>
    <service id="nelmio_alice.generator.instantiator.registry" class="Nelmio\Alice\Generator\Instantiator\InstantiatorRegistry">
      <argument type="collection">
        <argument type="service" id="nelmio_alice.generator.instantiator.chainable.no_caller_method_instantiator"/>
        <argument type="service" id="nelmio_alice.generator.instantiator.chainable.null_constructor_instantiator"/>
        <argument type="service" id="nelmio_alice.generator.instantiator.chainable.no_method_call_instantiator"/>
        <argument type="service" id="nelmio_alice.generator.instantiator.chainable.static_factory_instantiator"/>
        <argument type="service" id="hautelook_alice.alice.generator.instantiator.chainable.instantiated_reference_instantiator"/>
      </argument>
    </service>
    <service id="nelmio_alice.generator.instantiator.chainable.no_caller_method_instantiator" class="Nelmio\Alice\Generator\Instantiator\Chainable\NoCallerMethodCallInstantiator">
      <tag name="nelmio_alice.generator.instantiator.chainable_instantiator"/>
      <argument type="service" id="nelmio_alice.generator.named_arguments_resolver"/>
    </service>
    <service id="nelmio_alice.generator.instantiator.chainable.null_constructor_instantiator" class="Nelmio\Alice\Generator\Instantiator\Chainable\NullConstructorInstantiator">
      <tag name="nelmio_alice.generator.instantiator.chainable_instantiator"/>
    </service>
    <service id="nelmio_alice.generator.instantiator.chainable.no_method_call_instantiator" class="Nelmio\Alice\Generator\Instantiator\Chainable\NoMethodCallInstantiator">
      <tag name="nelmio_alice.generator.instantiator.chainable_instantiator"/>
    </service>
    <service id="nelmio_alice.generator.instantiator.chainable.static_factory_instantiator" class="Nelmio\Alice\Generator\Instantiator\Chainable\StaticFactoryInstantiator">
      <tag name="nelmio_alice.generator.instantiator.chainable_instantiator"/>
      <argument type="service" id="nelmio_alice.generator.named_arguments_resolver"/>
    </service>
    <service id="nelmio_alice.generator.hydrator.simple" class="Nelmio\Alice\Generator\Hydrator\SimpleHydrator">
      <argument type="service" id="nelmio_alice.generator.hydrator.property.symfony_property_access"/>
    </service>
    <service id="nelmio_alice.generator.hydrator.property.symfony_property_access" class="Nelmio\Alice\Generator\Hydrator\Property\SymfonyPropertyAccessorHydrator">
      <argument type="service" id="nelmio_alice.property_accessor.std"/>
    </service>
    <service id="nelmio_alice.data_loader.simple" class="Nelmio\Alice\Loader\SimpleDataLoader">
      <argument type="service" id="nelmio_alice.fixture_builder.simple"/>
      <argument type="service" id="nelmio_alice.generator.double_pass"/>
    </service>
    <service id="nelmio_alice.file_loader.simple" class="Nelmio\Alice\Loader\SimpleFileLoader">
      <argument type="service" id="nelmio_alice.file_parser.runtime_cache"/>
      <argument type="service" id="nelmio_alice.data_loader.simple"/>
    </service>
    <service id="nelmio_alice.files_loader.simple" class="Nelmio\Alice\Loader\SimpleFilesLoader">
      <argument type="service" id="nelmio_alice.file_parser.runtime_cache"/>
      <argument type="service" id="nelmio_alice.data_loader.simple"/>
    </service>
    <service id="nelmio_alice.file_locator.default" class="Nelmio\Alice\FileLocator\DefaultFileLocator"/>
    <service id="nelmio_alice.file_parser.runtime_cache" class="Nelmio\Alice\Parser\RuntimeCacheParser">
      <argument type="service" id="nelmio_alice.file_parser.registry"/>
      <argument type="service" id="hautelook_alice.alice.file_locator.kernel"/>
      <argument type="service" id="nelmio_alice.file_parser.default_include_processor"/>
    </service>
    <service id="nelmio_alice.file_parser.symfony_yaml" class="Symfony\Component\Yaml\Parser"/>
    <service id="nelmio_alice.file_parser.default_include_processor" class="Nelmio\Alice\Parser\IncludeProcessor\DefaultIncludeProcessor">
      <argument type="service" id="hautelook_alice.alice.file_locator.kernel"/>
    </service>
    <service id="nelmio_alice.file_parser.registry" class="Nelmio\Alice\Parser\ParserRegistry">
      <argument type="collection">
        <argument type="service" id="nelmio_alice.file_parser.chainable.yaml"/>
        <argument type="service" id="nelmio_alice.file_parser.chainable.php"/>
        <argument type="service" id="nelmio_alice.file_parser.chainable.json"/>
      </argument>
    </service>
    <service id="nelmio_alice.file_parser.chainable.yaml" class="Nelmio\Alice\Parser\Chainable\YamlParser">
      <tag name="nelmio_alice.file_parser"/>
      <argument type="service" id="nelmio_alice.file_parser.symfony_yaml"/>
    </service>
    <service id="nelmio_alice.file_parser.chainable.php" class="Nelmio\Alice\Parser\Chainable\PhpParser">
      <tag name="nelmio_alice.file_parser"/>
    </service>
    <service id="nelmio_alice.file_parser.chainable.json" class="Nelmio\Alice\Parser\Chainable\JsonParser">
      <tag name="nelmio_alice.file_parser"/>
    </service>
    <service id="fidry_alice_data_fixtures.loader.multipass_file" class="Fidry\AliceDataFixtures\Loader\MultiPassLoader" lazy="true">
      <argument type="service" id="nelmio_alice.file_loader.simple"/>
      <deprecated package="theofidry/alice-data-fixtures" version="1.0">The service "%service_id%" is deprecated and will be removed in future versions.</deprecated>
    </service>
    <service id="fidry_alice_data_fixtures.loader.simple" class="Fidry\AliceDataFixtures\Loader\SimpleLoader" lazy="true">
      <argument type="service" id="nelmio_alice.files_loader.simple"/>
      <argument type="service" id="monolog.logger" on-invalid="ignore"/>
    </service>
    <service id="fidry_alice_data_fixtures.doctrine.purger_loader" class="Fidry\AliceDataFixtures\Loader\PurgerLoader" lazy="true">
      <argument type="service" id="fidry_alice_data_fixtures.doctrine.persister_loader"/>
      <argument type="service" id="fidry_alice_data_fixtures.persistence.doctrine.purger.purger_factory"/>
      <argument>delete</argument>
      <argument type="service" id="monolog.logger" on-invalid="ignore"/>
    </service>
    <service id="fidry_alice_data_fixtures.doctrine.persister_loader" class="Fidry\AliceDataFixtures\Loader\PersisterLoader" lazy="true">
      <argument type="service" id="fidry_alice_data_fixtures.loader.simple"/>
      <argument type="service" id="fidry_alice_data_fixtures.persistence.persister.doctrine.object_manager_persister"/>
      <argument type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument type="collection"/>
    </service>
    <service id="fidry_alice_data_fixtures.persistence.doctrine.purger.purger_factory" class="Fidry\AliceDataFixtures\Bridge\Doctrine\Purger\Purger" lazy="true">
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="fidry_alice_data_fixtures.persistence.purger_modepurger_mode" class="Fidry\AliceDataFixtures\Persistence\PurgeMode" constructor="createDeleteMode">
      <deprecated package="theofidry/alice-data-fixtures" version="1.0">The service "%service_id%" is deprecated and will be removed in future versions.Inject the purger or purger factory directly instead.</deprecated>
    </service>
    <service id="fidry_alice_data_fixtures.persistence.persister.doctrine.object_manager_persister" class="Fidry\AliceDataFixtures\Bridge\Doctrine\Persister\ObjectManagerPersister" lazy="true">
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="hautelook_alice.resolver.bundle.simple_resolver" class="Hautelook\AliceBundle\Resolver\Bundle\SimpleBundleResolver">
      <argument type="service" id="kernel"/>
    </service>
    <service id="hautelook_alice.resolver.bundle.no_bundle_resolver" class="Hautelook\AliceBundle\Resolver\Bundle\NoBundleResolver">
      <argument type="service" id="hautelook_alice.resolver.bundle.simple_resolver"/>
    </service>
    <service id="hautelook_alice.resolver.file.kernel_file_resolver" class="Hautelook\AliceBundle\Resolver\File\KernelFileResolver">
      <argument type="service" id="kernel"/>
    </service>
    <service id="hautelook_alice.locator.env_directory" class="Hautelook\AliceBundle\Locator\EnvDirectoryLocator">
      <argument>%hautelook_alice.fixtures_path%</argument>
      <argument>%hautelook_alice.root_dirs%</argument>
    </service>
    <service id="hautelook_alice.locator.environmentless" class="Hautelook\AliceBundle\Locator\EnvironmentlessFilesLocator">
      <argument type="service" id="hautelook_alice.locator.env_directory"/>
    </service>
    <service id="hautelook_alice.console.command.doctrine.doctrine_orm_load_data_fixtures_command" class="Hautelook\AliceBundle\Console\Command\Doctrine\DoctrineOrmLoadDataFixturesCommand" public="true">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>hautelook:fixtures:load</argument>
      <argument type="service" id="doctrine"/>
      <argument type="service" id="hautelook_alice.loader.doctrine_orm_loader"/>
      <call method="setName">
        <argument>hautelook:fixtures:load</argument>
      </call>
      <call method="setDescription">
        <argument>Load data fixtures to your database.</argument>
      </call>
    </service>
    <service id="hautelook_alice.data_fixtures.loader.file_resolver_loader" class="Fidry\AliceDataFixtures\Loader\FileResolverLoader">
      <argument type="service" id="fidry_alice_data_fixtures.doctrine.purger_loader"/>
      <argument type="service" id="hautelook_alice.resolver.file.kernel_file_resolver"/>
    </service>
    <service id="hautelook_alice.data_fixtures.purge_loader" class="Fidry\AliceDataFixtures\Loader\FileResolverLoader" public="true">
      <argument type="service" id="fidry_alice_data_fixtures.doctrine.purger_loader"/>
      <argument type="service" id="hautelook_alice.resolver.file.kernel_file_resolver"/>
    </service>
    <service id="hautelook_alice.data_fixtures.append_loader" class="Fidry\AliceDataFixtures\Loader\FileResolverLoader" public="true">
      <argument type="service" id="fidry_alice_data_fixtures.doctrine.persister_loader"/>
      <argument type="service" id="hautelook_alice.resolver.file.kernel_file_resolver"/>
    </service>
    <service id="hautelook_alice.loader.doctrine_orm_loader" class="Hautelook\AliceBundle\Loader\DoctrineOrmLoader">
      <argument type="service" id="hautelook_alice.resolver.bundle.no_bundle_resolver"/>
      <argument type="service" id="hautelook_alice.locator.environmentless"/>
      <argument type="service" id="hautelook_alice.data_fixtures.purge_loader"/>
      <argument type="service" id="hautelook_alice.data_fixtures.append_loader"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="hautelook_alice.alice.generator.instantiator.chainable.instantiated_reference_instantiator" class="Hautelook\AliceBundle\Alice\Generator\Instantiator\Chainable\InstantiatedReferenceInstantiator">
      <tag name="nelmio_alice.generator.instantiator.chainable_instantiator"/>
      <call method="setContainer">
        <argument type="service" id="service_container"/>
      </call>
    </service>
    <service id="hautelook_alice.alice.file_locator.kernel" class="Hautelook\AliceBundle\Alice\FileLocator\KernelFileLocator">
      <argument type="service" id="nelmio_alice.file_locator.default"/>
      <argument type="service" id="kernel"/>
    </service>
    <service id="security.authorization_checker" class="Symfony\Component\Security\Core\Authorization\AuthorizationChecker">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument>false</argument>
      <argument>false</argument>
    </service>
    <service id="security.token_storage" class="Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage">
      <tag name="kernel.reset" method="disableUsageTracking"/>
      <tag name="kernel.reset" method="setToken"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="service" id=".service_locator.LcVn9Hr"/>
    </service>
    <service id="security.untracked_token_storage" class="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage"/>
    <service id="security.helper" class="Symfony\Bundle\SecurityBundle\Security">
      <argument type="service" id=".service_locator.LrCXAmX"/>
      <argument type="collection">
        <argument key="dev">null</argument>
        <argument key="api" type="service" id=".service_locator.5y4U6aa"/>
        <argument key="main" type="service" id=".service_locator.AKOPFXc"/>
      </argument>
    </service>
    <service id="security.user_value_resolver" class="Symfony\Component\Security\Http\Controller\UserValueResolver">
      <tag priority="120" name="Symfony\Component\Security\Http\Controller\UserValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="security.security_token_value_resolver" class="Symfony\Component\Security\Http\Controller\SecurityTokenValueResolver">
      <tag priority="120" name="Symfony\Component\Security\Http\Controller\SecurityTokenValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="security.authentication.trust_resolver" class="Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver"/>
    <service id="security.authentication.session_strategy" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy">
      <argument>migrate</argument>
      <argument type="service" id="security.csrf.token_storage" on-invalid="ignore"/>
    </service>
    <service id="security.authentication.session_strategy_noop" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy">
      <argument>none</argument>
    </service>
    <service id="security.user_checker" class="Symfony\Component\Security\Core\User\InMemoryUserChecker"/>
    <service id="security.expression_language" class="Symfony\Component\Security\Core\Authorization\ExpressionLanguage">
      <argument type="service" id="cache.security_expression_language" on-invalid="null"/>
      <call method="registerProvider">
        <argument type="service" id="api_platform.security.expression_language_provider"/>
      </call>
    </service>
    <service id="security.authentication_utils" class="Symfony\Component\Security\Http\Authentication\AuthenticationUtils">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.role_hierarchy" class="Symfony\Component\Security\Core\Role\RoleHierarchy">
      <argument>%security.role_hierarchy.roles%</argument>
    </service>
    <service id="security.access.authenticated_voter" class="Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter">
      <tag name="security.voter" priority="250"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.access.role_hierarchy_voter" class="Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter">
      <tag name="security.voter" priority="245"/>
      <argument type="service" id="security.role_hierarchy"/>
    </service>
    <service id="security.access.expression_voter" class="Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter">
      <tag name="security.voter" priority="245"/>
      <argument type="service" id="security.expression_language"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.authorization_checker"/>
      <argument type="service" id="security.role_hierarchy" on-invalid="null"/>
    </service>
    <service id="security.impersonate_url_generator" class="Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="security.firewall.map" class="Symfony\Bundle\SecurityBundle\Security\FirewallMap">
      <argument type="service" id=".service_locator.IEeEty."/>
      <argument type="iterator">
        <argument key="security.firewall.map.context.dev" type="service" id=".security.request_matcher.kLbKLHa"/>
        <argument key="security.firewall.map.context.api" type="service" id=".security.request_matcher.FbeHDom"/>
        <argument key="security.firewall.map.context.main">null</argument>
      </argument>
    </service>
    <service id="security.firewall.context" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" abstract="true">
      <argument type="collection"/>
      <argument type="service" id="security.exception_listener"/>
      <argument type="abstract">LogoutListener</argument>
      <argument type="abstract">FirewallConfig</argument>
    </service>
    <service id="security.firewall.lazy_context" class="Symfony\Bundle\SecurityBundle\Security\LazyFirewallContext" abstract="true">
      <argument type="collection"/>
      <argument type="service" id="security.exception_listener"/>
      <argument type="abstract">LogoutListener</argument>
      <argument type="abstract">FirewallConfig</argument>
      <argument type="service" id="security.untracked_token_storage"/>
    </service>
    <service id="security.firewall.config" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" abstract="true">
      <argument type="abstract">name</argument>
      <argument type="abstract">user_checker</argument>
      <argument type="abstract">request_matcher</argument>
      <argument>false</argument>
      <argument>false</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="security.logout_url_generator" class="Symfony\Component\Security\Http\Logout\LogoutUrlGenerator">
      <argument type="service" id="request_stack" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
      <call method="registerListener">
        <argument>main</argument>
        <argument>app_logout</argument>
        <argument>logout</argument>
        <argument>_csrf_token</argument>
        <argument>null</argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="security.user.provider.missing" class="Symfony\Component\Security\Core\User\MissingUserProvider" abstract="true">
      <argument type="abstract">firewall</argument>
    </service>
    <service id="security.user.provider.in_memory" class="Symfony\Component\Security\Core\User\InMemoryUserProvider" abstract="true"/>
    <service id="security.user.provider.ldap" class="Symfony\Component\Ldap\Security\LdapUserProvider" abstract="true">
      <argument type="abstract">security.ldap.ldap</argument>
      <argument type="abstract">base dn</argument>
      <argument type="abstract">search dn</argument>
      <argument type="abstract">search password</argument>
      <argument type="abstract">default_roles</argument>
      <argument type="abstract">uid key</argument>
      <argument type="abstract">filter</argument>
      <argument type="abstract">password_attribute</argument>
      <argument type="abstract">extra_fields (email etc)</argument>
    </service>
    <service id="security.user.provider.chain" class="Symfony\Component\Security\Core\User\ChainUserProvider" abstract="true"/>
    <service id="security.http_utils" class="Symfony\Component\Security\Http\HttpUtils">
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument>{^https?://%%s$}i</argument>
      <argument>{^https://%%s$}i</argument>
    </service>
    <service id="security.validator.user_password" class="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator">
      <tag name="validator.constraint_validator" alias="security.validator.user_password"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="cache.security_expression_language" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.security_expression_language.recorder_inner"/>
    </service>
    <service id="controller.is_granted_attribute_listener" class="Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.authorization_checker"/>
      <argument type="service" id="security.is_granted_attribute_expression_language" on-invalid="null"/>
    </service>
    <service id="security.is_granted_attribute_expression_language" class="Symfony\Component\ExpressionLanguage\ExpressionLanguage">
      <argument type="service" id="cache.security_is_granted_attribute_expression_language" on-invalid="null"/>
    </service>
    <service id="cache.security_is_granted_attribute_expression_language" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="cache.security_is_granted_attribute_expression_language.recorder_inner"/>
    </service>
    <service id="security.password_hasher_factory" class="Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory">
      <argument type="collection">
        <argument key="Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface" type="collection">
          <argument key="algorithm">auto</argument>
          <argument key="migrate_from" type="collection"/>
          <argument key="hash_algorithm">sha512</argument>
          <argument key="key_length">40</argument>
          <argument key="ignore_case">false</argument>
          <argument key="encode_as_base64">true</argument>
          <argument key="iterations">5000</argument>
          <argument key="cost">null</argument>
          <argument key="memory_cost">null</argument>
          <argument key="time_cost">null</argument>
        </argument>
      </argument>
    </service>
    <service id="security.user_password_hasher" class="Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher">
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="form.listener.password_hasher" class="Symfony\Component\Form\Extension\PasswordHasher\EventListener\PasswordHasherListener">
      <argument type="service" id="security.user_password_hasher"/>
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="form.type_extension.form.password_hasher" class="Symfony\Component\Form\Extension\PasswordHasher\Type\FormTypePasswordHasherExtension">
      <tag name="form.type_extension" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="form.listener.password_hasher"/>
    </service>
    <service id="form.type_extension.password.password_hasher" class="Symfony\Component\Form\Extension\PasswordHasher\Type\PasswordTypePasswordHasherExtension">
      <tag name="form.type_extension" extended-type="Symfony\Component\Form\Extension\Core\Type\PasswordType"/>
      <argument type="service" id="form.listener.password_hasher"/>
    </service>
    <service id="security.channel_listener" class="Symfony\Component\Security\Http\Firewall\ChannelListener">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.access_map"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="security.access_map" class="Symfony\Component\Security\Http\AccessMap">
      <call method="add">
        <argument type="service" id=".security.request_matcher.BrFfR3a"/>
        <argument type="collection">
          <argument>PUBLIC_ACCESS</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher..58rygz"/>
        <argument type="collection">
          <argument>PUBLIC_ACCESS</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher.I_Wy6An"/>
        <argument type="collection">
          <argument>PUBLIC_ACCESS</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher.28NqKnb"/>
        <argument type="collection">
          <argument>ROLE_ADMIN</argument>
        </argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="security.context_listener" class="Symfony\Component\Security\Http\Firewall\ContextListener">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <argument type="abstract">Provider Key</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="collection">
        <argument type="service" id="security.token_storage"/>
        <argument>enableUsageTracking</argument>
      </argument>
    </service>
    <service id="security.logout_listener" class="Symfony\Component\Security\Http\Firewall\LogoutListener" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">event dispatcher</argument>
      <argument type="collection"/>
    </service>
    <service id="security.logout.listener.session" class="Symfony\Component\Security\Http\EventListener\SessionLogoutListener" abstract="true"/>
    <service id="security.logout.listener.clear_site_data" class="Symfony\Component\Security\Http\EventListener\ClearSiteDataLogoutListener" abstract="true"/>
    <service id="security.logout.listener.cookie_clearing" class="Symfony\Component\Security\Http\EventListener\CookieClearingLogoutListener" abstract="true"/>
    <service id="security.logout.listener.default" class="Symfony\Component\Security\Http\EventListener\DefaultLogoutListener" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">target url</argument>
    </service>
    <service id="security.authentication.listener.abstract" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">Provider-shared Key</argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.custom_success_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler" abstract="true">
      <argument type="abstract">The custom success handler service</argument>
      <argument type="collection"/>
      <argument type="abstract">Provider-shared Key</argument>
    </service>
    <service id="security.authentication.success_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="security.authentication.custom_failure_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler" abstract="true">
      <argument type="abstract">The custom failure handler service</argument>
      <argument type="collection"/>
    </service>
    <service id="security.authentication.failure_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.exception_listener" class="Symfony\Component\Security\Http\Firewall\ExceptionListener" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">Provider-shared Key</argument>
      <argument type="service" id="security.authentication.entry_point" on-invalid="null"/>
      <argument>null</argument>
      <argument type="service" id="security.access.denied_handler" on-invalid="null"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.authentication.switchuser_listener" class="Symfony\Component\Security\Http\Firewall\SwitchUserListener" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="abstract">User Provider</argument>
      <argument type="abstract">User Checker</argument>
      <argument type="abstract">Provider Key</argument>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>_switch_user</argument>
      <argument>ROLE_ALLOWED_TO_SWITCH</argument>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument>false</argument>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="abstract">Target Route</argument>
    </service>
    <service id="security.access_listener" class="Symfony\Component\Security\Http\Firewall\AccessListener">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.access_map"/>
      <argument>false</argument>
    </service>
    <service id="security.firewall.event_dispatcher_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection">
        <argument key="api" type="service_closure" id="debug.security.event_dispatcher.api"/>
        <argument key="main" type="service_closure" id="debug.security.event_dispatcher.main"/>
      </argument>
    </service>
    <service id="security.authenticator.manager" class="Symfony\Component\Security\Http\Authentication\AuthenticatorManager" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">authenticators</argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="abstract">provider key</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="abstract">required badges</argument>
    </service>
    <service id="security.authenticator.managers_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection">
        <argument key="api" type="service_closure" id="security.authenticator.manager.api"/>
        <argument key="main" type="service_closure" id="security.authenticator.manager.main"/>
      </argument>
    </service>
    <service id="security.user_authenticator" class="Symfony\Bundle\SecurityBundle\Security\UserAuthenticator">
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="security.authenticator.managers_locator"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.firewall.authenticator" class="Symfony\Component\Security\Http\Firewall\AuthenticatorManagerListener" abstract="true">
      <argument type="abstract">authenticator manager</argument>
    </service>
    <service id="security.listener.check_authenticator_credentials" class="Symfony\Component\Security\Http\EventListener\CheckCredentialsListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="security.listener.user_provider" class="Symfony\Component\Security\Http\EventListener\UserProviderListener">
      <tag name="kernel.event_listener" event="Symfony\Component\Security\Http\Event\CheckPassportEvent" priority="1024" method="checkPassport"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
    </service>
    <service id="security.listener.user_provider.abstract" class="Symfony\Component\Security\Http\EventListener\UserProviderListener" abstract="true">
      <argument type="abstract">user provider</argument>
    </service>
    <service id="security.listener.password_migrating" class="Symfony\Component\Security\Http\EventListener\PasswordMigratingListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="security.listener.user_checker" class="Symfony\Component\Security\Http\EventListener\UserCheckerListener" abstract="true">
      <argument type="abstract">user checker</argument>
    </service>
    <service id="security.listener.session" class="Symfony\Component\Security\Http\EventListener\SessionStrategyListener" abstract="true">
      <argument type="service" id="security.authentication.session_strategy"/>
    </service>
    <service id="security.listener.login_throttling" class="Symfony\Component\Security\Http\EventListener\LoginThrottlingListener" abstract="true">
      <argument type="service" id="request_stack"/>
      <argument type="abstract">request rate limiter</argument>
    </service>
    <service id="security.authenticator.http_basic" class="Symfony\Component\Security\Http\Authenticator\HttpBasicAuthenticator" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">realm name</argument>
      <argument type="abstract">user provider</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authenticator.form_login" class="Symfony\Component\Security\Http\Authenticator\FormLoginAuthenticator" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">user provider</argument>
      <argument type="abstract">authentication success handler</argument>
      <argument type="abstract">authentication failure handler</argument>
      <argument type="abstract">options</argument>
    </service>
    <service id="security.authenticator.json_login" class="Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">user provider</argument>
      <argument type="abstract">authentication success handler</argument>
      <argument type="abstract">authentication failure handler</argument>
      <argument type="abstract">options</argument>
      <argument type="service" id="property_accessor" on-invalid="null"/>
      <call method="setTranslator">
        <argument type="service" id="translator" on-invalid="ignore"/>
      </call>
    </service>
    <service id="security.authenticator.x509" class="Symfony\Component\Security\Http\Authenticator\X509Authenticator" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">user provider</argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="abstract">firewall name</argument>
      <argument type="abstract">user key</argument>
      <argument type="abstract">credentials key</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="abstract">credentials user identifier</argument>
    </service>
    <service id="security.authenticator.remote_user" class="Symfony\Component\Security\Http\Authenticator\RemoteUserAuthenticator" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">user provider</argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="abstract">firewall name</argument>
      <argument type="abstract">user key</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.access_token_extractor.header" class="Symfony\Component\Security\Http\AccessToken\HeaderAccessTokenExtractor"/>
    <service id="security.access_token_extractor.query_string" class="Symfony\Component\Security\Http\AccessToken\QueryAccessTokenExtractor"/>
    <service id="security.access_token_extractor.request_body" class="Symfony\Component\Security\Http\AccessToken\FormEncodedBodyExtractor"/>
    <service id="security.authenticator.access_token" class="Symfony\Component\Security\Http\Authenticator\AccessTokenAuthenticator" abstract="true">
      <argument type="abstract">access token handler</argument>
      <argument type="abstract">access token extractor</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="security.authenticator.access_token.chain_extractor" class="Symfony\Component\Security\Http\AccessToken\ChainAccessTokenExtractor" abstract="true">
      <argument type="abstract">access token extractors</argument>
    </service>
    <service id="security.access_token_handler.oidc_user_info.http_client" class="Symfony\Contracts\HttpClient\HttpClientInterface" abstract="true">
      <argument type="abstract">http client options</argument>
      <factory service=".debug.http_client" method="withOptions"/>
    </service>
    <service id="security.access_token_handler.oidc_user_info" class="Symfony\Component\Security\Http\AccessToken\Oidc\OidcUserInfoTokenHandler" abstract="true">
      <argument type="abstract">http client</argument>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <argument type="abstract">claim</argument>
    </service>
    <service id="security.access_token_handler.oidc" class="Symfony\Component\Security\Http\AccessToken\Oidc\OidcTokenHandler" abstract="true">
      <argument type="abstract">signature algorithm</argument>
      <argument type="abstract">signature key</argument>
      <argument type="abstract">audience</argument>
      <argument type="abstract">issuers</argument>
      <argument>sub</argument>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <argument type="service" id="clock"/>
    </service>
    <service id="security.access_token_handler.oidc.jwk" class="Jose\Component\Core\JWK" constructor="createFromJson" abstract="true">
      <argument type="abstract">signature key</argument>
    </service>
    <service id="security.access_token_handler.oidc.signature" class="Jose\Component\Core\Algorithm" abstract="true">
      <argument type="abstract">signature algorithm</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="security.access_token_handler.oidc.signature.ES256" class="Jose\Component\Signature\Algorithm\ES256">
      <argument>ES256</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="security.access_token_handler.oidc.signature.ES384" class="Jose\Component\Signature\Algorithm\ES384">
      <argument>ES384</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="security.access_token_handler.oidc.signature.ES512" class="Jose\Component\Signature\Algorithm\ES512">
      <argument>ES512</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="twig.extension.logout_url" class="Symfony\Bridge\Twig\Extension\LogoutUrlExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="twig.extension.security" class="Symfony\Bridge\Twig\Extension\SecurityExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="security.authorization_checker" on-invalid="ignore"/>
      <argument type="service" id="security.impersonate_url_generator" on-invalid="ignore"/>
    </service>
    <service id="data_collector.security" class="Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector">
      <tag name="data_collector" template="@Security/Collector/security.html.twig" id="security" priority="270"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="service" id="security.role_hierarchy"/>
      <argument type="service" id="security.logout_url_generator"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="debug.security.firewall" on-invalid="null"/>
    </service>
    <service id="debug.security.access.decision_manager" class="Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager">
      <tag name="container.decorator" id="security.access.decision_manager" inner="debug.security.access.decision_manager.inner"/>
      <argument type="service" id="debug.security.access.decision_manager.inner"/>
    </service>
    <service id="debug.security.voter.vote_listener" class="Symfony\Bundle\SecurityBundle\EventListener\VoteListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
    </service>
    <service id="debug.security.firewall" class="Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="security.command.debug_firewall" class="Symfony\Bundle\SecurityBundle\Command\DebugFirewallCommand">
      <tag name="console.command" command="debug:firewall"/>
      <tag name="container.no_preload"/>
      <argument>%security.firewalls%</argument>
      <argument type="service" id=".service_locator.IEeEty."/>
      <argument type="service" id=".service_locator.im8QGPA"/>
      <argument type="collection">
        <argument key="api" type="collection">
          <argument type="service" id="security.authenticator.jwt.api"/>
        </argument>
        <argument key="main" type="collection">
          <argument type="service" id="security.authenticator.json_login.main"/>
        </argument>
      </argument>
      <argument>false</argument>
      <call method="setName">
        <argument>debug:firewall</argument>
      </call>
      <call method="setDescription">
        <argument>Display information about your security firewall(s)</argument>
      </call>
    </service>
    <service id="security.user.provider.concrete.app_user_provider" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider">
      <argument type="service" id="doctrine"/>
      <argument>App\Entity\User</argument>
      <argument>email</argument>
      <argument>null</argument>
    </service>
    <service id="security.firewall.map.config.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig">
      <argument>dev</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.kLbKLHa</argument>
      <argument>false</argument>
      <argument>false</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id=".security.request_matcher.q1UFWmc" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/(_(profiler|wdt)|css|images|js)/</argument>
    </service>
    <service id=".security.request_matcher.kLbKLHa" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.q1UFWmc"/>
      </argument>
    </service>
    <service id="security.firewall.map.context.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext">
      <argument type="iterator"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.dev"/>
    </service>
    <service id="security.firewall.map.config.api" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig">
      <argument>api</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.FbeHDom</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>security.user.provider.concrete.app_user_provider</argument>
      <argument>null</argument>
      <argument>security.authenticator.jwt.api</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection">
        <argument>jwt</argument>
      </argument>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id=".security.request_matcher.DIgNAIv" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/api/</argument>
    </service>
    <service id=".security.request_matcher.FbeHDom" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.DIgNAIv"/>
      </argument>
    </service>
    <service id="security.listener.api.user_provider" class="Symfony\Component\Security\Http\EventListener\UserProviderListener">
      <tag name="kernel.event_listener" dispatcher="debug.security.event_dispatcher.api" event="Symfony\Component\Security\Http\Event\CheckPassportEvent" priority="2048" method="checkPassport"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
    </service>
    <service id="security.user_checker.chain.api" class="Symfony\Component\Security\Core\User\ChainUserChecker">
      <argument type="tagged_iterator" tag="security.user_checker.api"/>
    </service>
    <service id="security.authenticator.jwt.api" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authenticator\JWTAuthenticator">
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      <argument>null</argument>
    </service>
    <service id="security.authenticator.manager.api" class="Symfony\Component\Security\Http\Authentication\AuthenticatorManager">
      <tag name="monolog.logger" channel="security"/>
      <argument type="collection">
        <argument type="service" id="security.authenticator.jwt.api"/>
      </argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.event_dispatcher.api"/>
      <argument>api</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="debug.security.firewall.authenticator.api" class="Symfony\Component\Security\Http\Authenticator\Debug\TraceableAuthenticatorManagerListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="security.firewall.authenticator.api" inner="debug.security.firewall.authenticator.api.inner"/>
      <argument type="service" id="debug.security.firewall.authenticator.api.inner"/>
    </service>
    <service id="security.listener.user_checker.api" class="Symfony\Component\Security\Http\EventListener\UserCheckerListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.api"/>
      <argument type="service" id="security.user_checker"/>
    </service>
    <service id="security.exception_listener.api" class="Symfony\Component\Security\Http\Firewall\ExceptionListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument>api</argument>
      <argument type="service" id="security.authenticator.jwt.api"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id=".service_locator.5y4U6aa" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.authenticator.jwt.api" type="service_closure" id="security.authenticator.jwt.api"/>
      </argument>
    </service>
    <service id="security.firewall.map.context.api" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext">
      <argument type="iterator">
        <argument type="service" id="security.channel_listener"/>
        <argument type="service" id="debug.security.firewall.authenticator.api"/>
        <argument type="service" id="security.access_listener"/>
      </argument>
      <argument type="service" id="security.exception_listener.api"/>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.api"/>
    </service>
    <service id="security.firewall.map.config.main" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig">
      <argument>main</argument>
      <argument>security.user_checker</argument>
      <argument>null</argument>
      <argument>true</argument>
      <argument>false</argument>
      <argument>security.user.provider.concrete.app_user_provider</argument>
      <argument>main</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection">
        <argument>json_login</argument>
      </argument>
      <argument>null</argument>
      <argument type="collection">
        <argument key="path">app_logout</argument>
        <argument key="invalidate_session">true</argument>
        <argument key="enable_csrf">null</argument>
        <argument key="csrf_token_id">logout</argument>
        <argument key="csrf_parameter">_csrf_token</argument>
        <argument key="target">/</argument>
        <argument key="clear_site_data" type="collection"/>
        <argument key="delete_cookies" type="collection"/>
      </argument>
    </service>
    <service id="security.listener.main.user_provider" class="Symfony\Component\Security\Http\EventListener\UserProviderListener">
      <tag name="kernel.event_listener" dispatcher="debug.security.event_dispatcher.main" event="Symfony\Component\Security\Http\Event\CheckPassportEvent" priority="2048" method="checkPassport"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
    </service>
    <service id="security.user_checker.chain.main" class="Symfony\Component\Security\Core\User\ChainUserChecker">
      <argument type="tagged_iterator" tag="security.user_checker.main"/>
    </service>
    <service id="security.context_listener.0" class="Symfony\Component\Security\Http\Firewall\ContextListener">
      <tag name="kernel.event_listener" event="kernel.response" method="onKernelResponse"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <argument>main</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.security.event_dispatcher.main"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="collection">
        <argument type="service" id="security.token_storage"/>
        <argument>enableUsageTracking</argument>
      </argument>
    </service>
    <service id="security.listener.session.main" class="Symfony\Component\Security\Http\EventListener\SessionStrategyListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.main"/>
      <argument type="service" id="security.authentication.session_strategy"/>
    </service>
    <service id="security.logout_listener.main" class="Symfony\Component\Security\Http\Firewall\LogoutListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="service" id="debug.security.event_dispatcher.main"/>
      <argument type="collection">
        <argument key="csrf_parameter">_csrf_token</argument>
        <argument key="csrf_token_id">logout</argument>
        <argument key="logout_path">app_logout</argument>
      </argument>
    </service>
    <service id="security.logout.listener.default.main" class="Symfony\Component\Security\Http\EventListener\DefaultLogoutListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.main"/>
      <argument type="service" id="security.http_utils"/>
      <argument>/</argument>
    </service>
    <service id="security.logout.listener.session.main" class="Symfony\Component\Security\Http\EventListener\SessionLogoutListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.main"/>
    </service>
    <service id="security.authenticator.json_login.main" class="Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator">
      <argument type="service" id="security.http_utils"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      <argument type="service" id="security.authentication.success_handler.main.json_login"/>
      <argument type="service" id="security.authentication.failure_handler.main.json_login"/>
      <argument type="collection">
        <argument key="check_path">app_login</argument>
        <argument key="username_path">email</argument>
        <argument key="password_path">password</argument>
        <argument key="use_forward">false</argument>
        <argument key="require_previous_session">false</argument>
        <argument key="login_path">/login</argument>
      </argument>
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="security.authentication.success_handler.main.json_login" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler">
      <argument type="service">
        <service class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler">
          <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
          <argument type="service" id="debug.event_dispatcher"/>
          <argument type="collection"/>
          <argument>true</argument>
        </service>
      </argument>
      <argument type="collection"/>
      <argument>main</argument>
    </service>
    <service id="security.authentication.failure_handler.main.json_login" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler">
      <argument type="service">
        <service class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler">
          <argument type="service" id="debug.event_dispatcher"/>
          <argument>null</argument>
        </service>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="security.authenticator.manager.main" class="Symfony\Component\Security\Http\Authentication\AuthenticatorManager">
      <tag name="monolog.logger" channel="security"/>
      <argument type="collection">
        <argument type="service" id="security.authenticator.json_login.main"/>
      </argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.event_dispatcher.main"/>
      <argument>main</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="debug.security.firewall.authenticator.main" class="Symfony\Component\Security\Http\Authenticator\Debug\TraceableAuthenticatorManagerListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="security.firewall.authenticator.main" inner="debug.security.firewall.authenticator.main.inner"/>
      <argument type="service" id="debug.security.firewall.authenticator.main.inner"/>
    </service>
    <service id="security.listener.user_checker.main" class="Symfony\Component\Security\Http\EventListener\UserCheckerListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.main"/>
      <argument type="service" id="security.user_checker"/>
    </service>
    <service id="security.exception_listener.main" class="Symfony\Component\Security\Http\Firewall\ExceptionListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument>main</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id=".service_locator.AKOPFXc" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.authenticator.json_login.main" type="service_closure" id="security.authenticator.json_login.main"/>
      </argument>
    </service>
    <service id="security.firewall.map.context.main" class="Symfony\Bundle\SecurityBundle\Security\LazyFirewallContext">
      <argument type="iterator">
        <argument type="service" id="security.channel_listener"/>
        <argument type="service" id="security.context_listener.0"/>
        <argument type="service" id="debug.security.firewall.authenticator.main"/>
        <argument type="service" id="security.access_listener"/>
      </argument>
      <argument type="service" id="security.exception_listener.main"/>
      <argument type="service" id="security.logout_listener.main"/>
      <argument type="service" id="security.firewall.map.config.main"/>
      <argument type="service" id="security.untracked_token_storage"/>
    </service>
    <service id=".service_locator.IEeEty." class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.firewall.map.context.api" type="service_closure" id="security.firewall.map.context.api"/>
        <argument key="security.firewall.map.context.dev" type="service_closure" id="security.firewall.map.context.dev"/>
        <argument key="security.firewall.map.context.main" type="service_closure" id="security.firewall.map.context.main"/>
      </argument>
    </service>
    <service id=".security.request_matcher.QiBF6kJ" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/$</argument>
    </service>
    <service id=".security.request_matcher.BrFfR3a" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.QiBF6kJ"/>
      </argument>
    </service>
    <service id=".security.request_matcher.Npgylbc" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/docs</argument>
    </service>
    <service id=".security.request_matcher..58rygz" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.Npgylbc"/>
      </argument>
    </service>
    <service id=".security.request_matcher.xKZVXt1" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/login</argument>
    </service>
    <service id=".security.request_matcher.I_Wy6An" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.xKZVXt1"/>
      </argument>
    </service>
    <service id=".security.request_matcher.obhk0jm" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/admin</argument>
    </service>
    <service id=".security.request_matcher.28NqKnb" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.obhk0jm"/>
      </argument>
    </service>
    <service id="security.command.user_password_hash" class="Symfony\Component\PasswordHasher\Command\UserPasswordHashCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="security.password_hasher_factory"/>
      <argument type="collection">
        <argument>Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface</argument>
      </argument>
      <call method="setName">
        <argument>security:hash-password</argument>
      </call>
      <call method="setDescription">
        <argument>Hash a user password</argument>
      </call>
    </service>
    <service id="nelmio_cors.cors_listener" class="Nelmio\CorsBundle\EventListener\CorsListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="250"/>
      <tag name="kernel.event_listener" event="kernel.response" method="onKernelResponse" priority="0"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="nelmio_cors.options_resolver"/>
    </service>
    <service id="nelmio_cors.options_resolver" class="Nelmio\CorsBundle\Options\Resolver">
      <argument type="collection">
        <argument type="service" id="nelmio_cors.options_provider.config"/>
      </argument>
    </service>
    <service id="nelmio_cors.options_provider.config" class="Nelmio\CorsBundle\Options\ConfigProvider">
      <tag name="nelmio_cors.options_provider" priority="-1"/>
      <argument>%nelmio_cors.map%</argument>
      <argument>%nelmio_cors.defaults%</argument>
    </service>
    <service id="nelmio_cors.cacheable_response_vary_listener" class="Nelmio\CorsBundle\EventListener\CacheableResponseVaryListener">
      <tag name="kernel.event_listener" event="kernel.response" method="onResponse" priority="-10"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="api_platform.listener.exception" class="ApiPlatform\Symfony\EventListener\ExceptionListener">
      <tag name="monolog.logger" channel="request"/>
      <tag name="kernel.event_listener" event="kernel.exception" method="onKernelException" priority="-96"/>
      <argument type="service" id="api_platform.error_listener" on-invalid="null"/>
    </service>
    <service id="api_platform.cache_warmer.cache_pool_clearer" class="ApiPlatform\Symfony\Bundle\CacheWarmer\CachePoolClearerCacheWarmer">
      <tag name="kernel.cache_warmer" priority="64"/>
      <argument type="service" id="cache.system_clearer"/>
      <argument type="collection">
        <argument>api_platform.cache.metadata.property</argument>
        <argument>api_platform.cache.metadata.resource</argument>
        <argument>api_platform.cache.metadata.resource_collection</argument>
        <argument>api_platform.cache.route_name_resolver</argument>
        <argument>api_platform.cache.identifiers_extractor</argument>
        <argument>api_platform.elasticsearch.cache.metadata.document</argument>
      </argument>
    </service>
    <service id="api_platform.symfony.main_controller" class="ApiPlatform\Symfony\Controller\MainController" public="true">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.state_provider.content_negotiation"/>
      <argument type="service" id="api_platform.state_processor.write"/>
      <argument type="service" id="api_platform.uri_variables.converter" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger" on-invalid="ignore"/>
    </service>
    <service id="api_platform.negotiator" class="Negotiation\Negotiator"/>
    <service id="api_platform.resource_class_resolver" class="ApiPlatform\Metadata\ResourceClassResolver">
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
    </service>
    <service id="api_platform.router" class="ApiPlatform\Symfony\Routing\Router">
      <argument type="service" id="router.default"/>
      <argument>1</argument>
    </service>
    <service id="api_platform.serializer.context_builder.filter" class="ApiPlatform\Serializer\SerializerFilterContextBuilder">
      <tag name="container.decorator" id="api_platform.serializer.context_builder" inner="api_platform.serializer.context_builder.filter.inner"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.filter_locator"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter.inner"/>
    </service>
    <service id="api_platform.serializer.property_filter" class="ApiPlatform\Serializer\Filter\PropertyFilter" abstract="true">
      <argument>properties</argument>
      <argument>false</argument>
      <argument>null</argument>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.serializer.group_filter" class="ApiPlatform\Serializer\Filter\GroupFilter" abstract="true"/>
    <service id="api_platform.serializer.normalizer.item" class="ApiPlatform\Serializer\ItemNormalizer">
      <tag name="serializer.normalizer" priority="-895"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory" on-invalid="ignore"/>
      <argument>null</argument>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached" on-invalid="ignore"/>
      <argument type="service" id="api_platform.security.resource_access_checker" on-invalid="ignore"/>
    </service>
    <service id="api_platform.serializer.mapping.class_metadata_factory" class="ApiPlatform\Serializer\Mapping\Factory\ClassMetadataFactory">
      <tag name="container.decorator" id="serializer.mapping.class_metadata_factory" inner="api_platform.serializer.mapping.class_metadata_factory.inner"/>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory.inner"/>
    </service>
    <service id="api_platform.path_segment_name_generator.underscore" class="ApiPlatform\Operation\UnderscorePathSegmentNameGenerator"/>
    <service id="api_platform.path_segment_name_generator.dash" class="ApiPlatform\Operation\DashPathSegmentNameGenerator"/>
    <service id="api_platform.metadata.path_segment_name_generator.underscore" class="ApiPlatform\Metadata\Operation\UnderscorePathSegmentNameGenerator"/>
    <service id="api_platform.metadata.path_segment_name_generator.dash" class="ApiPlatform\Metadata\Operation\DashPathSegmentNameGenerator"/>
    <service id="api_platform.action.placeholder" class="ApiPlatform\Action\PlaceholderAction" public="true"/>
    <service id="api_platform.action.not_found" class="ApiPlatform\Action\NotFoundAction" public="true"/>
    <service id="api_platform.action.not_exposed" class="ApiPlatform\Action\NotExposedAction" public="true"/>
    <service id="api_platform.action.entrypoint" class="ApiPlatform\Documentation\Action\EntrypointAction" public="true">
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.state_provider.content_negotiation" on-invalid="null"/>
      <argument type="service" id="api_platform.state_processor.write" on-invalid="null"/>
      <argument>%api_platform.docs_formats%</argument>
    </service>
    <service id="api_platform.action.documentation" class="ApiPlatform\Documentation\Action\DocumentationAction" public="true">
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument>Hello API Platform</argument>
      <argument></argument>
      <argument>1.0.0</argument>
      <argument type="service" id="lexik_jwt_authentication.api_platform.openapi.factory" on-invalid="null"/>
      <argument type="service" id="api_platform.state_provider.content_negotiation" on-invalid="null"/>
      <argument type="service" id="api_platform.state_processor.write" on-invalid="null"/>
      <argument type="service" id="api_platform.negotiator" on-invalid="null"/>
      <argument>%api_platform.docs_formats%</argument>
    </service>
    <service id="api_platform.action.exception" class="ApiPlatform\Action\ExceptionAction" public="true">
      <argument type="service" id="debug.serializer"/>
      <argument>%api_platform.error_formats%</argument>
      <argument>%api_platform.exception_to_status%</argument>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    </service>
    <service id="api_platform.cache.route_name_resolver" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="api_platform.cache.route_name_resolver.recorder_inner"/>
    </service>
    <service id="api_platform.route_loader" class="ApiPlatform\Symfony\Routing\ApiLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="service_container"/>
      <argument>%api_platform.formats%</argument>
      <argument>%api_platform.resource_class_directories%</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="api_platform.symfony.iri_converter.skolem" class="ApiPlatform\Symfony\Routing\SkolemIriConverter">
      <argument type="service" id="api_platform.router"/>
    </service>
    <service id="api_platform.api.identifiers_extractor" class="ApiPlatform\Metadata\IdentifiersExtractor">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="api_platform.uri_variables.converter" class="ApiPlatform\Api\UriVariablesConverter">
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="tagged_iterator" tag="api_platform.uri_variables.transformer"/>
    </service>
    <service id="api_platform.uri_variables.transformer.integer" class="ApiPlatform\Api\UriVariableTransformer\IntegerUriVariableTransformer">
      <tag name="api_platform.uri_variables.transformer" priority="-100"/>
    </service>
    <service id="api_platform.uri_variables.transformer.date_time" class="ApiPlatform\Api\UriVariableTransformer\DateTimeUriVariableTransformer">
      <tag name="api_platform.uri_variables.transformer" priority="-100"/>
    </service>
    <service id="api_platform.symfony.iri_converter" class="ApiPlatform\Symfony\Routing\IriConverter">
      <argument type="service" id="api_platform.state_provider.locator"/>
      <argument type="service" id="api_platform.router"/>
      <argument type="service" id="api_platform.api.identifiers_extractor"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.uri_variables.converter"/>
      <argument type="service" id="api_platform.symfony.iri_converter.skolem"/>
      <argument type="service" id="api_platform.metadata.operation.metadata_factory"/>
    </service>
    <service id="api_platform.error_listener" class="ApiPlatform\Symfony\EventListener\ErrorListener">
      <argument key="controller">api_platform.symfony.main_controller</argument>
      <argument key="logger" type="service" id="monolog.logger" on-invalid="null"/>
      <argument key="debug">true</argument>
      <argument key="resourceMetadataCollectionFactory" type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument key="errorFormats">%api_platform.error_formats%</argument>
      <argument key="exceptionToStatus">%api_platform.exception_to_status%</argument>
      <argument key="identifiersExtractor" type="service" id="api_platform.api.identifiers_extractor"/>
      <argument key="resourceClassResolver" type="service" id="api_platform.resource_class_resolver"/>
      <argument key="problemCompliantErrors">false</argument>
    </service>
    <service id="api_platform.state_provider.locator" class="ApiPlatform\State\CallableProvider">
      <argument type="service" id=".service_locator.LX5ZkG."/>
    </service>
    <service id="api_platform.state_processor.locator" class="ApiPlatform\State\CallableProcessor">
      <argument type="service" id=".service_locator.ALB1BEI"/>
    </service>
    <service id="api_platform.state_provider.content_negotiation" class="ApiPlatform\State\Provider\ContentNegotiationProvider">
      <argument type="service" id="api_platform.state_provider.access_checker.post_validate"/>
      <argument type="service" id="api_platform.negotiator"/>
      <argument>%api_platform.formats%</argument>
      <argument>%api_platform.error_formats%</argument>
    </service>
    <service id="api_platform.state_processor.add_link_header" class="ApiPlatform\State\Processor\AddLinkHeaderProcessor">
      <argument type="service" id="api_platform.state_processor.add_link_header.inner"/>
    </service>
    <service id="api_platform.state_processor.serialize" class="ApiPlatform\State\Processor\SerializeProcessor">
      <argument type="service" id="api_platform.hydra.processor.link"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter"/>
    </service>
    <service id="api_platform.state_processor.write" class="ApiPlatform\State\Processor\WriteProcessor">
      <argument type="service" id="api_platform.state_processor.serialize"/>
      <argument type="service" id="api_platform.state_processor.locator"/>
    </service>
    <service id="api_platform.pagination" class="ApiPlatform\State\Pagination\Pagination">
      <argument>%api_platform.collection.pagination%</argument>
      <argument>%api_platform.graphql.collection.pagination%</argument>
    </service>
    <service id="api_platform.serializer_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="serializer" type="service_closure" id="debug.serializer"/>
      </argument>
    </service>
    <service id="api_platform.pagination_options" class="ApiPlatform\State\Pagination\PaginationOptions">
      <argument>true</argument>
      <argument>page</argument>
      <argument>false</argument>
      <argument>itemsPerPage</argument>
      <argument>false</argument>
      <argument>pagination</argument>
      <argument>30</argument>
      <argument>null</argument>
      <argument>false</argument>
      <argument>false</argument>
      <argument>partial</argument>
    </service>
    <service id="api_platform.state_provider.create" class="ApiPlatform\State\CreateProvider">
      <tag name="api_platform.state_provider" key="ApiPlatform\State\CreateProvider"/>
      <tag name="api_platform.state_provider" key="api_platform.state_provider.create"/>
      <argument type="service" id="api_platform.state_provider.locator"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    </service>
    <service id="api_platform.state_provider.object" class="ApiPlatform\State\ObjectProvider">
      <tag name="api_platform.state_provider" key="ApiPlatform\State\ObjectProvider"/>
      <tag name="api_platform.state_provider" key="api_platform.state_provider.object"/>
    </service>
    <service id="api_platform.filter_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="api_platform.listener.request.add_format" class="ApiPlatform\Symfony\EventListener\AddFormatListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="28"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="api_platform.negotiator"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument>%api_platform.formats%</argument>
      <argument>%api_platform.error_formats%</argument>
      <argument>%api_platform.docs_formats%</argument>
      <argument>true</argument>
    </service>
    <service id="api_platform.listener.request.read" class="ApiPlatform\Symfony\EventListener\ReadListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="4"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="api_platform.state_provider.locator"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter"/>
      <argument type="service" id="api_platform.uri_variables.converter"/>
    </service>
    <service id="api_platform.listener.view.write" class="ApiPlatform\Symfony\EventListener\WriteListener">
      <tag name="kernel.event_listener" event="kernel.view" method="onKernelView" priority="32"/>
      <argument type="service" id="api_platform.state_processor.locator"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.uri_variables.converter"/>
    </service>
    <service id="api_platform.listener.request.deserialize" class="ApiPlatform\Symfony\EventListener\DeserializeListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="2"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument>null</argument>
    </service>
    <service id="api_platform.listener.view.serialize" class="ApiPlatform\Symfony\EventListener\SerializeListener">
      <tag name="kernel.event_listener" event="kernel.view" method="onKernelView" priority="16"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    </service>
    <service id="api_platform.listener.view.respond" class="ApiPlatform\Symfony\EventListener\RespondListener">
      <tag name="kernel.event_listener" event="kernel.view" method="onKernelView" priority="8"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.symfony.iri_converter" on-invalid="null"/>
    </service>
    <service id="api_platform.listener.exception.validation" class="ApiPlatform\Symfony\Validator\EventListener\ValidationExceptionListener">
      <tag name="kernel.event_listener" event="kernel.exception" method="onKernelException"/>
      <argument type="service" id="debug.serializer"/>
      <argument>%api_platform.error_formats%</argument>
      <argument>%api_platform.exception_to_status%</argument>
      <argument type="service" id="api_platform.listener.exception" on-invalid="null"/>
    </service>
    <service id="api_platform.cache.metadata.resource" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="api_platform.cache.metadata.resource.recorder_inner"/>
    </service>
    <service id="api_platform.metadata.resource.name_collection_factory.cached" class="ApiPlatform\Metadata\Resource\Factory\CachedResourceNameCollectionFactory">
      <argument type="service" id="api_platform.cache.metadata.resource"/>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.yaml"/>
    </service>
    <service id="api_platform.metadata.resource.name_collection_factory.xml" class="ApiPlatform\Metadata\Resource\Factory\ExtractorResourceNameCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource_extractor.xml"/>
    </service>
    <service id="api_platform.metadata.resource.name_collection_factory.attributes" class="ApiPlatform\Metadata\Resource\Factory\AttributesResourceNameCollectionFactory">
      <argument>%api_platform.resource_class_directories%</argument>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.xml"/>
    </service>
    <service id="api_platform.metadata.resource.name_collection_factory.class_name" class="ApiPlatform\Metadata\Resource\Factory\ClassNameResourceNameCollectionFactory">
      <argument>%api_platform.class_name_resources%</argument>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.attributes"/>
    </service>
    <service id="api_platform.metadata.property.name_collection_factory.property_info" class="ApiPlatform\Metadata\Property\Factory\PropertyInfoPropertyNameCollectionFactory">
      <argument type="service" id="property_info"/>
    </service>
    <service id="api_platform.metadata.property.name_collection_factory.cached" class="ApiPlatform\Metadata\Property\Factory\CachedPropertyNameCollectionFactory">
      <argument type="service" id="api_platform.cache.metadata.property"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.yaml"/>
    </service>
    <service id="api_platform.metadata.property.name_collection_factory.xml" class="ApiPlatform\Metadata\Property\Factory\ExtractorPropertyNameCollectionFactory">
      <argument type="service" id="api_platform.metadata.property_extractor.xml"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.property_info"/>
    </service>
    <service id="api_platform.metadata.resource_extractor.xml" class="ApiPlatform\Metadata\Extractor\XmlResourceExtractor">
      <argument type="collection"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="api_platform.metadata.property_extractor.xml" class="ApiPlatform\Metadata\Extractor\XmlPropertyExtractor">
      <argument type="collection"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.property_info" class="ApiPlatform\Metadata\Property\Factory\PropertyInfoPropertyMetadataFactory">
      <argument type="service" id="property_info"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.xml"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.attribute" class="ApiPlatform\Metadata\Property\Factory\AttributePropertyMetadataFactory">
      <argument type="service" id="api_platform.metadata.property.metadata_factory.identifier"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.serializer" class="ApiPlatform\Metadata\Property\Factory\SerializerPropertyMetadataFactory">
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
      <argument type="service" id="api_platform.doctrine.orm.metadata.property.metadata_factory"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.cached" class="ApiPlatform\Metadata\Property\Factory\CachedPropertyMetadataFactory">
      <argument type="service" id="api_platform.cache.metadata.property"/>
      <argument type="service" id="api_platform.json_schema.metadata.property.metadata_factory.schema"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.default_property" class="ApiPlatform\Metadata\Property\Factory\DefaultPropertyMetadataFactory">
      <argument type="service" id="api_platform.metadata.property.metadata_factory.serializer"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.identifier" class="ApiPlatform\Metadata\Property\Factory\IdentifierPropertyMetadataFactory">
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.default_property"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.xml" class="ApiPlatform\Metadata\Property\Factory\ExtractorPropertyMetadataFactory">
      <argument type="service" id="api_platform.metadata.property_extractor.xml"/>
    </service>
    <service id="api_platform.cache.metadata.property" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="api_platform.cache.metadata.property.recorder_inner"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.attributes" class="ApiPlatform\Metadata\Resource\Factory\AttributesResourceMetadataCollectionFactory">
      <argument>null</argument>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <argument>%api_platform.defaults%</argument>
      <argument>true</argument>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.xml" class="ApiPlatform\Metadata\Resource\Factory\ExtractorResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource_extractor.xml"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.deprecations"/>
      <argument>%api_platform.defaults%</argument>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation" class="ApiPlatform\Metadata\Resource\Factory\NotExposedOperationResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.doctrine.orm.metadata.resource.link_factory"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.yaml"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.uri_template" class="ApiPlatform\Metadata\Resource\Factory\UriTemplateResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.doctrine.orm.metadata.resource.link_factory"/>
      <argument type="service" id="api_platform.metadata.path_segment_name_generator.underscore"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.main_controller" class="ApiPlatform\Metadata\Resource\Factory\MainControllerResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.uri_template"/>
      <argument>true</argument>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.link" class="ApiPlatform\Metadata\Resource\Factory\LinkResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.doctrine.orm.metadata.resource.link_factory"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.main_controller"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.operation_name" class="ApiPlatform\Metadata\Resource\Factory\OperationNameResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.link"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.input_output" class="ApiPlatform\Metadata\Resource\Factory\InputOutputResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.operation_name"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.formats" class="ApiPlatform\Metadata\Resource\Factory\FormatsResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.input_output"/>
      <argument>%api_platform.formats%</argument>
      <argument>%api_platform.patch_formats%</argument>
      <argument>%api_platform.error_formats%</argument>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.filters" class="ApiPlatform\Metadata\Resource\Factory\FiltersResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.formats"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.alternate_uri" class="ApiPlatform\Metadata\Resource\Factory\AlternateUriResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.filters"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.deprecations" class="ApiPlatform\Metadata\Resource\Factory\DeprecationResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.attributes"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.cached" class="ApiPlatform\Metadata\Resource\Factory\CachedResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.cache.metadata.resource_collection"/>
      <argument type="service" id="api_platform.doctrine.orm.metadata.resource.metadata_collection_factory"/>
    </service>
    <service id="api_platform.cache.metadata.resource_collection" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="api_platform.cache.metadata.resource_collection.recorder_inner"/>
    </service>
    <service id="api_platform.metadata.operation.metadata_factory" class="ApiPlatform\Metadata\Operation\Factory\OperationMetadataFactory">
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.php_doc" class="ApiPlatform\Metadata\Resource\Factory\PhpDocResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.alternate_uri"/>
    </service>
    <service id="api_platform.metadata.resource_extractor.yaml" class="ApiPlatform\Metadata\Extractor\YamlResourceExtractor">
      <argument type="collection"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="api_platform.metadata.property_extractor.yaml" class="ApiPlatform\Metadata\Extractor\YamlPropertyExtractor">
      <argument type="collection"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="api_platform.metadata.resource.name_collection_factory.yaml" class="ApiPlatform\Metadata\Resource\Factory\ExtractorResourceNameCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource_extractor.yaml"/>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.class_name"/>
    </service>
    <service id="api_platform.metadata.resource.metadata_collection_factory.yaml" class="ApiPlatform\Metadata\Resource\Factory\ExtractorResourceMetadataCollectionFactory">
      <argument type="service" id="api_platform.metadata.resource_extractor.yaml"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.xml"/>
      <argument>%api_platform.defaults%</argument>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.yaml" class="ApiPlatform\Metadata\Property\Factory\ExtractorPropertyMetadataFactory">
      <argument type="service" id="api_platform.metadata.property_extractor.yaml"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.attribute"/>
    </service>
    <service id="api_platform.metadata.property.name_collection_factory.yaml" class="ApiPlatform\Metadata\Property\Factory\ExtractorPropertyNameCollectionFactory">
      <argument type="service" id="api_platform.metadata.property_extractor.yaml"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.xml"/>
    </service>
    <service id="api_platform.json_schema.type_factory" class="ApiPlatform\JsonSchema\TypeFactory">
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <call method="setSchemaFactory">
        <argument type="service" id="api_platform.hydra.json_schema.schema_factory"/>
      </call>
    </service>
    <service id="api_platform.json_schema.json_schema_generate_command" class="ApiPlatform\JsonSchema\Command\JsonSchemaGenerateCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="api_platform.hydra.json_schema.schema_factory"/>
      <argument>%api_platform.formats%</argument>
      <call method="setName">
        <argument>api:json-schema:generate</argument>
      </call>
    </service>
    <service id="api_platform.json_schema.metadata.property.metadata_factory.schema" class="ApiPlatform\JsonSchema\Metadata\Property\Factory\SchemaPropertyMetadataFactory">
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.validator"/>
    </service>
    <service id=".2_ObjectNormalizer~VVjaGs4" class="Symfony\Component\Serializer\Normalizer\ObjectNormalizer">
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="property_info"/>
    </service>
    <service id=".1_Serializer~VVjaGs4" class="Symfony\Component\Serializer\Serializer">
      <argument type="collection">
        <argument type="service" id=".2_ObjectNormalizer~VVjaGs4"/>
      </argument>
      <argument type="collection">
        <argument type="service" id="serializer.encoder.json"/>
      </argument>
    </service>
    <service id="api_platform.openapi.options" class="ApiPlatform\OpenApi\Options">
      <argument>Hello API Platform</argument>
      <argument></argument>
      <argument>1.0.0</argument>
      <argument>false</argument>
      <argument>oauth2</argument>
      <argument>application</argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument>%api_platform.swagger.api_keys%</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="api_platform.openapi.command" class="ApiPlatform\Symfony\Bundle\Command\OpenApiCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="lexik_jwt_authentication.api_platform.openapi.factory"/>
      <argument type="service" id="debug.serializer"/>
      <call method="setName">
        <argument>api:openapi:export</argument>
      </call>
    </service>
    <service id="api_platform.openapi.normalizer.api_gateway" class="ApiPlatform\OpenApi\Serializer\ApiGatewayNormalizer">
      <tag name="serializer.normalizer" priority="-780"/>
      <tag name="container.decorator" id="api_platform.openapi.normalizer" inner="api_platform.openapi.normalizer.api_gateway.inner"/>
      <argument type="service" id="api_platform.openapi.normalizer.api_gateway.inner"/>
    </service>
    <service id="api_platform.jsonopenapi.encoder" class="ApiPlatform\Serializer\JsonEncoder">
      <tag name="serializer.encoder"/>
      <argument>jsonopenapi</argument>
      <argument>null</argument>
    </service>
    <service id="api_platform.yamlopenapi.encoder" class="ApiPlatform\Serializer\YamlEncoder">
      <tag name="serializer.encoder"/>
      <argument>yamlopenapi</argument>
      <argument type="service" id="serializer.encoder.yaml" on-invalid="null"/>
    </service>
    <service id="api_platform.swagger_ui.context" class="ApiPlatform\Symfony\Bundle\SwaggerUi\SwaggerUiContext">
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>null</argument>
      <argument type="collection"/>
    </service>
    <service id="api_platform.swagger_ui.provider" class="ApiPlatform\Symfony\Bundle\SwaggerUi\SwaggerUiProvider">
      <argument type="service" id="api_platform.swagger_ui.provider.inner"/>
      <argument type="service" id="lexik_jwt_authentication.api_platform.openapi.factory"/>
    </service>
    <service id="api_platform.swagger_ui.processor" class="ApiPlatform\Symfony\Bundle\SwaggerUi\SwaggerUiProcessor">
      <tag name="api_platform.state_processor" priority="-100" key="api_platform.swagger_ui.processor"/>
      <argument type="service" id="twig" on-invalid="null"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.openapi.options"/>
      <argument type="service" id="api_platform.swagger_ui.context"/>
      <argument>%api_platform.docs_formats%</argument>
      <argument></argument>
      <argument></argument>
      <argument>false</argument>
    </service>
    <service id="api_platform.swagger_ui.action" class="ApiPlatform\Symfony\Bundle\SwaggerUi\SwaggerUiAction" public="true">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="twig" on-invalid="null"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="lexik_jwt_authentication.api_platform.openapi.factory"/>
      <argument type="service" id="api_platform.openapi.options"/>
      <argument type="service" id="api_platform.swagger_ui.context"/>
      <argument>%api_platform.docs_formats%</argument>
      <argument></argument>
      <argument></argument>
      <argument>false</argument>
    </service>
    <service id="api_platform.swagger.listener.ui" class="ApiPlatform\Symfony\Bundle\EventListener\SwaggerUiListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="api_platform.jsonld.context_builder" class="ApiPlatform\JsonLd\ContextBuilder">
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.router"/>
      <argument type="service" id="api_platform.symfony.iri_converter.skolem"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
    </service>
    <service id="api_platform.jsonld.normalizer.item" class="ApiPlatform\JsonLd\Serializer\ItemNormalizer">
      <tag name="serializer.normalizer" priority="-890"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.jsonld.context_builder"/>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory" on-invalid="ignore"/>
      <argument type="collection"/>
      <argument type="service" id="api_platform.security.resource_access_checker" on-invalid="ignore"/>
    </service>
    <service id="api_platform.jsonld.normalizer.object" class="ApiPlatform\JsonLd\Serializer\ObjectNormalizer">
      <tag name="serializer.normalizer" priority="-995"/>
      <argument type="service" id="serializer.normalizer.object"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.jsonld.context_builder"/>
    </service>
    <service id="api_platform.jsonld.normalizer.validation_exception" class="ApiPlatform\Symfony\Validator\Serializer\ValidationExceptionNormalizer">
      <tag name="serializer.normalizer" priority="-800"/>
      <argument type="service" id="api_platform.jsonld.normalizer.item"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.jsonld.encoder" class="ApiPlatform\Serializer\JsonEncoder">
      <tag name="serializer.encoder"/>
      <argument>jsonld</argument>
      <argument>null</argument>
    </service>
    <service id="api_platform.jsonld.action.context" class="ApiPlatform\JsonLd\Action\ContextAction" public="true">
      <argument type="service" id="api_platform.jsonld.context_builder"/>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.state_provider.content_negotiation" on-invalid="null"/>
      <argument type="service" id="api_platform.state_processor.write" on-invalid="null"/>
      <argument type="service" id="debug.serializer" on-invalid="null"/>
    </service>
    <service id="api_platform.hydra.listener.response.add_link_header" class="ApiPlatform\Hydra\EventListener\AddLinkHeaderListener">
      <tag name="kernel.event_listener" event="kernel.response" method="onKernelResponse"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="api_platform.router"/>
    </service>
    <service id="api_platform.hydra.json_schema.schema_factory" class="ApiPlatform\Hydra\JsonSchema\SchemaFactory">
      <tag name="container.decorator" id="api_platform.json_schema.schema_factory" inner="api_platform.hydra.json_schema.schema_factory.inner"/>
      <argument type="service" id="api_platform.hydra.json_schema.schema_factory.inner"/>
    </service>
    <service id="api_platform.hydra.normalizer.documentation" class="ApiPlatform\Hydra\Serializer\DocumentationNormalizer">
      <tag name="serializer.normalizer" priority="-800"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.router"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.hydra.processor.link" class="ApiPlatform\Hydra\State\HydraLinkProcessor">
      <argument type="service" id="api_platform.http_cache.processor.add_headers"/>
      <argument type="service" id="api_platform.router"/>
    </service>
    <service id="api_platform.hydra.normalizer.constraint_violation_list" class="ApiPlatform\Hydra\Serializer\ConstraintViolationListNormalizer">
      <tag name="serializer.normalizer" priority="-780"/>
      <argument type="service" id="api_platform.router"/>
      <argument type="collection"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.hydra.normalizer.entrypoint" class="ApiPlatform\Hydra\Serializer\EntrypointNormalizer">
      <tag name="serializer.normalizer" priority="-800"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.router"/>
    </service>
    <service id="api_platform.hydra.normalizer.error" class="ApiPlatform\Hydra\Serializer\ErrorNormalizer">
      <tag name="serializer.normalizer" priority="-800"/>
      <argument type="service" id="api_platform.router"/>
      <argument>true</argument>
      <argument type="collection"/>
      <argument type="service" id="api_platform.jsonld.normalizer.item" on-invalid="null"/>
    </service>
    <service id="api_platform.hydra.normalizer.partial_collection_view" class="ApiPlatform\Hydra\Serializer\PartialCollectionViewNormalizer">
      <argument type="service" id="api_platform.hydra.normalizer.partial_collection_view.inner"/>
      <argument>page</argument>
      <argument>pagination</argument>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="api_platform.hydra.normalizer.collection_filters" class="ApiPlatform\Hydra\Serializer\CollectionFiltersNormalizer">
      <tag name="serializer.normalizer" priority="-985"/>
      <tag name="container.decorator" id="api_platform.hydra.normalizer.collection" inner="api_platform.hydra.normalizer.partial_collection_view.inner"/>
      <argument type="service" id="api_platform.hydra.normalizer.partial_collection_view"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.filter_locator"/>
    </service>
    <service id="api_platform.problem.encoder" class="ApiPlatform\Serializer\JsonEncoder">
      <tag name="serializer.encoder"/>
      <argument>jsonproblem</argument>
    </service>
    <service id="api_platform.problem.normalizer.constraint_violation_list" class="ApiPlatform\Problem\Serializer\ConstraintViolationListNormalizer">
      <tag name="serializer.normalizer" priority="-780"/>
      <argument type="collection"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.problem.normalizer.error" class="ApiPlatform\Problem\Serializer\ErrorNormalizer">
      <tag name="serializer.normalizer" priority="-810"/>
      <argument>true</argument>
      <argument type="collection"/>
      <argument type="service" id="api_platform.serializer.normalizer.item" on-invalid="null"/>
    </service>
    <service id="api_platform.graphql.executor" class="ApiPlatform\GraphQl\Executor">
      <argument>true</argument>
    </service>
    <service id="api_platform.graphql.query_resolver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="api_platform.graphql.mutation_resolver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="api_platform.graphql.resolver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="api_platform.graphql.iterable_type" class="ApiPlatform\GraphQl\Type\Definition\IterableType">
      <tag name="api_platform.graphql.type"/>
    </service>
    <service id="api_platform.graphql.upload_type" class="ApiPlatform\GraphQl\Type\Definition\UploadType">
      <tag name="api_platform.graphql.type"/>
    </service>
    <service id="api_platform.graphql.type_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="api_platform.graphql.iterable_type" type="service_closure" id="api_platform.graphql.iterable_type"/>
        <argument key="api_platform.graphql.upload_type" type="service_closure" id="api_platform.graphql.upload_type"/>
      </argument>
    </service>
    <service id="api_platform.graphql.types_container" class="ApiPlatform\GraphQl\Type\TypesContainer"/>
    <service id="api_platform.graphql.types_factory" class="ApiPlatform\GraphQl\Type\TypesFactory">
      <argument type="service" id="api_platform.graphql.type_locator"/>
      <argument type="collection">
        <argument>api_platform.graphql.iterable_type</argument>
        <argument>api_platform.graphql.upload_type</argument>
      </argument>
    </service>
    <service id="api_platform.graphql.fields_builder_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="api_platform.graphql.fields_builder" type="service_closure" id="api_platform.graphql.fields_builder"/>
      </argument>
    </service>
    <service id="api_platform.graphql.action.entrypoint" class="ApiPlatform\GraphQl\Action\EntrypointAction" public="true">
      <argument type="service" id="api_platform.graphql.schema_builder"/>
      <argument type="service" id="api_platform.graphql.executor"/>
      <argument type="service" id="api_platform.graphql.action.graphiql" on-invalid="null"/>
      <argument type="service" id="api_platform.graphql.action.graphql_playground" on-invalid="null"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.graphql.error_handler"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>graphiql</argument>
    </service>
    <service id="api_platform.graphql.action.graphiql" class="ApiPlatform\GraphQl\Action\GraphiQlAction" public="true">
      <argument type="service" id="twig"/>
      <argument type="service" id="api_platform.router"/>
      <argument>true</argument>
      <argument>Hello API Platform</argument>
      <argument>null</argument>
    </service>
    <service id="api_platform.graphql.action.graphql_playground" class="ApiPlatform\GraphQl\Action\GraphQlPlaygroundAction" public="true">
      <argument type="service" id="twig"/>
      <argument type="service" id="api_platform.router"/>
      <argument>true</argument>
      <argument>Hello API Platform</argument>
      <argument>null</argument>
    </service>
    <service id="api_platform.graphql.error_handler" class="ApiPlatform\GraphQl\Error\ErrorHandler"/>
    <service id="api_platform.graphql.subscription.subscription_identifier_generator" class="ApiPlatform\GraphQl\Subscription\SubscriptionIdentifierGenerator"/>
    <service id="api_platform.graphql.cache.subscription" class="Symfony\Component\Cache\Adapter\TraceableAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="api_platform.graphql.cache.subscription.recorder_inner"/>
    </service>
    <service id="api_platform.graphql.command.export_command" class="ApiPlatform\Symfony\Bundle\Command\GraphQlExportCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="api_platform.graphql.schema_builder"/>
      <call method="setName">
        <argument>api:graphql:export</argument>
      </call>
    </service>
    <service id="api_platform.graphql.type_converter" class="ApiPlatform\GraphQl\Type\TypeConverter">
      <argument type="service" id="api_platform.graphql.type_builder"/>
      <argument type="service" id="api_platform.graphql.types_container"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
    </service>
    <service id="api_platform.graphql.type_builder" class="ApiPlatform\GraphQl\Type\TypeBuilder">
      <argument type="service" id="api_platform.graphql.types_container"/>
      <argument type="service" id="api_platform.graphql.resolver.resource_field"/>
      <argument type="service" id="api_platform.graphql.fields_builder_locator"/>
      <argument type="service" id="api_platform.pagination"/>
    </service>
    <service id="api_platform.graphql.fields_builder" class="ApiPlatform\GraphQl\Type\FieldsBuilder">
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.graphql.types_container"/>
      <argument type="service" id="api_platform.graphql.type_builder"/>
      <argument type="service" id="api_platform.graphql.type_converter"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.item"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.collection" on-invalid="null"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.item_mutation" on-invalid="null"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.item_subscription" on-invalid="null"/>
      <argument type="service" id="api_platform.filter_locator"/>
      <argument type="service" id="api_platform.pagination"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
      <argument>_</argument>
    </service>
    <service id="api_platform.graphql.schema_builder" class="ApiPlatform\GraphQl\Type\SchemaBuilder">
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.graphql.types_factory"/>
      <argument type="service" id="api_platform.graphql.types_container"/>
      <argument type="service" id="api_platform.graphql.fields_builder"/>
    </service>
    <service id="api_platform.graphql.serializer.context_builder" class="ApiPlatform\GraphQl\Serializer\SerializerContextBuilder">
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.graphql.state_provider.resolver" class="ApiPlatform\GraphQl\State\Provider\ResolverProvider">
      <argument type="service" id="api_platform.graphql.state_provider.access_checker.post_validate"/>
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
    </service>
    <service id="api_platform.graphql.state_processor.subscription" class="ApiPlatform\GraphQl\State\Processor\SubscriptionProcessor">
      <argument type="service" id="api_platform.graphql.state_processor.normalize"/>
      <argument type="service" id="api_platform.graphql.subscription.subscription_manager"/>
      <argument>null</argument>
    </service>
    <service id="api_platform.graphql.state_processor.write" class="ApiPlatform\State\Processor\WriteProcessor">
      <argument type="service" id="api_platform.graphql.state_processor.subscription"/>
      <argument type="service" id="api_platform.state_processor.locator"/>
    </service>
    <service id="api_platform.graphql.state_processor.normalize" class="ApiPlatform\GraphQl\State\Processor\NormalizeProcessor">
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder"/>
      <argument type="service" id="api_platform.pagination"/>
    </service>
    <service id="api_platform.graphql.provider.read" class="ApiPlatform\GraphQl\Provider\ReadProvider">
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.state_provider.locator"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder"/>
      <argument>_</argument>
    </service>
    <service id="api_platform.graphql.resolver.resource_field" class="ApiPlatform\GraphQl\Resolver\ResourceFieldResolver">
      <argument type="service" id="api_platform.symfony.iri_converter"/>
    </service>
    <service id="api_platform.graphql.normalizer.item" class="ApiPlatform\GraphQl\Serializer\ItemNormalizer">
      <tag name="serializer.normalizer" priority="-890"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.api.identifiers_extractor"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory" on-invalid="ignore"/>
      <argument>null</argument>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached" on-invalid="ignore"/>
      <argument type="service" id="api_platform.security.resource_access_checker" on-invalid="ignore"/>
    </service>
    <service id="api_platform.graphql.normalizer.object" class="ApiPlatform\GraphQl\Serializer\ObjectNormalizer">
      <tag name="serializer.normalizer" priority="-995"/>
      <argument type="service" id="serializer.normalizer.object"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.api.identifiers_extractor"/>
    </service>
    <service id="api_platform.graphql.subscription.subscription_manager" class="ApiPlatform\GraphQl\Subscription\SubscriptionManager">
      <argument type="service" id="api_platform.graphql.cache.subscription"/>
      <argument type="service" id="api_platform.graphql.subscription.subscription_identifier_generator"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.serialize" on-invalid="ignore"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.graphql.state_processor.normalize" on-invalid="ignore"/>
    </service>
    <service id="api_platform.graphql.normalizer.error" class="ApiPlatform\GraphQl\Serializer\Exception\ErrorNormalizer">
      <tag name="serializer.normalizer" priority="-790"/>
    </service>
    <service id="api_platform.graphql.normalizer.validation_exception" class="ApiPlatform\GraphQl\Serializer\Exception\ValidationExceptionNormalizer">
      <tag name="serializer.normalizer" priority="-780"/>
      <argument>%api_platform.exception_to_status%</argument>
    </service>
    <service id="api_platform.graphql.normalizer.http_exception" class="ApiPlatform\GraphQl\Serializer\Exception\HttpExceptionNormalizer">
      <tag name="serializer.normalizer" priority="-780"/>
    </service>
    <service id="api_platform.graphql.normalizer.runtime_exception" class="ApiPlatform\GraphQl\Serializer\Exception\RuntimeExceptionNormalizer">
      <tag name="serializer.normalizer" priority="-780"/>
    </service>
    <service id="api_platform.graphql.resolver.stage.write" class="ApiPlatform\GraphQl\Resolver\Stage\WriteStage">
      <argument type="service" id="api_platform.state_processor.locator"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder"/>
    </service>
    <service id="api_platform.graphql.resolver.stage.read" class="ApiPlatform\GraphQl\Resolver\Stage\ReadStage">
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.state_provider.locator"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder"/>
      <argument>_</argument>
    </service>
    <service id="api_platform.graphql.resolver.stage.security" class="ApiPlatform\GraphQl\Resolver\Stage\SecurityStage">
      <argument type="service" id="api_platform.security.resource_access_checker" on-invalid="ignore"/>
    </service>
    <service id="api_platform.graphql.resolver.stage.security_post_denormalize" class="ApiPlatform\GraphQl\Resolver\Stage\SecurityPostDenormalizeStage">
      <argument type="service" id="api_platform.security.resource_access_checker" on-invalid="ignore"/>
    </service>
    <service id="api_platform.graphql.resolver.stage.security_post_validation" class="ApiPlatform\GraphQl\Resolver\Stage\SecurityPostValidationStage">
      <argument type="service" id="api_platform.security.resource_access_checker" on-invalid="ignore"/>
    </service>
    <service id="api_platform.graphql.resolver.stage.serialize" class="ApiPlatform\GraphQl\Resolver\Stage\SerializeStage">
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder"/>
      <argument type="service" id="api_platform.pagination"/>
    </service>
    <service id="api_platform.graphql.resolver.stage.deserialize" class="ApiPlatform\GraphQl\Resolver\Stage\DeserializeStage">
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder"/>
    </service>
    <service id="api_platform.graphql.resolver.stage.validate" class="ApiPlatform\GraphQl\Resolver\Stage\ValidateStage">
      <argument type="service" id="api_platform.validator"/>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.collection" class="ApiPlatform\Symfony\GraphQl\Resolver\Factory\DataCollectorResolverFactory">
      <tag name="container.decorator" id="api_platform.graphql.resolver.factory.collection" inner="api_platform.graphql.data_collector.resolver.factory.collection.inner"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.collection.inner"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.item" class="ApiPlatform\Symfony\GraphQl\Resolver\Factory\DataCollectorResolverFactory">
      <tag name="container.decorator" id="api_platform.graphql.resolver.factory.item" inner="api_platform.graphql.data_collector.resolver.factory.item.inner"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.item.inner"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.item_mutation" class="ApiPlatform\Symfony\GraphQl\Resolver\Factory\DataCollectorResolverFactory">
      <tag name="container.decorator" id="api_platform.graphql.resolver.factory.item_mutation" inner="api_platform.graphql.data_collector.resolver.factory.item_mutation.inner"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.item_mutation.inner"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.item_subscription" class="ApiPlatform\Symfony\GraphQl\Resolver\Factory\DataCollectorResolverFactory">
      <tag name="container.decorator" id="api_platform.graphql.resolver.factory.item_subscription" inner="api_platform.graphql.data_collector.resolver.factory.item_subscription.inner"/>
      <argument type="service" id="api_platform.graphql.data_collector.resolver.factory.item_subscription.inner"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
    </service>
    <service id="api_platform.doctrine.metadata_factory" class="Doctrine\Persistence\Mapping\ClassMetadataFactory">
      <factory service="doctrine.orm.default_entity_manager" method="getMetadataFactory"/>
    </service>
    <service id="api_platform.doctrine.orm.state.remove_processor" class="ApiPlatform\Doctrine\Common\State\RemoveProcessor">
      <tag name="api_platform.state_processor" priority="-100" key="api_platform.doctrine.orm.state.remove_processor"/>
      <tag name="api_platform.state_processor" priority="-100" key="ApiPlatform\Doctrine\Common\State\RemoveProcessor"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="api_platform.doctrine.orm.state.persist_processor" class="ApiPlatform\Doctrine\Common\State\PersistProcessor">
      <tag name="api_platform.state_processor" priority="-100" key="api_platform.doctrine.orm.state.persist_processor"/>
      <tag name="api_platform.state_processor" priority="-100" key="ApiPlatform\Doctrine\Common\State\PersistProcessor"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="api_platform.doctrine.orm.order_filter" class="ApiPlatform\Doctrine\Orm\Filter\OrderFilter" abstract="true">
      <argument key="0" type="service" id="doctrine"/>
      <argument key="1">order</argument>
      <argument key="2" type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument key="nameConverter" type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
      <argument key="orderNullsComparison">null</argument>
    </service>
    <service id="api_platform.doctrine.orm.range_filter" class="ApiPlatform\Doctrine\Orm\Filter\RangeFilter" abstract="true">
      <argument key="0" type="service" id="doctrine"/>
      <argument key="1" type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument key="nameConverter" type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.doctrine.orm.date_filter" class="ApiPlatform\Doctrine\Orm\Filter\DateFilter" abstract="true">
      <argument key="0" type="service" id="doctrine"/>
      <argument key="1" type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument key="nameConverter" type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.doctrine.orm.boolean_filter" class="ApiPlatform\Doctrine\Orm\Filter\BooleanFilter" abstract="true">
      <argument key="0" type="service" id="doctrine"/>
      <argument key="1" type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument key="nameConverter" type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.doctrine.orm.numeric_filter" class="ApiPlatform\Doctrine\Orm\Filter\NumericFilter" abstract="true">
      <argument key="0" type="service" id="doctrine"/>
      <argument key="1" type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument key="nameConverter" type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.doctrine.orm.exists_filter" class="ApiPlatform\Doctrine\Orm\Filter\ExistsFilter" abstract="true">
      <argument key="0" type="service" id="doctrine"/>
      <argument key="1" type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument key="existsParameterName">exists</argument>
      <argument key="nameConverter" type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.doctrine.orm.query_extension.eager_loading" class="ApiPlatform\Doctrine\Orm\Extension\EagerLoadingExtension">
      <tag name="api_platform.doctrine.orm.query_extension.item" priority="-8"/>
      <tag name="api_platform.doctrine.orm.query_extension.collection" priority="-18"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument>30</argument>
      <argument>true</argument>
      <argument>false</argument>
      <argument type="service" id="api_platform.serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="api_platform.doctrine.orm.query_extension.filter" class="ApiPlatform\Doctrine\Orm\Extension\FilterExtension">
      <tag name="api_platform.doctrine.orm.query_extension.collection" priority="-16"/>
      <argument type="service" id="api_platform.filter_locator"/>
    </service>
    <service id="api_platform.doctrine.orm.query_extension.filter_eager_loading" class="ApiPlatform\Doctrine\Orm\Extension\FilterEagerLoadingExtension">
      <tag name="api_platform.doctrine.orm.query_extension.collection" priority="-17"/>
      <argument>true</argument>
      <argument type="service" id="api_platform.resource_class_resolver"/>
    </service>
    <service id="api_platform.doctrine.orm.query_extension.pagination" class="ApiPlatform\Doctrine\Orm\Extension\PaginationExtension">
      <tag name="api_platform.doctrine.orm.query_extension.collection" priority="-64"/>
      <argument type="service" id="doctrine"/>
      <argument type="service" id="api_platform.pagination"/>
    </service>
    <service id="api_platform.doctrine.orm.query_extension.order" class="ApiPlatform\Doctrine\Orm\Extension\OrderExtension">
      <tag name="api_platform.doctrine.orm.query_extension.collection" priority="-32"/>
      <argument>ASC</argument>
    </service>
    <service id="api_platform.doctrine.orm.metadata.property.metadata_factory" class="ApiPlatform\Doctrine\Orm\Metadata\Property\DoctrineOrmPropertyMetadataFactory">
      <argument type="service" id="doctrine"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.property_info"/>
    </service>
    <service id="api_platform.doctrine.orm.state.collection_provider" class="ApiPlatform\Doctrine\Orm\State\CollectionProvider">
      <tag name="api_platform.state_provider" priority="-100" key="ApiPlatform\Doctrine\Orm\State\CollectionProvider"/>
      <tag name="api_platform.state_provider" priority="-100" key="api_platform.doctrine.orm.state.collection_provider"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="doctrine"/>
      <argument type="tagged_iterator" tag="api_platform.doctrine.orm.query_extension.collection"/>
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
    </service>
    <service id="api_platform.doctrine.orm.state.item_provider" class="ApiPlatform\Doctrine\Orm\State\ItemProvider">
      <tag name="api_platform.state_provider" priority="-100" key="ApiPlatform\Doctrine\Orm\State\ItemProvider"/>
      <tag name="api_platform.state_provider" priority="-100" key="api_platform.doctrine.orm.state.item_provider"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="doctrine"/>
      <argument type="tagged_iterator" tag="api_platform.doctrine.orm.query_extension.item"/>
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
    </service>
    <service id="api_platform.doctrine.orm.search_filter" class="ApiPlatform\Doctrine\Orm\Filter\SearchFilter" abstract="true">
      <argument key="0" type="service" id="doctrine"/>
      <argument key="1" type="service" id="api_platform.symfony.iri_converter"/>
      <argument key="2" type="service" id="property_accessor"/>
      <argument key="3" type="service" id="monolog.logger" on-invalid="ignore"/>
      <argument key="identifiersExtractor" type="service" id="api_platform.api.identifiers_extractor" on-invalid="ignore"/>
      <argument key="nameConverter" type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.doctrine.orm.metadata.resource.metadata_collection_factory" class="ApiPlatform\Doctrine\Orm\Metadata\Resource\DoctrineOrmResourceCollectionMetadataFactory">
      <argument type="service" id="doctrine"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.php_doc"/>
    </service>
    <service id="api_platform.doctrine.orm.metadata.resource.link_factory" class="ApiPlatform\Doctrine\Orm\Metadata\Resource\DoctrineOrmLinkFactory">
      <tag name="container.decorator" id="api_platform.metadata.resource.link_factory" inner="api_platform.doctrine.orm.metadata.resource.link_factory.inner"/>
      <argument type="service" id="doctrine"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.doctrine.orm.metadata.resource.link_factory.inner"/>
    </service>
    <service id="api_platform.http_cache.processor.add_headers" class="ApiPlatform\HttpCache\State\AddHeadersProcessor">
      <tag name="container.decorator" id="api_platform.state_processor.respond" inner="api_platform.state_processor.add_link_header.inner"/>
      <argument type="service" id="api_platform.state_processor.add_link_header"/>
      <argument>true</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>%api_platform.http_cache.vary%</argument>
      <argument>null</argument>
    </service>
    <service id="api_platform.http_cache.listener.response.configure" class="ApiPlatform\HttpCache\EventListener\AddHeadersListener">
      <tag name="kernel.event_listener" event="kernel.response" method="onKernelResponse" priority="-1"/>
      <tag name="container.hot_path"/>
      <argument>true</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>%api_platform.http_cache.vary%</argument>
      <argument>null</argument>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    </service>
    <service id="api_platform.metadata.property.metadata_factory.validator" class="ApiPlatform\Symfony\Validator\Metadata\Property\ValidatorPropertyMetadataFactory">
      <argument type="service" id="debug.validator"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.yaml"/>
      <argument type="tagged_iterator" tag="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.choice_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaChoiceRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.collection_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaCollectionRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
      <argument type="tagged_iterator" tag="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.count_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaCountRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.greater_than_or_equal_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaGreaterThanOrEqualRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.greater_than_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaGreaterThanRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.length_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaLengthRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.less_than_or_equal_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaLessThanOrEqualRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.less_than_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaLessThanRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.one_of_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaOneOfRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
      <argument type="tagged_iterator" tag="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.range_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaRangeRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.regex_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaRegexRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.format_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaFormat">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.metadata.property_schema.unique_restriction" class="ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaUniqueRestriction">
      <tag name="api_platform.metadata.property_schema_restriction"/>
    </service>
    <service id="api_platform.validator" class="ApiPlatform\Symfony\Validator\Validator">
      <argument type="service" id="debug.validator"/>
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
    </service>
    <service id="api_platform.validator.query_parameter_validator" class="ApiPlatform\Api\QueryParameterValidator\QueryParameterValidator">
      <argument type="service" id="api_platform.filter_locator"/>
    </service>
    <service id="api_platform.state_provider.query_parameter_validate" class="ApiPlatform\Symfony\Validator\State\QueryParameterValidateProvider">
      <argument type="service" id="api_platform.state_provider.access_checker.post_deserialize"/>
      <argument type="service" id="api_platform.validator.query_parameter_validator"/>
    </service>
    <service id="api_platform.serializer.normalizer.validation_exception" class="ApiPlatform\Symfony\Validator\Serializer\ValidationExceptionNormalizer">
      <tag name="serializer.normalizer" priority="-800"/>
      <argument type="service" id="api_platform.serializer.normalizer.item"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.serializer.normalizer.constraint_violation_list" class="ApiPlatform\Symfony\Validator\Serializer\ConstraintViolationListNormalizer">
      <tag name="serializer.normalizer" priority="-900"/>
      <argument type="collection"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
    </service>
    <service id="api_platform.listener.view.validate" class="ApiPlatform\Symfony\EventListener\ValidateListener">
      <tag name="kernel.event_listener" event="kernel.view" method="onKernelView" priority="64"/>
      <argument type="service" id="api_platform.validator"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    </service>
    <service id="api_platform.listener.view.validate_query_parameters" class="ApiPlatform\Symfony\EventListener\QueryParameterValidateListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="16"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="api_platform.validator.query_parameter_validator"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument>true</argument>
    </service>
    <service id="api_platform.data_collector.request" class="ApiPlatform\Symfony\Bundle\DataCollector\RequestDataCollector">
      <tag name="data_collector" template="@ApiPlatform/DataCollector/request.html.twig" id="api_platform.data_collector.request" priority="334"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.filter_locator"/>
    </service>
    <service id="debug.var_dumper.cloner" class="Symfony\Component\VarDumper\Cloner\VarCloner"/>
    <service id="debug.var_dumper.cli_dumper" class="Symfony\Component\VarDumper\Dumper\CliDumper"/>
    <service id="debug.api_platform.debug_resource.command" class="ApiPlatform\Symfony\Bundle\Command\DebugResourceCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="debug.var_dumper.cloner"/>
      <argument type="service" id="debug.var_dumper.cli_dumper"/>
      <call method="setName">
        <argument>debug:api-resource</argument>
      </call>
    </service>
    <service id="api_platform.security.resource_access_checker" class="ApiPlatform\Symfony\Security\ResourceAccessChecker">
      <argument type="service" id="security.expression_language" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver" on-invalid="null"/>
      <argument type="service" id="security.role_hierarchy" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
      <argument type="service" id="security.authorization_checker" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="api_platform.state_provider.access_checker" class="ApiPlatform\Symfony\Security\State\AccessCheckerProvider">
      <tag name="container.decorator" id="api_platform.state_provider.read" inner="api_platform.swagger_ui.provider.inner"/>
      <argument type="service" id="api_platform.swagger_ui.provider"/>
      <argument type="service" id="api_platform.security.resource_access_checker"/>
    </service>
    <service id="api_platform.state_provider.access_checker.post_deserialize" class="ApiPlatform\Symfony\Security\State\AccessCheckerProvider">
      <tag name="container.decorator" id="api_platform.state_provider.deserialize" inner="api_platform.state_provider.access_checker.post_deserialize.inner"/>
      <argument type="service" id="api_platform.state_provider.access_checker.post_deserialize.inner"/>
      <argument type="service" id="api_platform.security.resource_access_checker"/>
      <argument>post_denormalize</argument>
    </service>
    <service id="api_platform.security.expression_language_provider" class="ApiPlatform\Symfony\Security\Core\Authorization\ExpressionLanguageProvider">
      <tag name="security.expression_language_provider"/>
    </service>
    <service id="api_platform.security.listener.request.deny_access" class="ApiPlatform\Symfony\EventListener\DenyAccessListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onSecurity" priority="3"/>
      <tag name="kernel.event_listener" event="kernel.request" method="onSecurityPostDenormalize" priority="1"/>
      <tag name="kernel.event_listener" event="kernel.view" method="onSecurityPostValidation" priority="63"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.security.resource_access_checker"/>
    </service>
    <service id="api_platform.state_provider.access_checker.post_validate" class="ApiPlatform\Symfony\Security\State\AccessCheckerProvider">
      <tag name="container.decorator" id="api_platform.state_provider.validate" inner="api_platform.state_provider.access_checker.post_validate.inner"/>
      <argument type="service" id="api_platform.state_provider.access_checker.post_validate.inner"/>
      <argument type="service" id="api_platform.security.resource_access_checker"/>
      <argument>post_validate</argument>
    </service>
    <service id="api_platform.graphql.state_provider.access_checker" class="ApiPlatform\Symfony\Security\State\AccessCheckerProvider">
      <tag name="container.decorator" id="api_platform.graphql.state_provider.read" inner="api_platform.graphql.state_provider.access_checker.inner"/>
      <argument type="service" id="api_platform.graphql.state_provider.access_checker.inner"/>
      <argument type="service" id="api_platform.security.resource_access_checker"/>
    </service>
    <service id="api_platform.graphql.state_provider.access_checker.post_deserialize" class="ApiPlatform\Symfony\Security\State\AccessCheckerProvider">
      <tag name="container.decorator" id="api_platform.graphql.state_provider.denormalizer" inner="api_platform.graphql.state_provider.access_checker.post_deserialize.inner"/>
      <argument type="service" id="api_platform.graphql.state_provider.access_checker.post_deserialize.inner"/>
      <argument type="service" id="api_platform.security.resource_access_checker"/>
      <argument>post_denormalize</argument>
    </service>
    <service id="api_platform.graphql.state_provider.access_checker.post_validate" class="ApiPlatform\Symfony\Security\State\AccessCheckerProvider">
      <tag name="container.decorator" id="api_platform.graphql.state_provider.validate" inner="api_platform.graphql.state_provider.access_checker.post_validate.inner"/>
      <argument type="service" id="api_platform.graphql.state_provider.access_checker.post_validate.inner"/>
      <argument type="service" id="api_platform.security.resource_access_checker"/>
      <argument>post_validate</argument>
    </service>
    <service id="api_platform.maker.command.state_processor" class="ApiPlatform\Symfony\Maker\MakeStateProcessor">
      <tag name="maker.command"/>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
    </service>
    <service id="api_platform.maker.command.state_provider" class="ApiPlatform\Symfony\Maker\MakeStateProvider">
      <tag name="maker.command"/>
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
    </service>
    <service id="api_platform.argument_resolver.payload" class="ApiPlatform\Symfony\Bundle\ArgumentResolver\PayloadArgumentResolver">
      <tag name="controller.argument_value_resolver"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter"/>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.provider" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authentication\Provider\JWTProvider">
      <argument></argument>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>username</argument>
      <call method="setUserIdentityField">
        <argument>username</argument>
      </call>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.0">The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.listener" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <call method="setDispatcher">
        <argument type="service" id="debug.event_dispatcher"/>
      </call>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.0">The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.entry_point" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\EntryPoint\JWTEntryPoint">
      <deprecated package="lexik/jwt-authentication-bundle" version="2.0">The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.key_loader.openssl" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\OpenSSLKeyLoader">
      <argument></argument>
      <argument></argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument type="collection"/>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.5">The "%service_id%" service is deprecated since version 2.5 and will be removed in 3.0. Use lexik_jwt_authentication.key_loader.raw instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.jws_provider.default" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\DefaultJWSProvider">
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>openssl</argument>
      <argument>RS256</argument>
      <argument>3600</argument>
      <argument>0</argument>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.5">The "%service_id%" is deprecated since version 2.5 and will be removed in 5.0, use "lexik_jwt_authentication.jws_provider.lcobucci" instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.jwt_manager" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager" public="true">
      <argument type="service" id="lexik_jwt_authentication.encoder.lcobucci"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>username</argument>
      <call method="setUserIdentityField">
        <argument>username</argument>
        <argument>false</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.key_loader.abstract" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument type="collection"/>
    </service>
    <service id="lexik_jwt_authentication.key_loader.raw" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\RawKeyLoader">
      <argument>%env(resolve:JWT_SECRET_KEY)%</argument>
      <argument>%env(resolve:JWT_PUBLIC_KEY)%</argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument type="collection"/>
    </service>
    <service id="lexik_jwt_authentication.encoder.default" class="Lexik\Bundle\JWTAuthenticationBundle\Encoder\DefaultEncoder">
      <argument type="service" id="lexik_jwt_authentication.jws_provider.default"/>
    </service>
    <service id="lexik_jwt_authentication.encoder.lcobucci" class="Lexik\Bundle\JWTAuthenticationBundle\Encoder\LcobucciJWTEncoder">
      <argument type="service" id="lexik_jwt_authentication.jws_provider.lcobucci"/>
    </service>
    <service id="lexik_jwt_authentication.jws_provider.lcobucci" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\LcobucciJWSProvider">
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>openssl</argument>
      <argument>RS256</argument>
      <argument>3600</argument>
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="lexik_jwt_authentication.handler.authentication_success" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="collection"/>
      <argument>true</argument>
    </service>
    <service id="lexik_jwt_authentication.handler.authentication_failure" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>null</argument>
    </service>
    <service id="lexik_jwt_authentication.security.jwt_authenticator" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authenticator\JWTAuthenticator" abstract="true">
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
      <argument></argument>
      <argument type="service" id="translator" on-invalid="null"/>
    </service>
    <service id="lexik_jwt_authentication.extractor.chain_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\ChainTokenExtractor">
      <argument type="collection">
        <argument type="service" id="lexik_jwt_authentication.extractor.authorization_header_extractor"/>
      </argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.authorization_header_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor">
      <argument>Bearer</argument>
      <argument>Authorization</argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.query_parameter_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\QueryParameterTokenExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.cookie_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\CookieTokenExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.split_cookie_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\SplitCookieExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.security.jwt_user_provider" class="Lexik\Bundle\JWTAuthenticationBundle\Security\User\JWTUserProvider">
      <argument></argument>
    </service>
    <service id=".1_TokenStorage~AVrLB.y" class="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage"/>
    <service id="lexik_jwt_authentication.security.guard.jwt_token_authenticator" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator">
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
      <argument type="service" id=".1_TokenStorage~AVrLB.y"/>
      <argument>null</argument>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.7">The "%service_id%" service is deprecated and will be removed in 3.0, use the new "jwt" authenticator instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.check_config_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\CheckConfigCommand">
      <tag name="console.command" command="lexik:jwt:check-config"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>RS256</argument>
      <call method="setName">
        <argument>lexik:jwt:check-config</argument>
      </call>
      <call method="setDescription">
        <argument>Checks that the bundle is properly configured.</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.generate_token_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\GenerateTokenCommand" public="true">
      <tag name="console.command" command="lexik:jwt:generate-token"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <call method="setName">
        <argument>lexik:jwt:generate-token</argument>
      </call>
      <call method="setDescription">
        <argument>Generates a JWT token for a given user.</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.generate_keypair_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\GenerateKeyPairCommand">
      <tag name="console.command" command="lexik:jwt:generate-keypair"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>%env(resolve:JWT_SECRET_KEY)%</argument>
      <argument>%env(resolve:JWT_PUBLIC_KEY)%</argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument>RS256</argument>
      <call method="setName">
        <argument>lexik:jwt:generate-keypair</argument>
      </call>
      <call method="setDescription">
        <argument>Generate public/private keys for use in your application.</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.api_platform.openapi.factory" class="Lexik\Bundle\JWTAuthenticationBundle\OpenApi\OpenApiFactory">
      <tag name="container.decorator" id="api_platform.openapi.factory" inner="lexik_jwt_authentication.api_platform.openapi.factory.inner"/>
      <argument type="service" id="lexik_jwt_authentication.api_platform.openapi.factory.inner"/>
      <argument>/login</argument>
      <argument>email</argument>
      <argument>password</argument>
    </service>
    <service id="web_profiler.controller.profiler" class="Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController" public="true">
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="profiler" on-invalid="null"/>
      <argument type="service" id="twig"/>
      <argument>%data_collector.templates%</argument>
      <argument type="service" id="web_profiler.csp.handler"/>
      <argument>/srv/app</argument>
    </service>
    <service id="web_profiler.controller.router" class="Symfony\Bundle\WebProfilerBundle\Controller\RouterController" public="true">
      <argument type="service" id="profiler" on-invalid="null"/>
      <argument type="service" id="twig"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument>null</argument>
      <argument type="tagged_iterator" tag="routing.expression_language_provider"/>
    </service>
    <service id="web_profiler.controller.exception_panel" class="Symfony\Bundle\WebProfilerBundle\Controller\ExceptionPanelController" public="true">
      <argument type="service" id="error_handler.error_renderer.html"/>
      <argument type="service" id="profiler" on-invalid="null"/>
    </service>
    <service id="web_profiler.csp.handler" class="Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler">
      <argument type="service">
        <service class="Symfony\Bundle\WebProfilerBundle\Csp\NonceGenerator"/>
      </argument>
    </service>
    <service id="twig.extension.webprofiler" class="Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension">
      <tag name="twig.extension"/>
      <argument type="service">
        <service class="Symfony\Component\VarDumper\Dumper\HtmlDumper">
          <argument>null</argument>
          <argument>UTF-8</argument>
          <argument>1</argument>
          <call method="setDisplayOptions">
            <argument type="collection">
              <argument key="maxStringLength">4096</argument>
              <argument key="fileLinkFormat" type="service" id="debug.file_link_formatter"/>
            </argument>
          </call>
        </service>
      </argument>
    </service>
    <service id="debug.file_link_formatter.url_format" class="string">
      <argument type="service" id="router.default"/>
      <argument>_profiler_open_file</argument>
      <argument>?file=%%f&amp;line=%%l#line%%l</argument>
      <factory class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" method="generateUrlFormat"/>
    </service>
    <service id="web_profiler.debug_toolbar" class="Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="twig"/>
      <argument>false</argument>
      <argument>2</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
      <argument>^/((index|app(_[\w]+)?)\.php/)?_wdt</argument>
      <argument type="service" id="web_profiler.csp.handler"/>
      <argument type="service" id="data_collector.dump" on-invalid="ignore"/>
    </service>
    <service id="monolog.logger" class="Symfony\Bridge\Monolog\Logger">
      <argument>app</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="useMicrosecondTimestamps">
        <argument>true</argument>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger_prototype" class="Symfony\Bridge\Monolog\Logger" abstract="true">
      <argument></argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.activation_strategy.not_found" class="Symfony\Bridge\Monolog\Handler\FingersCrossed\NotFoundActivationStrategy" abstract="true"/>
    <service id="monolog.handler.fingers_crossed.error_level_activation_strategy" class="Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy" abstract="true"/>
    <service id="monolog.formatter.chrome_php" class="Monolog\Formatter\ChromePHPFormatter"/>
    <service id="monolog.formatter.gelf_message" class="Monolog\Formatter\GelfMessageFormatter"/>
    <service id="monolog.formatter.html" class="Monolog\Formatter\HtmlFormatter"/>
    <service id="monolog.formatter.json" class="Monolog\Formatter\JsonFormatter"/>
    <service id="monolog.formatter.line" class="Monolog\Formatter\LineFormatter"/>
    <service id="monolog.formatter.loggly" class="Monolog\Formatter\LogglyFormatter"/>
    <service id="monolog.formatter.normalizer" class="Monolog\Formatter\NormalizerFormatter"/>
    <service id="monolog.formatter.scalar" class="Monolog\Formatter\ScalarFormatter"/>
    <service id="monolog.formatter.wildfire" class="Monolog\Formatter\WildfireFormatter"/>
    <service id="monolog.formatter.logstash" class="Monolog\Formatter\LogstashFormatter">
      <argument>app</argument>
    </service>
    <service id="monolog.http_client" class="Symfony\Contracts\HttpClient\HttpClientInterface">
      <factory class="Symfony\Component\HttpClient\HttpClient" method="create"/>
    </service>
    <service id="monolog.processor.psr_log_message" class="Monolog\Processor\PsrLogMessageProcessor"/>
    <service id="monolog.handler.main" class="Monolog\Handler\StreamHandler">
      <tag name="kernel.reset" method="reset"/>
      <argument>/srv/app/var/log/dev.log</argument>
      <argument>debug</argument>
      <argument>true</argument>
      <argument>null</argument>
      <argument>false</argument>
      <call method="pushProcessor">
        <argument type="service" id="monolog.processor.psr_log_message"/>
      </call>
    </service>
    <service id="monolog.handler.console" class="Symfony\Bridge\Monolog\Handler\ConsoleHandler">
      <tag name="kernel.reset" method="reset"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
      <argument>null</argument>
      <argument>true</argument>
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="twig.extension.dump" class="Symfony\Bridge\Twig\Extension\DumpExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="var_dumper.cloner"/>
      <argument type="service" id="var_dumper.html_dumper"/>
    </service>
    <service id="data_collector.dump" class="Symfony\Component\HttpKernel\DataCollector\DumpDataCollector" public="true">
      <tag name="data_collector" id="dump" template="@Debug/Profiler/dump.html.twig" priority="240"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
      <argument>UTF-8</argument>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="var_dumper.server_connection"/>
    </service>
    <service id="debug.dump_listener" class="Symfony\Component\HttpKernel\EventListener\DumpListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="var_dumper.cloner"/>
      <argument type="service" id="var_dumper.contextualized_cli_dumper"/>
      <argument type="service" id="var_dumper.server_connection"/>
    </service>
    <service id="var_dumper.cloner" class="Symfony\Component\VarDumper\Cloner\VarCloner" public="true">
      <call method="setMaxItems">
        <argument>2500</argument>
      </call>
      <call method="setMinDepth">
        <argument>1</argument>
      </call>
      <call method="setMaxString">
        <argument>-1</argument>
      </call>
      <call method="addCasters">
        <argument type="collection">
          <argument key="Closure">Symfony\Component\VarDumper\Caster\ReflectionCaster::unsetClosureFileInfo</argument>
        </argument>
      </call>
    </service>
    <service id="var_dumper.contextualized_cli_dumper" class="Symfony\Component\VarDumper\Dumper\ContextualizedDumper">
      <tag name="container.decorator" id="var_dumper.cli_dumper" inner="var_dumper.contextualized_cli_dumper.inner"/>
      <argument type="service" id="var_dumper.contextualized_cli_dumper.inner"/>
      <argument type="collection">
        <argument key="source" type="service">
          <service class="Symfony\Component\VarDumper\Dumper\ContextProvider\SourceContextProvider">
            <argument>UTF-8</argument>
            <argument>/srv/app</argument>
            <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="var_dumper.html_dumper" class="Symfony\Component\VarDumper\Dumper\HtmlDumper">
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>0</argument>
      <call method="setDisplayOptions">
        <argument type="collection">
          <argument key="fileLinkFormat" type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
        </argument>
      </call>
    </service>
    <service id="var_dumper.server_connection" class="Symfony\Component\VarDumper\Server\Connection">
      <argument>tcp://%env(VAR_DUMPER_SERVER)%</argument>
      <argument type="collection">
        <argument key="source" type="service">
          <service class="Symfony\Component\VarDumper\Dumper\ContextProvider\SourceContextProvider">
            <argument>UTF-8</argument>
            <argument>/srv/app</argument>
            <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
          </service>
        </argument>
        <argument key="request" type="service">
          <service class="Symfony\Component\VarDumper\Dumper\ContextProvider\RequestContextProvider">
            <argument type="service" id="request_stack"/>
          </service>
        </argument>
        <argument key="cli" type="service">
          <service class="Symfony\Component\VarDumper\Dumper\ContextProvider\CliContextProvider"/>
        </argument>
      </argument>
    </service>
    <service id="var_dumper.dump_server" class="Symfony\Component\VarDumper\Server\DumpServer">
      <tag name="monolog.logger" channel="debug"/>
      <argument>tcp://%env(VAR_DUMPER_SERVER)%</argument>
      <argument type="service" id="monolog.logger.debug" on-invalid="null"/>
    </service>
    <service id="var_dumper.command.server_dump" class="Symfony\Component\VarDumper\Command\ServerDumpCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="var_dumper.dump_server"/>
      <argument type="collection">
        <argument key="cli" type="service">
          <service class="Symfony\Component\VarDumper\Command\Descriptor\CliDescriptor">
            <argument type="service" id="var_dumper.contextualized_cli_dumper.inner"/>
          </service>
        </argument>
        <argument key="html" type="service">
          <service class="Symfony\Component\VarDumper\Command\Descriptor\HtmlDescriptor">
            <argument type="service" id="var_dumper.html_dumper"/>
          </service>
        </argument>
      </argument>
      <call method="setName">
        <argument>server:dump</argument>
      </call>
      <call method="setDescription">
        <argument>Start a dump server that collects and displays dumps in a single place</argument>
      </call>
    </service>
    <service id="monolog.command.server_log" class="Symfony\Bridge\Monolog\Command\ServerLogCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>server:log</argument>
      </call>
      <call method="setDescription">
        <argument>Start a log server that displays logs in real time</argument>
      </call>
    </service>
    <service id="flysystem.adapter.lazy.factory" class="League\FlysystemBundle\Lazy\LazyFactory">
      <argument type="service" id=".service_locator.GoygnKG"/>
    </service>
    <service id="flysystem.adapter.default.storage" class="League\Flysystem\Local\LocalFilesystemAdapter">
      <argument>/srv/app/var/storage/default</argument>
      <argument type="service">
        <service class="League\Flysystem\UnixVisibility\PortableVisibilityConverter" shared="false" constructor="fromArray">
          <argument type="collection">
            <argument key="file" type="collection">
              <argument key="public">420</argument>
              <argument key="private">384</argument>
            </argument>
            <argument key="dir" type="collection">
              <argument key="public">493</argument>
              <argument key="private">448</argument>
            </argument>
          </argument>
          <argument>private</argument>
        </service>
      </argument>
      <argument>0</argument>
      <argument>2</argument>
      <argument>null</argument>
      <argument>false</argument>
    </service>
    <service id="default.storage" class="League\Flysystem\Filesystem">
      <tag name="flysystem.storage" storage="default.storage"/>
      <argument type="service" id="flysystem.adapter.default.storage"/>
      <argument type="collection">
        <argument key="visibility">null</argument>
        <argument key="directory_visibility">null</argument>
        <argument key="case_sensitive">true</argument>
        <argument key="disable_asserts">false</argument>
        <argument key="public_url">null</argument>
      </argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="doctrine.fixtures_load_command" class="Doctrine\Bundle\FixturesBundle\Command\LoadDataFixturesDoctrineCommand">
      <tag name="console.command" command="doctrine:fixtures:load"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.fixtures.loader"/>
      <argument type="service" id="doctrine"/>
      <argument type="collection">
        <argument key="my_purger" type="service" id="App\Purger\CustomPurgerFactory"/>
        <argument key="default" type="service" id="doctrine.fixtures.purger.orm_purger_factory"/>
      </argument>
      <call method="setName">
        <argument>doctrine:fixtures:load</argument>
      </call>
    </service>
    <service id="doctrine.fixtures.loader" class="Doctrine\Bundle\FixturesBundle\Loader\SymfonyFixturesLoader">
      <argument type="service" id="service_container"/>
      <call method="addFixtures">
        <argument type="collection">
          <argument type="collection">
            <argument key="fixture" type="service" id="App\DataFixtures\DataFixtures"/>
            <argument key="groups" type="collection"/>
          </argument>
        </argument>
      </call>
    </service>
    <service id="doctrine.fixtures.purger.orm_purger_factory" class="Doctrine\Bundle\FixturesBundle\Purger\ORMPurgerFactory">
      <tag name="doctrine.fixtures.purger_factory" alias="default"/>
    </service>
    <service id="Vich\UploaderBundle\Naming\OrignameNamer.media_uploads" class="Vich\UploaderBundle\Naming\OrignameNamer" public="true">
      <argument type="service" id="Vich\UploaderBundle\Util\Transliterator"/>
    </service>
    <service id="vich_uploader.adapter.mongodb" class="Vich\UploaderBundle\Adapter\ODM\MongoDB\MongoDBAdapter"/>
    <service id="vich_uploader.adapter.orm" class="Vich\UploaderBundle\Adapter\ORM\DoctrineORMAdapter"/>
    <service id="vich_uploader.adapter.phpcr" class="Vich\UploaderBundle\Adapter\PHPCR\PHPCRAdapter"/>
    <service id="vich_uploader.listener.doctrine.base" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.inject.orm" class="Vich\UploaderBundle\EventListener\Doctrine\InjectListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.orm" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.clean.orm" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.orm" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.inject.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\InjectListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.clean.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.inject.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\InjectListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.clean.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.storage.file_system" class="Vich\UploaderBundle\Storage\FileSystemStorage">
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
    </service>
    <service id="vich_uploader.file_injector" class="Vich\UploaderBundle\Injector\FileInjector">
      <argument type="service" id="vich_uploader.storage.file_system"/>
    </service>
    <service id="vich_uploader.metadata.file_locator" class="Metadata\Driver\FileLocator">
      <argument type="collection"/>
    </service>
    <service id="vich_uploader.metadata.attribute_reader" class="Vich\UploaderBundle\Metadata\Driver\AttributeReader"/>
    <service id="vich_uploader.metadata_driver.annotation" class="Vich\UploaderBundle\Metadata\Driver\AnnotationDriver">
      <argument type="service" id="vich_uploader.metadata.reader"/>
      <argument type="collection">
        <argument type="service" id="doctrine"/>
      </argument>
    </service>
    <service id="vich_uploader.metadata_driver.xml" class="Vich\UploaderBundle\Metadata\Driver\XmlDriver">
      <argument type="service" id="vich_uploader.metadata.file_locator"/>
    </service>
    <service id="vich_uploader.metadata_driver.yml" class="Vich\UploaderBundle\Metadata\Driver\YmlDriver">
      <argument type="service" id="vich_uploader.metadata.file_locator"/>
    </service>
    <service id="vich_uploader.metadata_driver.yaml" class="Vich\UploaderBundle\Metadata\Driver\YamlDriver">
      <argument type="service" id="vich_uploader.metadata.file_locator"/>
    </service>
    <service id="vich_uploader.metadata_driver.chain" class="Metadata\Driver\DriverChain">
      <argument type="collection">
        <argument type="service" id="vich_uploader.metadata_driver.xml"/>
        <argument type="service">
          <service class="Vich\UploaderBundle\Metadata\Driver\AnnotationDriver">
            <argument type="service" id="vich_uploader.metadata.reader"/>
            <argument type="collection">
              <argument type="service" id="doctrine"/>
            </argument>
          </service>
        </argument>
        <argument type="service" id="vich_uploader.metadata_driver.yaml"/>
        <argument type="service" id="vich_uploader.metadata_driver.yml"/>
      </argument>
    </service>
    <service id="vich_uploader.metadata.cache.file_cache" class="Metadata\Cache\FileCache">
      <argument>/srv/app/var/cache/dev/vich_uploader</argument>
    </service>
    <service id="vich_uploader.metadata_factory" class="Metadata\MetadataFactory">
      <argument type="service" id="vich_uploader.metadata_driver.chain"/>
      <argument>Metadata\ClassHierarchyMetadata</argument>
      <argument>true</argument>
      <call method="setCache">
        <argument type="service" id="vich_uploader.metadata.cache.file_cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="vich_uploader.metadata_reader" class="Vich\UploaderBundle\Metadata\MetadataReader">
      <argument type="service" id="vich_uploader.metadata_factory"/>
    </service>
    <service id="Vich\UploaderBundle\Metadata\CacheWarmer" class="Vich\UploaderBundle\Metadata\CacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument>/srv/app/var/cache/dev/vich_uploader</argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
    </service>
    <service id="vich_uploader.property_mapping_resolver" class="Vich\UploaderBundle\Mapping\PropertyMappingResolver">
      <argument type="service" id="service_container"/>
      <argument>%vich_uploader.mappings%</argument>
      <argument>_name</argument>
    </service>
    <service id="vich_uploader.property_mapping_factory" class="Vich\UploaderBundle\Mapping\PropertyMappingFactory">
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.property_mapping_resolver"/>
    </service>
    <service id="Vich\UploaderBundle\Naming\UniqidNamer" class="Vich\UploaderBundle\Naming\UniqidNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\PropertyNamer" class="Vich\UploaderBundle\Naming\PropertyNamer" public="true">
      <argument type="service" id="Vich\UploaderBundle\Util\Transliterator"/>
    </service>
    <service id="Vich\UploaderBundle\Naming\OrignameNamer" class="Vich\UploaderBundle\Naming\OrignameNamer" public="true">
      <argument type="service" id="Vich\UploaderBundle\Util\Transliterator"/>
    </service>
    <service id="Vich\UploaderBundle\Naming\HashNamer" class="Vich\UploaderBundle\Naming\HashNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\Base64Namer" class="Vich\UploaderBundle\Naming\Base64Namer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\SubdirDirectoryNamer" class="Vich\UploaderBundle\Naming\SubdirDirectoryNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\PropertyDirectoryNamer" class="Vich\UploaderBundle\Naming\PropertyDirectoryNamer" public="true">
      <argument type="service" id="property_accessor" on-invalid="null"/>
      <argument type="service" id="Vich\UploaderBundle\Util\Transliterator"/>
    </service>
    <service id="Vich\UploaderBundle\Naming\CurrentDateTimeDirectoryNamer" class="Vich\UploaderBundle\Naming\CurrentDateTimeDirectoryNamer" public="true">
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="Vich\UploaderBundle\Naming\SmartUniqueNamer" class="Vich\UploaderBundle\Naming\SmartUniqueNamer" public="true">
      <argument type="service" id="Vich\UploaderBundle\Util\Transliterator"/>
    </service>
    <service id="Vich\UploaderBundle\Util\Transliterator" class="Vich\UploaderBundle\Util\Transliterator">
      <argument type="service" id="slugger"/>
    </service>
    <service id="vich_uploader.download_handler" class="Vich\UploaderBundle\Handler\DownloadHandler" public="true">
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
    </service>
    <service id="vich_uploader.upload_handler" class="Vich\UploaderBundle\Handler\UploadHandler" public="true">
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
      <argument type="service" id="vich_uploader.file_injector"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="vich_uploader.command.mapping_debug_class" class="Vich\UploaderBundle\Command\MappingDebugClassCommand">
      <tag name="console.command" command="vich:mapping:debug-class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <call method="setName">
        <argument>vich:mapping:debug-class</argument>
      </call>
    </service>
    <service id="vich_uploader.command.mapping_debug" class="Vich\UploaderBundle\Command\MappingDebugCommand">
      <tag name="console.command" command="vich:mapping:debug"/>
      <tag name="container.no_preload"/>
      <argument>%vich_uploader.mappings%</argument>
      <call method="setName">
        <argument>vich:mapping:debug</argument>
      </call>
    </service>
    <service id="vich_uploader.command.mapping_list_classes" class="Vich\UploaderBundle\Command\MappingListClassesCommand">
      <tag name="console.command" command="vich:mapping:list-classes"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <call method="setName">
        <argument>vich:mapping:list-classes</argument>
      </call>
    </service>
    <service id="Vich\UploaderBundle\DataCollector\MappingCollector" class="Vich\UploaderBundle\DataCollector\MappingCollector">
      <tag name="data_collector" template="@VichUploader/Collector/mapping_collector.html.twig" id="vich_uploader.mapping_collector"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
    </service>
    <service id="vich_uploader.form.type.file" class="Vich\UploaderBundle\Form\Type\VichFileType" public="true">
      <tag name="form.type" alias="vich_file"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="vich_uploader.form.type.image" class="Vich\UploaderBundle\Form\Type\VichImageType" public="true">
      <tag name="form.type" alias="vich_image"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="property_accessor"/>
      <argument>null</argument>
    </service>
    <service id="Vich\UploaderBundle\Templating\Helper\UploaderHelper" class="Vich\UploaderBundle\Templating\Helper\UploaderHelper">
      <tag name="templating.helper" alias="vich_uploader"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
    </service>
    <service id="Vich\UploaderBundle\Twig\Extension\UploaderExtension" class="Vich\UploaderBundle\Twig\Extension\UploaderExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="Vich\UploaderBundle\Twig\Extension\UploaderExtensionRuntime" class="Vich\UploaderBundle\Twig\Extension\UploaderExtensionRuntime">
      <tag name="twig.runtime"/>
      <argument type="service" id="Vich\UploaderBundle\Templating\Helper\UploaderHelper"/>
    </service>
    <service id="vich_uploader.metadata.reader" class="Vich\UploaderBundle\Metadata\Driver\AttributeReader"/>
    <service id="vich_uploader.listener.clean.media_uploads" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener">
      <tag name="doctrine.event_listener" event="preUpdate" priority="50"/>
      <argument>media_uploads</argument>
      <argument type="service" id="vich_uploader.adapter.orm"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.media_uploads" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener">
      <tag name="doctrine.event_listener" event="preRemove" priority="0"/>
      <tag name="doctrine.event_listener" event="postFlush" priority="0"/>
      <argument>media_uploads</argument>
      <argument type="service" id="vich_uploader.adapter.orm"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.media_uploads" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener">
      <tag name="doctrine.event_listener" event="prePersist" priority="0"/>
      <tag name="doctrine.event_listener" event="preUpdate" priority="0"/>
      <argument>media_uploads</argument>
      <argument type="service" id="vich_uploader.adapter.orm"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\AddEstablishmentToPrestataireController" class="App\Controller\AddEstablishmentToPrestataireController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\AddEstablishmentToPrestataireController" class="App\Controller\AddEstablishmentToPrestataireController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\AddEstablishmentToPrestataireController" class="App\Controller\AddEstablishmentToPrestataireController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\AddPrestationToEstablishmentController" class="App\Controller\AddPrestationToEstablishmentController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\AddPrestationToEstablishmentController" class="App\Controller\AddPrestationToEstablishmentController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\AddPrestationToEstablishmentController" class="App\Controller\AddPrestationToEstablishmentController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\DeleteEstablishmentController" class="App\Controller\DeleteEstablishmentController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\DeleteEstablishmentController" class="App\Controller\DeleteEstablishmentController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\DeleteEstablishmentController" class="App\Controller\DeleteEstablishmentController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\DeletePrestataireController" class="App\Controller\DeletePrestataireController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\DeletePrestataireController" class="App\Controller\DeletePrestataireController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\DeletePrestataireController" class="App\Controller\DeletePrestataireController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\DeteteBookingController" class="App\Controller\DeteteBookingController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\DeteteBookingController" class="App\Controller\DeteteBookingController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\DeteteBookingController" class="App\Controller\DeteteBookingController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\GetEstablishmentsByPrestataireController" class="App\Controller\GetEstablishmentsByPrestataireController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\GetEstablishmentsByPrestataireController" class="App\Controller\GetEstablishmentsByPrestataireController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\GetEstablishmentsByPrestataireController" class="App\Controller\GetEstablishmentsByPrestataireController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\MediaOploaderController" class="App\Controller\MediaOploaderController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\MediaOploaderController" class="App\Controller\MediaOploaderController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\MediaOploaderController" class="App\Controller\MediaOploaderController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\PaymentController" class="App\Controller\PaymentController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\PaymentController" class="App\Controller\PaymentController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\PaymentController" class="App\Controller\PaymentController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\RegisterPrestataireController" class="App\Controller\RegisterPrestataireController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\RegisterPrestataireController" class="App\Controller\RegisterPrestataireController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\RegisterPrestataireController" class="App\Controller\RegisterPrestataireController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\RegistrationController" class="App\Controller\RegistrationController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\RegistrationController" class="App\Controller\RegistrationController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\RegistrationController" class="App\Controller\RegistrationController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\ResearchPrestationController" class="App\Controller\ResearchPrestationController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\ResearchPrestationController" class="App\Controller\ResearchPrestationController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\ResearchPrestationController" class="App\Controller\ResearchPrestationController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\TestController" class="App\Controller\TestController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\TestController" class="App\Controller\TestController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\TestController" class="App\Controller\TestController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\VideoOploaderController" class="App\Controller\VideoOploaderController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\VideoOploaderController" class="App\Controller\VideoOploaderController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\VideoOploaderController" class="App\Controller\VideoOploaderController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\FixturesBundle\ORMFixtureInterface.0.App\DataFixtures\DataFixtures" class="App\DataFixtures\DataFixtures" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\DataFixtures\DataFixtures" class="App\DataFixtures\DataFixtures" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.App\Form\PersonneType" class="App\Form\PersonneType" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Form\PersonneType" class="App\Form\PersonneType" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.App\Form\TestType" class="App\Form\TestType" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Form\TestType" class="App\Form\TestType" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\BookingRepository" class="App\Repository\BookingRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\BookingRepository" class="App\Repository\BookingRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\CategoryRepository" class="App\Repository\CategoryRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\CategoryRepository" class="App\Repository\CategoryRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\EmployeeScheduleRepository" class="App\Repository\EmployeeScheduleRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\EmployeeScheduleRepository" class="App\Repository\EmployeeScheduleRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\EstablishmentRepository" class="App\Repository\EstablishmentRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\EstablishmentRepository" class="App\Repository\EstablishmentRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\FeedbackRepository" class="App\Repository\FeedbackRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\FeedbackRepository" class="App\Repository\FeedbackRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\MediaRepository" class="App\Repository\MediaRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\MediaRepository" class="App\Repository\MediaRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\PrestataireRepository" class="App\Repository\PrestataireRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\PrestataireRepository" class="App\Repository\PrestataireRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\PrestationRepository" class="App\Repository\PrestationRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\PrestationRepository" class="App\Repository\PrestationRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\SlotRepository" class="App\Repository\SlotRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\SlotRepository" class="App\Repository\SlotRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\TestRepository" class="App\Repository\TestRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\TestRepository" class="App\Repository\TestRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\UserRepository" class="App\Repository\UserRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\UserRepository" class="App\Repository\UserRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\VideoRepository" class="App\Repository\VideoRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\VideoRepository" class="App\Repository\VideoRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\ApprovePrestataireProcessor" class="App\State\ApprovePrestataireProcessor" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\ApprovePrestataireProcessor" class="App\State\ApprovePrestataireProcessor" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\AssignManagerToEstablishmentStateProcessor" class="App\State\AssignManagerToEstablishmentStateProcessor" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\AssignManagerToEstablishmentStateProcessor" class="App\State\AssignManagerToEstablishmentStateProcessor" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\CreateEstablishmentProcessor" class="App\State\CreateEstablishmentProcessor" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\CreateEstablishmentProcessor" class="App\State\CreateEstablishmentProcessor" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProviderInterface.0.App\State\GetBookingsStateProvider" class="App\State\GetBookingsStateProvider" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\GetBookingsStateProvider" class="App\State\GetBookingsStateProvider" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProviderInterface.0.App\State\GetEmployeesByPrestataireStateProvider" class="App\State\GetEmployeesByPrestataireStateProvider" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\GetEmployeesByPrestataireStateProvider" class="App\State\GetEmployeesByPrestataireStateProvider" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProviderInterface.0.App\State\GetEmployeesStateProvider" class="App\State\GetEmployeesStateProvider" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\GetEmployeesStateProvider" class="App\State\GetEmployeesStateProvider" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProviderInterface.0.App\State\GetEstablishmentByPrestataireStateProvider" class="App\State\GetEstablishmentByPrestataireStateProvider" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\GetEstablishmentByPrestataireStateProvider" class="App\State\GetEstablishmentByPrestataireStateProvider" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProviderInterface.0.App\State\GetEstablishmentsStateProvider" class="App\State\GetEstablishmentsStateProvider" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\GetEstablishmentsStateProvider" class="App\State\GetEstablishmentsStateProvider" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProviderInterface.0.App\State\GetOneEstablishmentStateProvider" class="App\State\GetOneEstablishmentStateProvider" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\GetOneEstablishmentStateProvider" class="App\State\GetOneEstablishmentStateProvider" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProviderInterface.0.App\State\GetPrestatairesForUserStateProvider" class="App\State\GetPrestatairesForUserStateProvider" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\GetPrestatairesForUserStateProvider" class="App\State\GetPrestatairesForUserStateProvider" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\RegisterEmployeeProcessor" class="App\State\RegisterEmployeeProcessor" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\RegisterEmployeeProcessor" class="App\State\RegisterEmployeeProcessor" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\RegisterPrestataireProcessor" class="App\State\RegisterPrestataireProcessor" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\RegisterPrestataireProcessor" class="App\State\RegisterPrestataireProcessor" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\RejectPrestataireProcessor" class="App\State\RejectPrestataireProcessor" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\RejectPrestataireProcessor" class="App\State\RejectPrestataireProcessor" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\UserPasswordHasher" class="App\State\UserPasswordHasher" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\UserPasswordHasher" class="App\State\UserPasswordHasher" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.ApiPlatform\State\ProcessorInterface.0.App\State\UserPatchProcessor" class="App\State\UserPatchProcessor" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\State\UserPatchProcessor" class="App\State\UserPatchProcessor" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.7nzbL4K" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="base64" type="service_closure" id="container.env_var_processor"/>
        <argument key="bool" type="service_closure" id="container.env_var_processor"/>
        <argument key="const" type="service_closure" id="container.env_var_processor"/>
        <argument key="csv" type="service_closure" id="container.env_var_processor"/>
        <argument key="default" type="service_closure" id="container.env_var_processor"/>
        <argument key="enum" type="service_closure" id="container.env_var_processor"/>
        <argument key="file" type="service_closure" id="container.env_var_processor"/>
        <argument key="float" type="service_closure" id="container.env_var_processor"/>
        <argument key="int" type="service_closure" id="container.env_var_processor"/>
        <argument key="json" type="service_closure" id="container.env_var_processor"/>
        <argument key="key" type="service_closure" id="container.env_var_processor"/>
        <argument key="not" type="service_closure" id="container.env_var_processor"/>
        <argument key="query_string" type="service_closure" id="container.env_var_processor"/>
        <argument key="require" type="service_closure" id="container.env_var_processor"/>
        <argument key="resolve" type="service_closure" id="container.env_var_processor"/>
        <argument key="shuffle" type="service_closure" id="container.env_var_processor"/>
        <argument key="string" type="service_closure" id="container.env_var_processor"/>
        <argument key="trim" type="service_closure" id="container.env_var_processor"/>
        <argument key="url" type="service_closure" id="container.env_var_processor"/>
      </argument>
    </service>
    <service id="maker.auto_command.make_auth" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:auth" description="Creates a Guard authenticator of different flavors"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_authenticator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:auth</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a Guard authenticator of different flavors</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_command" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:command" description="Creates a new console command class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:command</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new console command class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_component" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-component" description="Creates a twig (or live) component"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_component"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-component</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a twig (or live) component</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:controller" description="Creates a new controller class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:controller</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new controller class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_crud" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:crud" description="Creates CRUD for Doctrine entity class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_crud"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:crud</argument>
      </call>
      <call method="setDescription">
        <argument>Creates CRUD for Doctrine entity class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_docker_database" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:docker:database" description="Adds a database container to your docker-compose.yaml file"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_docker_database"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:docker:database</argument>
      </call>
      <call method="setDescription">
        <argument>Adds a database container to your docker-compose.yaml file</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_entity" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:entity" description="Creates or updates a Doctrine entity class, and optionally an API Platform resource"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_entity"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:entity</argument>
      </call>
      <call method="setDescription">
        <argument>Creates or updates a Doctrine entity class, and optionally an API Platform resource</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_fixtures" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:fixtures" description="Creates a new class to load Doctrine fixtures"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_fixtures"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:fixtures</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new class to load Doctrine fixtures</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:form" description="Creates a new form class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:form</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new form class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_message" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:message" description="Creates a new message and handler"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_message"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:message</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new message and handler</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:messenger-middleware" description="Creates a new messenger middleware"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_messenger_middleware"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:messenger-middleware</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new messenger middleware</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_registration_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:registration-form" description="Creates a new registration form system"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_registration_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:registration-form</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new registration form system</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_reset_password" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:reset-password" description="Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_reset_password"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:reset-password</argument>
      </call>
      <call method="setDescription">
        <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:encoder" description="Creates a new serializer encoder class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_encoder"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:encoder</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new serializer encoder class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:normalizer" description="Creates a new serializer normalizer class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_normalizer"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:normalizer</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new serializer normalizer class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_subscriber" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:subscriber" description="Creates a new event subscriber class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_subscriber"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:subscriber</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new event subscriber class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_extension" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-extension" description="Creates a new Twig extension with its runtime class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_extension"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-extension</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new Twig extension with its runtime class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:test" description="Creates a new test class"/>
      <tag name="console.command" command="make:unit-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="console.command" command="make:functional-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:test</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>make:unit-test</argument>
          <argument>make:functional-test</argument>
        </argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new test class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_validator" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:validator" description="Creates a new validator and constraint class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_validator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:validator</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new validator and constraint class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_voter" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:voter" description="Creates a new security voter class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_voter"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:voter</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new security voter class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_user" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:user" description="Creates a new security user class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_user"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:user</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new security user class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_migration" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:migration" description="Creates a new migration based on database changes"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_migration"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:migration</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new migration based on database changes</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:stimulus-controller" description="Creates a new Stimulus controller"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_stimulus_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:stimulus-controller</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new Stimulus controller</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_security_form_login" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:security:form-login" description="Generate the code needed for the form_login authenticator"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form_login"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:security:form-login</argument>
      </call>
      <call method="setDescription">
        <argument>Generate the code needed for the form_login authenticator</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_state_processor" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:state-processor" description="Creates an API Platform state processor"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="api_platform.maker.command.state_processor"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:state-processor</argument>
      </call>
      <call method="setDescription">
        <argument>Creates an API Platform state processor</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_state_provider" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:state-provider" description="Creates an API Platform state provider"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="api_platform.maker.command.state_provider"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:state-provider</argument>
      </call>
      <call method="setDescription">
        <argument>Creates an API Platform state provider</argument>
      </call>
    </service>
    <service id=".service_locator.y4_Zrx." class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="loader" type="service_closure" id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface"/>
      </argument>
    </service>
    <service id=".service_locator.God1HrF" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="prestataire" type="service_closure" id=".errored..service_locator.God1HrF.App\Entity\Prestataire"/>
      </argument>
    </service>
    <service id=".service_locator.dG3EoB7" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="establishment" type="service_closure" id=".errored..service_locator.dG3EoB7.App\Entity\Establishment"/>
      </argument>
    </service>
    <service id=".service_locator.j5sevqx" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="data" type="service_closure" id=".errored..service_locator.j5sevqx.App\Entity\Establishment"/>
        <argument key="em" type="service_closure" id="doctrine.orm.default_entity_manager"/>
      </argument>
    </service>
    <service id=".service_locator.58iSd83" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="data" type="service_closure" id=".errored..service_locator.58iSd83.App\Entity\Prestataire"/>
        <argument key="em" type="service_closure" id="doctrine.orm.default_entity_manager"/>
      </argument>
    </service>
    <service id=".service_locator.Nwfon31" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="data" type="service_closure" id=".errored..service_locator.Nwfon31.App\Entity\Booking"/>
        <argument key="em" type="service_closure" id="doctrine.orm.default_entity_manager"/>
      </argument>
    </service>
    <service id=".service_locator.PSwBGfE" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="establishmentRepository" type="service_closure" id="App\Repository\EstablishmentRepository"/>
        <argument key="prestataire" type="service_closure" id=".errored..service_locator.PSwBGfE.App\Entity\Prestataire"/>
      </argument>
    </service>
    <service id=".service_locator.Hz5btge" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="user" type="service_closure" id=".errored..service_locator.Hz5btge.App\Entity\User"/>
      </argument>
    </service>
    <service id=".service_locator.NygMs_p" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="JWTManager" type="service_closure" id="lexik_jwt_authentication.jwt_manager"/>
      </argument>
    </service>
    <service id=".service_locator.U0Nbtbo" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="prestationRepository" type="service_closure" id="App\Repository\PrestationRepository"/>
      </argument>
    </service>
    <service id=".service_locator.zst5.Vd" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="params" type="service_closure" id="parameter_bag"/>
      </argument>
    </service>
    <service id=".service_locator.IVGqFDR" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="mailerService" type="service_closure" id="mailer.mailer"/>
      </argument>
    </service>
    <service id=".service_locator.Zx3oYFB" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="manager" type="service_closure" id="doctrine.orm.default_entity_manager"/>
        <argument key="uploaderService" type="service_closure" id="App\Services\UploaderService"/>
      </argument>
    </service>
    <service id=".service_locator.LWAGtDU" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Controller\AddEstablishmentToPrestataireController::__invoke" type="service_closure" id=".service_locator.God1HrF"/>
        <argument key="App\Controller\AddPrestationToEstablishmentController::__invoke" type="service_closure" id=".service_locator.dG3EoB7"/>
        <argument key="App\Controller\DeleteEstablishmentController::__invoke" type="service_closure" id=".service_locator.j5sevqx"/>
        <argument key="App\Controller\DeletePrestataireController::__invoke" type="service_closure" id=".service_locator.58iSd83"/>
        <argument key="App\Controller\DeteteBookingController::__invoke" type="service_closure" id=".service_locator.Nwfon31"/>
        <argument key="App\Controller\GetEstablishmentsByPrestataireController::__invoke" type="service_closure" id=".service_locator.PSwBGfE"/>
        <argument key="App\Controller\MediaOploaderController::__invoke" type="service_closure" id=".service_locator.Hz5btge"/>
        <argument key="App\Controller\PaymentController::createCheckoutSession" type="service_closure" id=".service_locator.NygMs_p"/>
        <argument key="App\Controller\ResearchPrestationController::__invoke" type="service_closure" id=".service_locator.U0Nbtbo"/>
        <argument key="App\Controller\TestController::index" type="service_closure" id=".service_locator.zst5.Vd"/>
        <argument key="App\Controller\TestController::someAction" type="service_closure" id=".service_locator.IVGqFDR"/>
        <argument key="App\Controller\TestController::uploadFile" type="service_closure" id=".service_locator.Zx3oYFB"/>
        <argument key="App\Kernel::loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="App\Kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel::loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="App\Controller\AddEstablishmentToPrestataireController:__invoke" type="service_closure" id=".service_locator.God1HrF"/>
        <argument key="App\Controller\AddEstablishmentToPrestataireController" type="service_closure" id=".service_locator.God1HrF"/>
        <argument key="App\Controller\AddPrestationToEstablishmentController:__invoke" type="service_closure" id=".service_locator.dG3EoB7"/>
        <argument key="App\Controller\AddPrestationToEstablishmentController" type="service_closure" id=".service_locator.dG3EoB7"/>
        <argument key="App\Controller\DeleteEstablishmentController:__invoke" type="service_closure" id=".service_locator.j5sevqx"/>
        <argument key="App\Controller\DeleteEstablishmentController" type="service_closure" id=".service_locator.j5sevqx"/>
        <argument key="App\Controller\DeletePrestataireController:__invoke" type="service_closure" id=".service_locator.58iSd83"/>
        <argument key="App\Controller\DeletePrestataireController" type="service_closure" id=".service_locator.58iSd83"/>
        <argument key="App\Controller\DeteteBookingController:__invoke" type="service_closure" id=".service_locator.Nwfon31"/>
        <argument key="App\Controller\DeteteBookingController" type="service_closure" id=".service_locator.Nwfon31"/>
        <argument key="App\Controller\GetEstablishmentsByPrestataireController:__invoke" type="service_closure" id=".service_locator.PSwBGfE"/>
        <argument key="App\Controller\GetEstablishmentsByPrestataireController" type="service_closure" id=".service_locator.PSwBGfE"/>
        <argument key="App\Controller\MediaOploaderController:__invoke" type="service_closure" id=".service_locator.Hz5btge"/>
        <argument key="App\Controller\MediaOploaderController" type="service_closure" id=".service_locator.Hz5btge"/>
        <argument key="App\Controller\PaymentController:createCheckoutSession" type="service_closure" id=".service_locator.NygMs_p"/>
        <argument key="App\Controller\ResearchPrestationController:__invoke" type="service_closure" id=".service_locator.U0Nbtbo"/>
        <argument key="App\Controller\ResearchPrestationController" type="service_closure" id=".service_locator.U0Nbtbo"/>
        <argument key="App\Controller\TestController:index" type="service_closure" id=".service_locator.zst5.Vd"/>
        <argument key="App\Controller\TestController:someAction" type="service_closure" id=".service_locator.IVGqFDR"/>
        <argument key="App\Controller\TestController:uploadFile" type="service_closure" id=".service_locator.Zx3oYFB"/>
        <argument key="kernel:loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel:registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
      </argument>
    </service>
    <service id=".service_locator.F9PKc.7" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator" type="service_closure" id="doctrine.orm.validator.unique"/>
        <argument key="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator" type="service_closure" id="security.validator.user_password"/>
        <argument key="Symfony\Component\Validator\Constraints\EmailValidator" type="service_closure" id="validator.email"/>
        <argument key="Symfony\Component\Validator\Constraints\ExpressionValidator" type="service_closure" id="validator.expression"/>
        <argument key="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" type="service_closure" id="validator.no_suspicious_characters"/>
        <argument key="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" type="service_closure" id="validator.not_compromised_password"/>
        <argument key="Symfony\Component\Validator\Constraints\WhenValidator" type="service_closure" id="validator.when"/>
        <argument key="doctrine.orm.validator.unique" type="service_closure" id="doctrine.orm.validator.unique"/>
        <argument key="security.validator.user_password" type="service_closure" id="security.validator.user_password"/>
        <argument key="validator.expression" type="service_closure" id="validator.expression"/>
      </argument>
    </service>
    <service id=".service_locator.lLv4pWF" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service_closure" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id=".debug.serializer.normalizer.serializer.denormalizer.unwrapping" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.denormalizer.unwrapping"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.openapi.normalizer.api_gateway" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.openapi.normalizer.api_gateway"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.hydra.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.hydra.normalizer.constraint_violation_list"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.problem.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.problem.normalizer.constraint_violation_list"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.graphql.normalizer.validation_exception" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.graphql.normalizer.validation_exception"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.graphql.normalizer.http_exception" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.graphql.normalizer.http_exception"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.graphql.normalizer.runtime_exception" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.graphql.normalizer.runtime_exception"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.graphql.normalizer.error" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.graphql.normalizer.error"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.openapi.normalizer" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.openapi.normalizer.api_gateway"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.jsonld.normalizer.validation_exception" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.jsonld.normalizer.validation_exception"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.hydra.normalizer.documentation" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.hydra.normalizer.documentation"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.hydra.normalizer.entrypoint" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.hydra.normalizer.entrypoint"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.hydra.normalizer.error" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.hydra.normalizer.error"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.serializer.normalizer.validation_exception" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.serializer.normalizer.validation_exception"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.problem.normalizer.error" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.problem.normalizer.error"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.problem" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.problem"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.uid" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.uid"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.jsonld.normalizer.item" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.jsonld.normalizer.item"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.graphql.normalizer.item" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.graphql.normalizer.item"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.serializer.normalizer.item" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.serializer.normalizer.item"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.serializer.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.serializer.normalizer.constraint_violation_list"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.datetime" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.datetime"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.constraint_violation_list"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.mime_message" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.mime_message"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.datetimezone" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.datetimezone"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.dateinterval" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.dateinterval"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.form_error" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.form_error"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.backed_enum" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.backed_enum"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.data_uri" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.data_uri"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.json_serializable" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.json_serializable"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.hydra.normalizer.collection" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.hydra.normalizer.collection_filters"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.denormalizer.array" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.denormalizer.array"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.jsonld.normalizer.object" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.jsonld.normalizer.object"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.api_platform.graphql.normalizer.object" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="api_platform.graphql.normalizer.object"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.normalizer.serializer.normalizer.object" class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
      <argument type="service" id="serializer.normalizer.object"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.serializer.encoder.xml" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="serializer.encoder.xml"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.serializer.encoder.json" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="serializer.encoder.json"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.serializer.encoder.yaml" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="serializer.encoder.yaml"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.serializer.encoder.csv" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="serializer.encoder.csv"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.api_platform.jsonopenapi.encoder" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="api_platform.jsonopenapi.encoder"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.api_platform.yamlopenapi.encoder" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="api_platform.yamlopenapi.encoder"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.api_platform.jsonld.encoder" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="api_platform.jsonld.encoder"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.serializer.encoder.api_platform.problem.encoder" class="Symfony\Component\Serializer\Debug\TraceableEncoder">
      <argument type="service" id="api_platform.problem.encoder"/>
      <argument type="service" id="serializer.data_collector"/>
    </service>
    <service id=".debug.value_resolver.security.user_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="security.user_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.security.security_token_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="security.security_token_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.doctrine.orm.entity_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="doctrine.orm.entity_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.backed_enum_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.datetime"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request_attribute"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.session"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.api_platform.argument_resolver.payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="api_platform.argument_resolver.payload"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.service"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.default"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.variadic"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.not_tagged_controller" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.not_tagged_controller"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request_payload"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.query_parameter_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".service_locator.YdAW.ov" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Form\PersonneType" type="service_closure" id="App\Form\PersonneType"/>
        <argument key="App\Form\TestType" type="service_closure" id="App\Form\TestType"/>
        <argument key="Symfony\Bridge\Doctrine\Form\Type\EntityType" type="service_closure" id="form.type.entity"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\ChoiceType" type="service_closure" id="form.type.choice"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\ColorType" type="service_closure" id="form.type.color"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\FileType" type="service_closure" id="form.type.file"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="service_closure" id="form.type.form"/>
        <argument key="Vich\UploaderBundle\Form\Type\VichFileType" type="service_closure" id="vich_uploader.form.type.file"/>
        <argument key="Vich\UploaderBundle\Form\Type\VichImageType" type="service_closure" id="vich_uploader.form.type.image"/>
      </argument>
    </service>
    <service id=".debug.http_client" class="Symfony\Component\HttpClient\TraceableHttpClient">
      <tag name="http_client.client"/>
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="http_client" inner="http_client.uri_template.inner"/>
      <argument type="service" id="http_client.uri_template"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
    </service>
    <service id=".service_locator.Iv5zWDQ" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine.orm.default_listeners.attach_entity_listeners" type="service_closure" id="doctrine.orm.default_listeners.attach_entity_listeners"/>
        <argument key="doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener" type="service_closure" id="doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener"/>
        <argument key="doctrine.orm.listeners.doctrine_token_provider_schema_listener" type="service_closure" id="doctrine.orm.listeners.doctrine_token_provider_schema_listener"/>
        <argument key="doctrine.orm.listeners.lock_store_schema_listener" type="service_closure" id="doctrine.orm.listeners.lock_store_schema_listener"/>
        <argument key="doctrine.orm.listeners.pdo_session_handler_schema_listener" type="service_closure" id="doctrine.orm.listeners.pdo_session_handler_schema_listener"/>
        <argument key="vich_uploader.listener.clean.media_uploads" type="service_closure" id="vich_uploader.listener.clean.media_uploads"/>
        <argument key="vich_uploader.listener.remove.media_uploads" type="service_closure" id="vich_uploader.listener.remove.media_uploads"/>
        <argument key="vich_uploader.listener.upload.media_uploads" type="service_closure" id="vich_uploader.listener.upload.media_uploads"/>
      </argument>
    </service>
    <service id=".service_locator.LeyfvDN" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Repository\BookingRepository" type="service_closure" id="App\Repository\BookingRepository"/>
        <argument key="App\Repository\CategoryRepository" type="service_closure" id="App\Repository\CategoryRepository"/>
        <argument key="App\Repository\EmployeeScheduleRepository" type="service_closure" id="App\Repository\EmployeeScheduleRepository"/>
        <argument key="App\Repository\EstablishmentRepository" type="service_closure" id="App\Repository\EstablishmentRepository"/>
        <argument key="App\Repository\FeedbackRepository" type="service_closure" id="App\Repository\FeedbackRepository"/>
        <argument key="App\Repository\MediaRepository" type="service_closure" id="App\Repository\MediaRepository"/>
        <argument key="App\Repository\PrestataireRepository" type="service_closure" id="App\Repository\PrestataireRepository"/>
        <argument key="App\Repository\PrestationRepository" type="service_closure" id="App\Repository\PrestationRepository"/>
        <argument key="App\Repository\SlotRepository" type="service_closure" id="App\Repository\SlotRepository"/>
        <argument key="App\Repository\TestRepository" type="service_closure" id="App\Repository\TestRepository"/>
        <argument key="App\Repository\UserRepository" type="service_closure" id="App\Repository\UserRepository"/>
        <argument key="App\Repository\VideoRepository" type="service_closure" id="App\Repository\VideoRepository"/>
      </argument>
    </service>
    <service id=".service_locator.KLVvNIq" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine.ulid_generator" type="service_closure" id="doctrine.ulid_generator"/>
        <argument key="doctrine.uuid_generator" type="service_closure" id="doctrine.uuid_generator"/>
      </argument>
    </service>
    <service id=".doctrine.orm.default_metadata_driver" class="Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver">
      <tag name="container.decorator" id="doctrine.orm.default_metadata_driver" inner=".doctrine.orm.default_metadata_driver.inner"/>
      <argument type="service" id=".doctrine.orm.default_metadata_driver.inner"/>
      <argument type="service" id=".service_locator.KLVvNIq"/>
    </service>
    <service id="doctrine.dbal.logging_middleware.default" class="Doctrine\DBAL\Logging\Middleware">
      <argument type="service" id="monolog.logger.doctrine"/>
    </service>
    <service id="doctrine.dbal.debug_middleware.default" class="Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware">
      <argument type="service" id="doctrine.debug_data_holder"/>
      <argument type="service" id="debug.stopwatch" on-invalid="null"/>
      <call method="setConnectionName">
        <argument>default</argument>
      </call>
    </service>
    <service id=".debug.security.voter.security.access.authenticated_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.authenticated_voter"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id=".debug.security.voter.security.access.role_hierarchy_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.role_hierarchy_voter"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id=".debug.security.voter.security.access.expression_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.expression_voter"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="security.listener.csrf_protection" class="Symfony\Component\Security\Http\EventListener\CsrfProtectionListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.csrf.token_manager"/>
    </service>
    <service id="security.logout.listener.csrf_token_clearing" class="Symfony\Component\Security\Http\EventListener\CsrfTokenClearingLogoutListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.csrf.token_storage"/>
    </service>
    <service id="security.ldap_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection"/>
    </service>
    <service id="monolog.logger.request" class="Symfony\Bridge\Monolog\Logger">
      <argument>request</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.console" class="Symfony\Bridge\Monolog\Logger">
      <argument>console</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.cache" class="Symfony\Bridge\Monolog\Logger">
      <argument>cache</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.http_client" class="Symfony\Bridge\Monolog\Logger">
      <argument>http_client</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.mailer" class="Symfony\Bridge\Monolog\Logger">
      <argument>mailer</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.php" class="Symfony\Bridge\Monolog\Logger">
      <argument>php</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.event" class="Symfony\Bridge\Monolog\Logger">
      <argument>event</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.null_internal"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.router" class="Symfony\Bridge\Monolog\Logger">
      <argument>router</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.profiler" class="Symfony\Bridge\Monolog\Logger">
      <argument>profiler</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.doctrine" class="Symfony\Bridge\Monolog\Logger">
      <argument>doctrine</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.security" class="Symfony\Bridge\Monolog\Logger">
      <argument>security</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.debug" class="Symfony\Bridge\Monolog\Logger">
      <argument>debug</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.logger.deprecation" class="Symfony\Bridge\Monolog\Logger" public="true">
      <argument>deprecation</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <configurator class="Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass" method="configureLogger"/>
    </service>
    <service id="monolog.handler.null_internal" class="Monolog\Handler\NullHandler"/>
    <service id=".service_locator.GoygnKG" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="default.storage" type="service_closure" id="default.storage"/>
      </argument>
    </service>
    <service id="debug.security.event_dispatcher.api" class="Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher">
      <tag name="security.event_dispatcher.api">event_dispatcher.dispatcher</tag>
      <tag name="container.decorator" id="security.event_dispatcher.api" inner="debug.security.event_dispatcher.api.inner"/>
      <argument type="service" id="debug.security.event_dispatcher.api.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.api.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.api"/>
          <argument>preCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>security.authentication.success</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.api"/>
          <argument>postCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.check_authenticator_credentials"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.password_migrating"/>
          <argument>onLoginSuccess</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.csrf_protection"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>512</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.csrf_token_clearing"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="debug.security.event_dispatcher.main" class="Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher">
      <tag name="security.event_dispatcher.main">event_dispatcher.dispatcher</tag>
      <tag name="container.decorator" id="security.event_dispatcher.main" inner="debug.security.event_dispatcher.main.inner"/>
      <argument type="service" id="debug.security.event_dispatcher.main.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.main.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.session.main"/>
          <argument>onSuccessfulLogin</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.default.main"/>
          <argument>onLogout</argument>
        </argument>
        <argument>64</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.session.main"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.main"/>
          <argument>preCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>security.authentication.success</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.main"/>
          <argument>postCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.check_authenticator_credentials"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.password_migrating"/>
          <argument>onLoginSuccess</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.csrf_protection"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>512</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.csrf_token_clearing"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id=".service_locator.O2p6Lk7" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="form.factory" type="service_closure" id="form.factory" on-invalid="ignore"/>
        <argument key="http_kernel" type="service_closure" id="http_kernel" on-invalid="ignore"/>
        <argument key="parameter_bag" type="service_closure" id="parameter_bag" on-invalid="ignore"/>
        <argument key="request_stack" type="service_closure" id="request_stack" on-invalid="ignore"/>
        <argument key="router" type="service_closure" id="router.default" on-invalid="ignore"/>
        <argument key="security.authorization_checker" type="service_closure" id="security.authorization_checker" on-invalid="ignore"/>
        <argument key="security.csrf.token_manager" type="service_closure" id="security.csrf.token_manager" on-invalid="ignore"/>
        <argument key="security.token_storage" type="service_closure" id="security.token_storage" on-invalid="ignore"/>
        <argument key="serializer" type="service_closure" id="debug.serializer" on-invalid="ignore"/>
        <argument key="twig" type="service_closure" id="twig" on-invalid="ignore"/>
        <argument key="web_link.http_header_serializer" type="service_closure" id="web_link.http_header_serializer" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\AddEstablishmentToPrestataireController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\AddEstablishmentToPrestataireController"/>
      <argument>App\Controller\AddEstablishmentToPrestataireController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\AddPrestationToEstablishmentController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\AddPrestationToEstablishmentController"/>
      <argument>App\Controller\AddPrestationToEstablishmentController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\DeleteEstablishmentController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\DeleteEstablishmentController"/>
      <argument>App\Controller\DeleteEstablishmentController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\DeletePrestataireController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\DeletePrestataireController"/>
      <argument>App\Controller\DeletePrestataireController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\DeteteBookingController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\DeteteBookingController"/>
      <argument>App\Controller\DeteteBookingController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\GetEstablishmentsByPrestataireController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\GetEstablishmentsByPrestataireController"/>
      <argument>App\Controller\GetEstablishmentsByPrestataireController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\MediaOploaderController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\MediaOploaderController"/>
      <argument>App\Controller\MediaOploaderController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\PaymentController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\PaymentController"/>
      <argument>App\Controller\PaymentController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\RegisterPrestataireController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\RegisterPrestataireController"/>
      <argument>App\Controller\RegisterPrestataireController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\RegistrationController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\RegistrationController"/>
      <argument>App\Controller\RegistrationController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\ResearchPrestationController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\ResearchPrestationController"/>
      <argument>App\Controller\ResearchPrestationController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\TestController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\TestController"/>
      <argument>App\Controller\TestController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\VideoOploaderController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\VideoOploaderController"/>
      <argument>App\Controller\VideoOploaderController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.yEoeHjj" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service_closure" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.yEoeHjj.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.yEoeHjj" method="withContext"/>
    </service>
    <service id=".service_locator.cUcW89y" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service_closure" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.cUcW89y.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.cUcW89y" method="withContext"/>
    </service>
    <service id=".service_locator.etVElvN" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="twig" type="service_closure" id="twig"/>
      </argument>
    </service>
    <service id=".service_locator.etVElvN.twig.template_cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="twig.template_cache_warmer"/>
      <argument>twig.template_cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.etVElvN" method="withContext"/>
    </service>
    <service id=".service_locator.Lo8jEUu" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Doctrine\ArgumentResolver\EntityValueResolver" type="service_closure" id=".debug.value_resolver.doctrine.orm.entity_value_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.backed_enum_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.datetime"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.default"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.query_parameter_value_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request_attribute"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request_payload"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.service"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.session"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.variadic"/>
        <argument key="Symfony\Component\Security\Http\Controller\SecurityTokenValueResolver" type="service_closure" id=".debug.value_resolver.security.security_token_value_resolver"/>
        <argument key="Symfony\Component\Security\Http\Controller\UserValueResolver" type="service_closure" id=".debug.value_resolver.security.user_value_resolver"/>
        <argument key="api_platform.argument_resolver.payload" type="service_closure" id=".debug.value_resolver.api_platform.argument_resolver.payload"/>
        <argument key="argument_resolver.not_tagged_controller" type="service_closure" id=".debug.value_resolver.argument_resolver.not_tagged_controller"/>
      </argument>
    </service>
    <service id=".service_locator.XXv1IfR" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.NBUFN6A" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="cache.app" type="service_closure" id="cache.app.taggable"/>
      </argument>
    </service>
    <service id=".service_locator.im8QGPA" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="event_dispatcher" type="service_closure" id="debug.event_dispatcher"/>
        <argument key="security.event_dispatcher.api" type="service_closure" id="debug.security.event_dispatcher.api"/>
        <argument key="security.event_dispatcher.main" type="service_closure" id="debug.security.event_dispatcher.main"/>
      </argument>
    </service>
    <service id=".service_locator..6hZeC_" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel" type="service_closure" id="kernel"/>
      </argument>
    </service>
    <service id=".service_locator.Kl0E_Fe" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="env" type="service_closure" id="container.getenv"/>
        <argument key="service" type="service_closure" id="container.get_routing_condition_service"/>
      </argument>
    </service>
    <service id=".service_locator.cXsfP3P" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service_closure" id="monolog.logger" on-invalid="ignore"/>
        <argument key="session_collector" type="service_closure" id="data_collector.request.session_collector" on-invalid="ignore"/>
        <argument key="session_factory" type="service_closure" id="session.factory" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.LcVn9Hr" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="request_stack" type="service_closure" id="request_stack"/>
      </argument>
    </service>
    <service id=".service_locator.LrCXAmX" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="request_stack" type="service_closure" id="request_stack"/>
        <argument key="security.authenticator.managers_locator" type="service_closure" id="security.authenticator.managers_locator" on-invalid="ignore"/>
        <argument key="security.authorization_checker" type="service_closure" id="security.authorization_checker"/>
        <argument key="security.csrf.token_manager" type="service_closure" id="security.csrf.token_manager" on-invalid="ignore"/>
        <argument key="security.firewall.event_dispatcher_locator" type="service_closure" id="security.firewall.event_dispatcher_locator"/>
        <argument key="security.firewall.map" type="service_closure" id="security.firewall.map"/>
        <argument key="security.token_storage" type="service_closure" id="security.token_storage"/>
        <argument key="security.user_checker" type="service_closure" id="security.user_checker"/>
      </argument>
    </service>
    <service id=".service_locator.LX5ZkG." class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="ApiPlatform\Doctrine\Orm\State\CollectionProvider" type="service_closure" id="api_platform.doctrine.orm.state.collection_provider"/>
        <argument key="ApiPlatform\Doctrine\Orm\State\ItemProvider" type="service_closure" id="api_platform.doctrine.orm.state.item_provider"/>
        <argument key="ApiPlatform\State\CreateProvider" type="service_closure" id="api_platform.state_provider.create"/>
        <argument key="ApiPlatform\State\ObjectProvider" type="service_closure" id="api_platform.state_provider.object"/>
        <argument key="App\State\GetBookingsStateProvider" type="service_closure" id="App\State\GetBookingsStateProvider"/>
        <argument key="App\State\GetEmployeesByPrestataireStateProvider" type="service_closure" id="App\State\GetEmployeesByPrestataireStateProvider"/>
        <argument key="App\State\GetEmployeesStateProvider" type="service_closure" id="App\State\GetEmployeesStateProvider"/>
        <argument key="App\State\GetEstablishmentByPrestataireStateProvider" type="service_closure" id="App\State\GetEstablishmentByPrestataireStateProvider"/>
        <argument key="App\State\GetEstablishmentsStateProvider" type="service_closure" id="App\State\GetEstablishmentsStateProvider"/>
        <argument key="App\State\GetOneEstablishmentStateProvider" type="service_closure" id="App\State\GetOneEstablishmentStateProvider"/>
        <argument key="App\State\GetPrestatairesForUserStateProvider" type="service_closure" id="App\State\GetPrestatairesForUserStateProvider"/>
        <argument key="api_platform.doctrine.orm.state.collection_provider" type="service_closure" id="api_platform.doctrine.orm.state.collection_provider"/>
        <argument key="api_platform.doctrine.orm.state.item_provider" type="service_closure" id="api_platform.doctrine.orm.state.item_provider"/>
        <argument key="api_platform.state_provider.create" type="service_closure" id="api_platform.state_provider.create"/>
        <argument key="api_platform.state_provider.object" type="service_closure" id="api_platform.state_provider.object"/>
      </argument>
    </service>
    <service id=".service_locator.ALB1BEI" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="ApiPlatform\Doctrine\Common\State\PersistProcessor" type="service_closure" id="api_platform.doctrine.orm.state.persist_processor"/>
        <argument key="ApiPlatform\Doctrine\Common\State\RemoveProcessor" type="service_closure" id="api_platform.doctrine.orm.state.remove_processor"/>
        <argument key="App\State\ApprovePrestataireProcessor" type="service_closure" id="App\State\ApprovePrestataireProcessor"/>
        <argument key="App\State\AssignManagerToEstablishmentStateProcessor" type="service_closure" id="App\State\AssignManagerToEstablishmentStateProcessor"/>
        <argument key="App\State\CreateEstablishmentProcessor" type="service_closure" id="App\State\CreateEstablishmentProcessor"/>
        <argument key="App\State\RegisterEmployeeProcessor" type="service_closure" id="App\State\RegisterEmployeeProcessor"/>
        <argument key="App\State\RegisterPrestataireProcessor" type="service_closure" id="App\State\RegisterPrestataireProcessor"/>
        <argument key="App\State\RejectPrestataireProcessor" type="service_closure" id="App\State\RejectPrestataireProcessor"/>
        <argument key="App\State\UserPasswordHasher" type="service_closure" id="App\State\UserPasswordHasher"/>
        <argument key="App\State\UserPatchProcessor" type="service_closure" id="App\State\UserPatchProcessor"/>
        <argument key="api_platform.doctrine.orm.state.persist_processor" type="service_closure" id="api_platform.doctrine.orm.state.persist_processor"/>
        <argument key="api_platform.doctrine.orm.state.remove_processor" type="service_closure" id="api_platform.doctrine.orm.state.remove_processor"/>
        <argument key="api_platform.swagger_ui.processor" type="service_closure" id="api_platform.swagger_ui.processor"/>
      </argument>
    </service>
    <service id="debug.validator.inner" class="Symfony\Component\Validator\Validator\ValidatorInterface">
      <factory service="validator.builder" method="getValidator"/>
    </service>
    <service id="api_platform.doctrine.orm.metadata.resource.link_factory.inner" class="ApiPlatform\Metadata\Resource\Factory\LinkFactory">
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
    </service>
    <service id="http_client.uri_template.inner" class="Symfony\Contracts\HttpClient\HttpClientInterface">
      <argument type="collection">
        <argument type="service" id="http_client.transport"/>
      </argument>
      <factory function="current"/>
    </service>
    <service id="debug.event_dispatcher.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="debug.controller_resolver.inner" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver">
      <argument type="service" id="service_container"/>
      <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
    </service>
    <service id="debug.argument_resolver.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id=".debug.value_resolver.security.user_value_resolver"/>
        <argument type="service" id=".debug.value_resolver.security.security_token_value_resolver"/>
        <argument type="service" id=".debug.value_resolver.doctrine.orm.entity_value_resolver"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.backed_enum_resolver"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.datetime"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.request_attribute"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.request"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.session"/>
        <argument type="service" id=".debug.value_resolver.api_platform.argument_resolver.payload"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.service"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.default"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.variadic"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.not_tagged_controller"/>
      </argument>
      <argument type="service" id=".service_locator.Lo8jEUu"/>
    </service>
    <service id="debug.serializer.inner" class="Symfony\Component\Serializer\Serializer">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.denormalizer.unwrapping"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.openapi.normalizer.api_gateway"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.hydra.normalizer.constraint_violation_list"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.problem.normalizer.constraint_violation_list"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.graphql.normalizer.validation_exception"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.graphql.normalizer.http_exception"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.graphql.normalizer.runtime_exception"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.graphql.normalizer.error"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.openapi.normalizer.api_gateway"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.jsonld.normalizer.validation_exception"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.hydra.normalizer.documentation"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.hydra.normalizer.entrypoint"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.hydra.normalizer.error"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.serializer.normalizer.validation_exception"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.problem.normalizer.error"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.problem"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.uid"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.jsonld.normalizer.item"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.graphql.normalizer.item"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.serializer.normalizer.item"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.serializer.normalizer.constraint_violation_list"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.datetime"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.constraint_violation_list"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.mime_message"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.datetimezone"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.dateinterval"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.form_error"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.backed_enum"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.data_uri"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.json_serializable"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.hydra.normalizer.collection_filters"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.denormalizer.array"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.jsonld.normalizer.object"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="api_platform.graphql.normalizer.object"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableNormalizer">
            <argument type="service" id="serializer.normalizer.object"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
      </argument>
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="serializer.encoder.xml"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="serializer.encoder.json"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="serializer.encoder.yaml"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="serializer.encoder.csv"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="api_platform.jsonopenapi.encoder"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="api_platform.yamlopenapi.encoder"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="api_platform.jsonld.encoder"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Serializer\Debug\TraceableEncoder">
            <argument type="service" id="api_platform.problem.encoder"/>
            <argument type="service" id="serializer.data_collector"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="doctrine.migrations.container_aware_migrations_factory.inner" class="Doctrine\Migrations\Version\MigrationFactory">
      <factory service="doctrine.migrations.dependency_factory" method="getMigrationFactory"/>
    </service>
    <service id="debug.security.access.decision_manager.inner" class="Symfony\Component\Security\Core\Authorization\AccessDecisionManager">
      <argument type="iterator">
        <argument type="service" id=".debug.security.voter.security.access.authenticated_voter"/>
        <argument type="service" id=".debug.security.voter.security.access.role_hierarchy_voter"/>
        <argument type="service" id=".debug.security.voter.security.access.expression_voter"/>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy">
          <argument>false</argument>
        </service>
      </argument>
    </service>
    <service id="debug.security.firewall.authenticator.api.inner" class="Symfony\Component\Security\Http\Firewall\AuthenticatorManagerListener">
      <argument type="service" id="security.authenticator.manager.api"/>
    </service>
    <service id="debug.security.firewall.authenticator.main.inner" class="Symfony\Component\Security\Http\Firewall\AuthenticatorManagerListener">
      <argument type="service" id="security.authenticator.manager.main"/>
    </service>
    <service id="api_platform.serializer.context_builder.filter.inner" class="ApiPlatform\Serializer\SerializerContextBuilder">
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument>true</argument>
    </service>
    <service id="api_platform.state_processor.add_link_header.inner" class="ApiPlatform\State\Processor\RespondProcessor">
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.metadata.operation.metadata_factory"/>
    </service>
    <service id="api_platform.swagger_ui.provider.inner" class="ApiPlatform\State\Provider\ReadProvider">
      <argument type="service" id="api_platform.state_provider.locator"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter"/>
    </service>
    <service id="api_platform.hydra.json_schema.schema_factory.inner" class="ApiPlatform\JsonSchema\SchemaFactory">
      <argument type="service" id="api_platform.json_schema.type_factory" on-invalid="ignore"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="serializer.name_converter.metadata_aware" on-invalid="ignore"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
    </service>
    <service id="api_platform.hydra.normalizer.partial_collection_view.inner" class="ApiPlatform\Hydra\Serializer\CollectionNormalizer">
      <argument type="service" id="api_platform.jsonld.context_builder"/>
      <argument type="service" id="api_platform.resource_class_resolver"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument>null</argument>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.collection.inner" class="ApiPlatform\GraphQl\Resolver\Factory\CollectionResolverFactory">
      <argument type="service" id="api_platform.graphql.resolver.stage.read"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security_post_denormalize"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.serialize"/>
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.item.inner" class="ApiPlatform\GraphQl\Resolver\Factory\ItemResolverFactory">
      <argument type="service" id="api_platform.graphql.resolver.stage.read"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security_post_denormalize"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.serialize"/>
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.item_mutation.inner" class="ApiPlatform\GraphQl\Resolver\Factory\ItemMutationResolverFactory">
      <argument type="service" id="api_platform.graphql.resolver.stage.read"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security_post_denormalize"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.serialize"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.deserialize"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.write"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.validate"/>
      <argument type="service" id="api_platform.graphql.resolver_locator"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security_post_validation"/>
    </service>
    <service id="api_platform.graphql.data_collector.resolver.factory.item_subscription.inner" class="ApiPlatform\GraphQl\Resolver\Factory\ItemSubscriptionResolverFactory">
      <argument type="service" id="api_platform.graphql.resolver.stage.read"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.security"/>
      <argument type="service" id="api_platform.graphql.resolver.stage.serialize"/>
      <argument type="service" id="api_platform.graphql.subscription.subscription_manager"/>
      <argument>null</argument>
    </service>
    <service id="api_platform.state_provider.access_checker.post_deserialize.inner" class="ApiPlatform\State\Provider\DeserializeProvider">
      <argument type="service" id="api_platform.state_provider.access_checker"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.serializer.context_builder.filter"/>
      <argument>null</argument>
    </service>
    <service id="api_platform.state_provider.access_checker.post_validate.inner" class="ApiPlatform\Symfony\Validator\State\ValidateProvider">
      <argument type="service" id="api_platform.state_provider.query_parameter_validate"/>
      <argument type="service" id="api_platform.validator"/>
    </service>
    <service id="api_platform.graphql.state_provider.access_checker.inner" class="ApiPlatform\GraphQl\State\Provider\ReadProvider">
      <argument type="service" id="api_platform.state_provider.locator"/>
      <argument type="service" id="api_platform.symfony.iri_converter"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder" on-invalid="ignore"/>
      <argument>_</argument>
    </service>
    <service id="api_platform.graphql.state_provider.access_checker.post_deserialize.inner" class="ApiPlatform\GraphQl\State\Provider\DenormalizeProvider">
      <argument type="service" id="api_platform.graphql.state_provider.access_checker"/>
      <argument type="service" id="debug.serializer"/>
      <argument type="service" id="api_platform.graphql.serializer.context_builder"/>
    </service>
    <service id="api_platform.graphql.state_provider.access_checker.post_validate.inner" class="ApiPlatform\Symfony\Validator\State\ValidateProvider">
      <argument type="service" id="api_platform.graphql.state_provider.access_checker.post_deserialize"/>
      <argument type="service" id="api_platform.validator"/>
    </service>
    <service id="lexik_jwt_authentication.api_platform.openapi.factory.inner" class="ApiPlatform\OpenApi\Factory\OpenApiFactory">
      <argument type="service" id="api_platform.metadata.resource.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.resource.metadata_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.name_collection_factory.cached"/>
      <argument type="service" id="api_platform.metadata.property.metadata_factory.cached"/>
      <argument type="service" id="api_platform.hydra.json_schema.schema_factory"/>
      <argument type="service" id="api_platform.json_schema.type_factory"/>
      <argument type="service" id="api_platform.filter_locator"/>
      <argument>%api_platform.formats%</argument>
      <argument type="service" id="api_platform.openapi.options"/>
      <argument type="service" id="api_platform.pagination_options"/>
      <argument type="service" id="api_platform.router"/>
    </service>
    <service id="var_dumper.contextualized_cli_dumper.inner" class="Symfony\Component\VarDumper\Dumper\CliDumper">
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>0</argument>
      <call method="setDisplayOptions">
        <argument type="collection">
          <argument key="fileLinkFormat" type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
        </argument>
      </call>
    </service>
    <service id=".doctrine.orm.default_metadata_driver.inner" class="Doctrine\Persistence\Mapping\Driver\MappingDriverChain">
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_attribute_metadata_driver"/>
        <argument>App\Entity</argument>
      </call>
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_xml_metadata_driver"/>
        <argument>Vich\UploaderBundle\Entity</argument>
      </call>
    </service>
    <service id="debug.security.event_dispatcher.api.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="debug.security.event_dispatcher.main.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="api_platform.serializer.mapping.class_metadata_factory.inner" class="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory">
      <argument type="service" id="serializer.mapping.chain_loader"/>
    </service>
    <service id="api_platform.openapi.normalizer.api_gateway.inner" class="ApiPlatform\OpenApi\Serializer\OpenApiNormalizer">
      <argument type="service" id=".1_Serializer~VVjaGs4"/>
    </service>
    <service id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.y4_Zrx.&quot;: it needs an instance of &quot;Symfony\Component\Config\Loader\LoaderInterface&quot; but this type has been excluded from autowiring."/>
    </service>
    <service id=".errored..service_locator.God1HrF.App\Entity\Prestataire" class="App\Entity\Prestataire">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.God1HrF&quot;: it needs an instance of &quot;App\Entity\Prestataire&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.dG3EoB7.App\Entity\Establishment" class="App\Entity\Establishment">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.dG3EoB7&quot;: it needs an instance of &quot;App\Entity\Establishment&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.j5sevqx.App\Entity\Establishment" class="App\Entity\Establishment">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.j5sevqx&quot;: it needs an instance of &quot;App\Entity\Establishment&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.58iSd83.App\Entity\Prestataire" class="App\Entity\Prestataire">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.58iSd83&quot;: it needs an instance of &quot;App\Entity\Prestataire&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.Nwfon31.App\Entity\Booking" class="App\Entity\Booking">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.Nwfon31&quot;: it needs an instance of &quot;App\Entity\Booking&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.PSwBGfE.App\Entity\Prestataire" class="App\Entity\Prestataire">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.PSwBGfE&quot;: it needs an instance of &quot;App\Entity\Prestataire&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.Hz5btge.App\Entity\User" class="App\Entity\User">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.Hz5btge&quot;: it needs an instance of &quot;App\Entity\User&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".console.command.about.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>about</argument>
      <argument type="collection"/>
      <argument>Display information about the current project</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.about"/>
    </service>
    <service id=".console.command.assets_install.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>assets:install</argument>
      <argument type="collection"/>
      <argument>Install bundle's web assets under a public directory</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.assets_install"/>
    </service>
    <service id=".console.command.cache_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:clear</argument>
      <argument type="collection"/>
      <argument>Clear the cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_clear"/>
    </service>
    <service id=".console.command.cache_pool_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:clear</argument>
      <argument type="collection"/>
      <argument>Clear cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_clear"/>
    </service>
    <service id=".console.command.cache_pool_prune.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:prune</argument>
      <argument type="collection"/>
      <argument>Prune cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_prune"/>
    </service>
    <service id=".console.command.cache_pool_invalidate_tags.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:invalidate-tags</argument>
      <argument type="collection"/>
      <argument>Invalidate cache tags for all or a specific pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_invalidate_tags"/>
    </service>
    <service id=".console.command.cache_pool_delete.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:delete</argument>
      <argument type="collection"/>
      <argument>Delete an item from a cache pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_delete"/>
    </service>
    <service id=".console.command.cache_pool_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:list</argument>
      <argument type="collection"/>
      <argument>List available cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_list"/>
    </service>
    <service id=".console.command.cache_warmup.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:warmup</argument>
      <argument type="collection"/>
      <argument>Warm up an empty cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_warmup"/>
    </service>
    <service id=".console.command.config_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:config</argument>
      <argument type="collection"/>
      <argument>Dump the current configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_debug"/>
    </service>
    <service id=".console.command.config_dump_reference.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>config:dump-reference</argument>
      <argument type="collection"/>
      <argument>Dump the default configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_dump_reference"/>
    </service>
    <service id=".console.command.container_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:container</argument>
      <argument type="collection"/>
      <argument>Display current services for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_debug"/>
    </service>
    <service id=".console.command.container_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:container</argument>
      <argument type="collection"/>
      <argument>Ensure that arguments injected into services match type declarations</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_lint"/>
    </service>
    <service id=".console.command.debug_autowiring.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:autowiring</argument>
      <argument type="collection"/>
      <argument>List classes/interfaces you can use for autowiring</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.debug_autowiring"/>
    </service>
    <service id=".console.command.dotenv_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:dotenv</argument>
      <argument type="collection"/>
      <argument>Lists all dotenv files with variables and values</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.dotenv_debug"/>
    </service>
    <service id=".console.command.event_dispatcher_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:event-dispatcher</argument>
      <argument type="collection"/>
      <argument>Display configured listeners for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.event_dispatcher_debug"/>
    </service>
    <service id=".console.command.router_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:router</argument>
      <argument type="collection"/>
      <argument>Display current routes for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_debug"/>
    </service>
    <service id=".console.command.router_match.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>router:match</argument>
      <argument type="collection"/>
      <argument>Help debug routes by simulating a path info match</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_match"/>
    </service>
    <service id=".console.command.serializer_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:serializer</argument>
      <argument type="collection"/>
      <argument>Display serialization information for classes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.serializer_debug"/>
    </service>
    <service id=".console.command.validator_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:validator</argument>
      <argument type="collection"/>
      <argument>Display validation constraints for classes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.validator_debug"/>
    </service>
    <service id=".console.command.yaml_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:yaml</argument>
      <argument type="collection"/>
      <argument>Lint a YAML file and outputs encountered errors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.yaml_lint"/>
    </service>
    <service id=".console.command.form_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:form</argument>
      <argument type="collection"/>
      <argument>Display form type information</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.form_debug"/>
    </service>
    <service id=".console.command.secrets_set.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:set</argument>
      <argument type="collection"/>
      <argument>Set a secret in the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_set"/>
    </service>
    <service id=".console.command.secrets_remove.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:remove</argument>
      <argument type="collection"/>
      <argument>Remove a secret from the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_remove"/>
    </service>
    <service id=".console.command.secrets_generate_key.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:generate-keys</argument>
      <argument type="collection"/>
      <argument>Generate new encryption keys</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_generate_key"/>
    </service>
    <service id=".console.command.secrets_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:list</argument>
      <argument type="collection"/>
      <argument>List all secrets</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_list"/>
    </service>
    <service id=".console.command.secrets_decrypt_to_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:decrypt-to-local</argument>
      <argument type="collection"/>
      <argument>Decrypt all secrets and stores them in the local vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_decrypt_to_local"/>
    </service>
    <service id=".console.command.secrets_encrypt_from_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:encrypt-from-local</argument>
      <argument type="collection"/>
      <argument>Encrypt all local secrets to the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_encrypt_from_local"/>
    </service>
    <service id=".console.command.mailer_test.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>mailer:test</argument>
      <argument type="collection"/>
      <argument>Test Mailer transports by sending an email</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.mailer_test"/>
    </service>
    <service id=".doctrine_migrations.diff_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:diff</argument>
      <argument type="collection"/>
      <argument>Generate a migration by comparing your current database to your mapping information.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.diff_command"/>
    </service>
    <service id=".doctrine_migrations.sync_metadata_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:sync-metadata-storage</argument>
      <argument type="collection"/>
      <argument>Ensures that the metadata storage is at the latest version.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.sync_metadata_command"/>
    </service>
    <service id=".doctrine_migrations.versions_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:list</argument>
      <argument type="collection"/>
      <argument>Display a list of all available migrations and their status.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.versions_command"/>
    </service>
    <service id=".doctrine_migrations.current_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:current</argument>
      <argument type="collection"/>
      <argument>Outputs the current version</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.current_command"/>
    </service>
    <service id=".doctrine_migrations.dump_schema_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:dump-schema</argument>
      <argument type="collection"/>
      <argument>Dump the schema for your database to a migration.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.dump_schema_command"/>
    </service>
    <service id=".doctrine_migrations.execute_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:execute</argument>
      <argument type="collection"/>
      <argument>Execute one or more migration versions up or down manually.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.execute_command"/>
    </service>
    <service id=".doctrine_migrations.generate_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:generate</argument>
      <argument type="collection"/>
      <argument>Generate a blank migration class.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.generate_command"/>
    </service>
    <service id=".doctrine_migrations.latest_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:latest</argument>
      <argument type="collection"/>
      <argument>Outputs the latest version</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.latest_command"/>
    </service>
    <service id=".doctrine_migrations.migrate_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:migrate</argument>
      <argument type="collection"/>
      <argument>Execute a migration to a specified version or the latest available version.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.migrate_command"/>
    </service>
    <service id=".doctrine_migrations.rollup_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:rollup</argument>
      <argument type="collection"/>
      <argument>Rollup migrations by deleting all tracked versions and insert the one version that exists.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.rollup_command"/>
    </service>
    <service id=".doctrine_migrations.status_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:status</argument>
      <argument type="collection"/>
      <argument>View the status of a set of migrations.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.status_command"/>
    </service>
    <service id=".doctrine_migrations.up_to_date_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:up-to-date</argument>
      <argument type="collection"/>
      <argument>Tells you if your schema is up-to-date.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.up_to_date_command"/>
    </service>
    <service id=".doctrine_migrations.version_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>doctrine:migrations:version</argument>
      <argument type="collection"/>
      <argument>Manually add and delete migration versions from the version table.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="doctrine_migrations.version_command"/>
    </service>
    <service id=".twig.command.debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:twig</argument>
      <argument type="collection"/>
      <argument>Show a list of twig functions, filters, globals and tests</argument>
      <argument>false</argument>
      <argument type="service_closure" id="twig.command.debug"/>
    </service>
    <service id=".twig.command.lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:twig</argument>
      <argument type="collection"/>
      <argument>Lint a Twig template and outputs encountered errors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="twig.command.lint"/>
    </service>
    <service id=".hautelook_alice.console.command.doctrine.doctrine_orm_load_data_fixtures_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>hautelook:fixtures:load</argument>
      <argument type="collection"/>
      <argument>Load data fixtures to your database.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="hautelook_alice.console.command.doctrine.doctrine_orm_load_data_fixtures_command"/>
    </service>
    <service id=".security.command.debug_firewall.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:firewall</argument>
      <argument type="collection"/>
      <argument>Display information about your security firewall(s)</argument>
      <argument>false</argument>
      <argument type="service_closure" id="security.command.debug_firewall"/>
    </service>
    <service id=".security.command.user_password_hash.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>security:hash-password</argument>
      <argument type="collection"/>
      <argument>Hash a user password</argument>
      <argument>false</argument>
      <argument type="service_closure" id="security.command.user_password_hash"/>
    </service>
    <service id=".lexik_jwt_authentication.check_config_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lexik:jwt:check-config</argument>
      <argument type="collection"/>
      <argument>Checks that the bundle is properly configured.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="lexik_jwt_authentication.check_config_command"/>
    </service>
    <service id=".lexik_jwt_authentication.generate_token_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lexik:jwt:generate-token</argument>
      <argument type="collection"/>
      <argument>Generates a JWT token for a given user.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="lexik_jwt_authentication.generate_token_command"/>
    </service>
    <service id=".lexik_jwt_authentication.generate_keypair_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lexik:jwt:generate-keypair</argument>
      <argument type="collection"/>
      <argument>Generate public/private keys for use in your application.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="lexik_jwt_authentication.generate_keypair_command"/>
    </service>
    <service id=".var_dumper.command.server_dump.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>server:dump</argument>
      <argument type="collection"/>
      <argument>Start a dump server that collects and displays dumps in a single place</argument>
      <argument>false</argument>
      <argument type="service_closure" id="var_dumper.command.server_dump"/>
    </service>
    <service id=".monolog.command.server_log.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>server:log</argument>
      <argument type="collection"/>
      <argument>Start a log server that displays logs in real time</argument>
      <argument>false</argument>
      <argument type="service_closure" id="monolog.command.server_log"/>
    </service>
    <service id=".maker.auto_command.make_auth.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:auth</argument>
      <argument type="collection"/>
      <argument>Creates a Guard authenticator of different flavors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_auth"/>
    </service>
    <service id=".maker.auto_command.make_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:command</argument>
      <argument type="collection"/>
      <argument>Creates a new console command class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_command"/>
    </service>
    <service id=".maker.auto_command.make_twig_component.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-component</argument>
      <argument type="collection"/>
      <argument>Creates a twig (or live) component</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_component"/>
    </service>
    <service id=".maker.auto_command.make_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:controller</argument>
      <argument type="collection"/>
      <argument>Creates a new controller class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_controller"/>
    </service>
    <service id=".maker.auto_command.make_crud.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:crud</argument>
      <argument type="collection"/>
      <argument>Creates CRUD for Doctrine entity class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_crud"/>
    </service>
    <service id=".maker.auto_command.make_docker_database.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:docker:database</argument>
      <argument type="collection"/>
      <argument>Adds a database container to your docker-compose.yaml file</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_docker_database"/>
    </service>
    <service id=".maker.auto_command.make_entity.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:entity</argument>
      <argument type="collection"/>
      <argument>Creates or updates a Doctrine entity class, and optionally an API Platform resource</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_entity"/>
    </service>
    <service id=".maker.auto_command.make_fixtures.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:fixtures</argument>
      <argument type="collection"/>
      <argument>Creates a new class to load Doctrine fixtures</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_fixtures"/>
    </service>
    <service id=".maker.auto_command.make_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:form</argument>
      <argument type="collection"/>
      <argument>Creates a new form class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_form"/>
    </service>
    <service id=".maker.auto_command.make_message.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:message</argument>
      <argument type="collection"/>
      <argument>Creates a new message and handler</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_message"/>
    </service>
    <service id=".maker.auto_command.make_messenger_middleware.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:messenger-middleware</argument>
      <argument type="collection"/>
      <argument>Creates a new messenger middleware</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_messenger_middleware"/>
    </service>
    <service id=".maker.auto_command.make_registration_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:registration-form</argument>
      <argument type="collection"/>
      <argument>Creates a new registration form system</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_registration_form"/>
    </service>
    <service id=".maker.auto_command.make_reset_password.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:reset-password</argument>
      <argument type="collection"/>
      <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_reset_password"/>
    </service>
    <service id=".maker.auto_command.make_serializer_encoder.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:encoder</argument>
      <argument type="collection"/>
      <argument>Creates a new serializer encoder class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_encoder"/>
    </service>
    <service id=".maker.auto_command.make_serializer_normalizer.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:normalizer</argument>
      <argument type="collection"/>
      <argument>Creates a new serializer normalizer class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_normalizer"/>
    </service>
    <service id=".maker.auto_command.make_subscriber.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:subscriber</argument>
      <argument type="collection"/>
      <argument>Creates a new event subscriber class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_subscriber"/>
    </service>
    <service id=".maker.auto_command.make_twig_extension.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-extension</argument>
      <argument type="collection"/>
      <argument>Creates a new Twig extension with its runtime class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_extension"/>
    </service>
    <service id=".maker.auto_command.make_test.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:test</argument>
      <argument type="collection">
        <argument>make:unit-test</argument>
        <argument>make:functional-test</argument>
      </argument>
      <argument>Creates a new test class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_test"/>
    </service>
    <service id=".maker.auto_command.make_validator.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:validator</argument>
      <argument type="collection"/>
      <argument>Creates a new validator and constraint class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_validator"/>
    </service>
    <service id=".maker.auto_command.make_voter.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:voter</argument>
      <argument type="collection"/>
      <argument>Creates a new security voter class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_voter"/>
    </service>
    <service id=".maker.auto_command.make_user.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:user</argument>
      <argument type="collection"/>
      <argument>Creates a new security user class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_user"/>
    </service>
    <service id=".maker.auto_command.make_migration.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:migration</argument>
      <argument type="collection"/>
      <argument>Creates a new migration based on database changes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_migration"/>
    </service>
    <service id=".maker.auto_command.make_stimulus_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:stimulus-controller</argument>
      <argument type="collection"/>
      <argument>Creates a new Stimulus controller</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_stimulus_controller"/>
    </service>
    <service id=".maker.auto_command.make_security_form_login.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:security:form-login</argument>
      <argument type="collection"/>
      <argument>Generate the code needed for the form_login authenticator</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_security_form_login"/>
    </service>
    <service id=".maker.auto_command.make_state_processor.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:state-processor</argument>
      <argument type="collection"/>
      <argument>Creates an API Platform state processor</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_state_processor"/>
    </service>
    <service id=".maker.auto_command.make_state_provider.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:state-provider</argument>
      <argument type="collection"/>
      <argument>Creates an API Platform state provider</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_state_provider"/>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.CDyDrc2"/>
      <argument type="collection">
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:invalidate-tags">console.command.cache_pool_invalidate_tags</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="lint:container">console.command.container_lint</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:dotenv">console.command.dotenv_debug</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="debug:serializer">console.command.serializer_debug</argument>
        <argument key="debug:validator">console.command.validator_debug</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="debug:form">console.command.form_debug</argument>
        <argument key="secrets:set">console.command.secrets_set</argument>
        <argument key="secrets:remove">console.command.secrets_remove</argument>
        <argument key="secrets:generate-keys">console.command.secrets_generate_key</argument>
        <argument key="secrets:list">console.command.secrets_list</argument>
        <argument key="secrets:decrypt-to-local">console.command.secrets_decrypt_to_local</argument>
        <argument key="secrets:encrypt-from-local">console.command.secrets_encrypt_from_local</argument>
        <argument key="mailer:test">console.command.mailer_test</argument>
        <argument key="doctrine:database:create">doctrine.database_create_command</argument>
        <argument key="doctrine:database:drop">doctrine.database_drop_command</argument>
        <argument key="doctrine:query:sql">doctrine.query_sql_command</argument>
        <argument key="dbal:run-sql">Doctrine\DBAL\Tools\Console\Command\RunSqlCommand</argument>
        <argument key="doctrine:cache:clear-metadata">doctrine.cache_clear_metadata_command</argument>
        <argument key="doctrine:cache:clear-query">doctrine.cache_clear_query_cache_command</argument>
        <argument key="doctrine:cache:clear-result">doctrine.cache_clear_result_command</argument>
        <argument key="doctrine:cache:clear-collection-region">doctrine.cache_collection_region_command</argument>
        <argument key="doctrine:mapping:convert">doctrine.mapping_convert_command</argument>
        <argument key="doctrine:schema:create">doctrine.schema_create_command</argument>
        <argument key="doctrine:schema:drop">doctrine.schema_drop_command</argument>
        <argument key="doctrine:ensure-production-settings">doctrine.ensure_production_settings_command</argument>
        <argument key="doctrine:cache:clear-entity-region">doctrine.clear_entity_region_command</argument>
        <argument key="doctrine:mapping:info">doctrine.mapping_info_command</argument>
        <argument key="doctrine:cache:clear-query-region">doctrine.clear_query_region_command</argument>
        <argument key="doctrine:query:dql">doctrine.query_dql_command</argument>
        <argument key="doctrine:schema:update">doctrine.schema_update_command</argument>
        <argument key="doctrine:schema:validate">doctrine.schema_validate_command</argument>
        <argument key="doctrine:mapping:import">doctrine.mapping_import_command</argument>
        <argument key="doctrine:migrations:diff">doctrine_migrations.diff_command</argument>
        <argument key="doctrine:migrations:sync-metadata-storage">doctrine_migrations.sync_metadata_command</argument>
        <argument key="doctrine:migrations:list">doctrine_migrations.versions_command</argument>
        <argument key="doctrine:migrations:current">doctrine_migrations.current_command</argument>
        <argument key="doctrine:migrations:dump-schema">doctrine_migrations.dump_schema_command</argument>
        <argument key="doctrine:migrations:execute">doctrine_migrations.execute_command</argument>
        <argument key="doctrine:migrations:generate">doctrine_migrations.generate_command</argument>
        <argument key="doctrine:migrations:latest">doctrine_migrations.latest_command</argument>
        <argument key="doctrine:migrations:migrate">doctrine_migrations.migrate_command</argument>
        <argument key="doctrine:migrations:rollup">doctrine_migrations.rollup_command</argument>
        <argument key="doctrine:migrations:status">doctrine_migrations.status_command</argument>
        <argument key="doctrine:migrations:up-to-date">doctrine_migrations.up_to_date_command</argument>
        <argument key="doctrine:migrations:version">doctrine_migrations.version_command</argument>
        <argument key="debug:twig">twig.command.debug</argument>
        <argument key="lint:twig">twig.command.lint</argument>
        <argument key="hautelook:fixtures:load">hautelook_alice.console.command.doctrine.doctrine_orm_load_data_fixtures_command</argument>
        <argument key="debug:firewall">security.command.debug_firewall</argument>
        <argument key="security:hash-password">security.command.user_password_hash</argument>
        <argument key="api:json-schema:generate">api_platform.json_schema.json_schema_generate_command</argument>
        <argument key="api:openapi:export">api_platform.openapi.command</argument>
        <argument key="api:graphql:export">api_platform.graphql.command.export_command</argument>
        <argument key="debug:api-resource">debug.api_platform.debug_resource.command</argument>
        <argument key="lexik:jwt:check-config">lexik_jwt_authentication.check_config_command</argument>
        <argument key="lexik:jwt:generate-token">lexik_jwt_authentication.generate_token_command</argument>
        <argument key="lexik:jwt:generate-keypair">lexik_jwt_authentication.generate_keypair_command</argument>
        <argument key="server:dump">var_dumper.command.server_dump</argument>
        <argument key="server:log">monolog.command.server_log</argument>
        <argument key="doctrine:fixtures:load">doctrine.fixtures_load_command</argument>
        <argument key="vich:mapping:debug-class">vich_uploader.command.mapping_debug_class</argument>
        <argument key="vich:mapping:debug">vich_uploader.command.mapping_debug</argument>
        <argument key="vich:mapping:list-classes">vich_uploader.command.mapping_list_classes</argument>
        <argument key="make:auth">maker.auto_command.make_auth</argument>
        <argument key="make:command">maker.auto_command.make_command</argument>
        <argument key="make:twig-component">maker.auto_command.make_twig_component</argument>
        <argument key="make:controller">maker.auto_command.make_controller</argument>
        <argument key="make:crud">maker.auto_command.make_crud</argument>
        <argument key="make:docker:database">maker.auto_command.make_docker_database</argument>
        <argument key="make:entity">maker.auto_command.make_entity</argument>
        <argument key="make:fixtures">maker.auto_command.make_fixtures</argument>
        <argument key="make:form">maker.auto_command.make_form</argument>
        <argument key="make:message">maker.auto_command.make_message</argument>
        <argument key="make:messenger-middleware">maker.auto_command.make_messenger_middleware</argument>
        <argument key="make:registration-form">maker.auto_command.make_registration_form</argument>
        <argument key="make:reset-password">maker.auto_command.make_reset_password</argument>
        <argument key="make:serializer:encoder">maker.auto_command.make_serializer_encoder</argument>
        <argument key="make:serializer:normalizer">maker.auto_command.make_serializer_normalizer</argument>
        <argument key="make:subscriber">maker.auto_command.make_subscriber</argument>
        <argument key="make:twig-extension">maker.auto_command.make_twig_extension</argument>
        <argument key="make:test">maker.auto_command.make_test</argument>
        <argument key="make:unit-test">maker.auto_command.make_test</argument>
        <argument key="make:functional-test">maker.auto_command.make_test</argument>
        <argument key="make:validator">maker.auto_command.make_validator</argument>
        <argument key="make:voter">maker.auto_command.make_voter</argument>
        <argument key="make:user">maker.auto_command.make_user</argument>
        <argument key="make:migration">maker.auto_command.make_migration</argument>
        <argument key="make:stimulus-controller">maker.auto_command.make_stimulus_controller</argument>
        <argument key="make:security:form-login">maker.auto_command.make_security_form_login</argument>
        <argument key="make:state-processor">maker.auto_command.make_state_processor</argument>
        <argument key="make:state-provider">maker.auto_command.make_state_provider</argument>
      </argument>
    </service>
    <service id=".service_locator.CDyDrc2" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="console.command.about" type="service_closure" id=".console.command.about.lazy"/>
        <argument key="console.command.assets_install" type="service_closure" id=".console.command.assets_install.lazy"/>
        <argument key="console.command.cache_clear" type="service_closure" id=".console.command.cache_clear.lazy"/>
        <argument key="console.command.cache_pool_clear" type="service_closure" id=".console.command.cache_pool_clear.lazy"/>
        <argument key="console.command.cache_pool_prune" type="service_closure" id=".console.command.cache_pool_prune.lazy"/>
        <argument key="console.command.cache_pool_invalidate_tags" type="service_closure" id=".console.command.cache_pool_invalidate_tags.lazy"/>
        <argument key="console.command.cache_pool_delete" type="service_closure" id=".console.command.cache_pool_delete.lazy"/>
        <argument key="console.command.cache_pool_list" type="service_closure" id=".console.command.cache_pool_list.lazy"/>
        <argument key="console.command.cache_warmup" type="service_closure" id=".console.command.cache_warmup.lazy"/>
        <argument key="console.command.config_debug" type="service_closure" id=".console.command.config_debug.lazy"/>
        <argument key="console.command.config_dump_reference" type="service_closure" id=".console.command.config_dump_reference.lazy"/>
        <argument key="console.command.container_debug" type="service_closure" id=".console.command.container_debug.lazy"/>
        <argument key="console.command.container_lint" type="service_closure" id=".console.command.container_lint.lazy"/>
        <argument key="console.command.debug_autowiring" type="service_closure" id=".console.command.debug_autowiring.lazy"/>
        <argument key="console.command.dotenv_debug" type="service_closure" id=".console.command.dotenv_debug.lazy"/>
        <argument key="console.command.event_dispatcher_debug" type="service_closure" id=".console.command.event_dispatcher_debug.lazy"/>
        <argument key="console.command.router_debug" type="service_closure" id=".console.command.router_debug.lazy"/>
        <argument key="console.command.router_match" type="service_closure" id=".console.command.router_match.lazy"/>
        <argument key="console.command.serializer_debug" type="service_closure" id=".console.command.serializer_debug.lazy"/>
        <argument key="console.command.validator_debug" type="service_closure" id=".console.command.validator_debug.lazy"/>
        <argument key="console.command.yaml_lint" type="service_closure" id=".console.command.yaml_lint.lazy"/>
        <argument key="console.command.form_debug" type="service_closure" id=".console.command.form_debug.lazy"/>
        <argument key="console.command.secrets_set" type="service_closure" id=".console.command.secrets_set.lazy"/>
        <argument key="console.command.secrets_remove" type="service_closure" id=".console.command.secrets_remove.lazy"/>
        <argument key="console.command.secrets_generate_key" type="service_closure" id=".console.command.secrets_generate_key.lazy"/>
        <argument key="console.command.secrets_list" type="service_closure" id=".console.command.secrets_list.lazy"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service_closure" id=".console.command.secrets_decrypt_to_local.lazy"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service_closure" id=".console.command.secrets_encrypt_from_local.lazy"/>
        <argument key="console.command.mailer_test" type="service_closure" id=".console.command.mailer_test.lazy"/>
        <argument key="doctrine.database_create_command" type="service_closure" id="doctrine.database_create_command"/>
        <argument key="doctrine.database_drop_command" type="service_closure" id="doctrine.database_drop_command"/>
        <argument key="doctrine.query_sql_command" type="service_closure" id="doctrine.query_sql_command"/>
        <argument key="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand" type="service_closure" id="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand"/>
        <argument key="doctrine.cache_clear_metadata_command" type="service_closure" id="doctrine.cache_clear_metadata_command"/>
        <argument key="doctrine.cache_clear_query_cache_command" type="service_closure" id="doctrine.cache_clear_query_cache_command"/>
        <argument key="doctrine.cache_clear_result_command" type="service_closure" id="doctrine.cache_clear_result_command"/>
        <argument key="doctrine.cache_collection_region_command" type="service_closure" id="doctrine.cache_collection_region_command"/>
        <argument key="doctrine.mapping_convert_command" type="service_closure" id="doctrine.mapping_convert_command"/>
        <argument key="doctrine.schema_create_command" type="service_closure" id="doctrine.schema_create_command"/>
        <argument key="doctrine.schema_drop_command" type="service_closure" id="doctrine.schema_drop_command"/>
        <argument key="doctrine.ensure_production_settings_command" type="service_closure" id="doctrine.ensure_production_settings_command"/>
        <argument key="doctrine.clear_entity_region_command" type="service_closure" id="doctrine.clear_entity_region_command"/>
        <argument key="doctrine.mapping_info_command" type="service_closure" id="doctrine.mapping_info_command"/>
        <argument key="doctrine.clear_query_region_command" type="service_closure" id="doctrine.clear_query_region_command"/>
        <argument key="doctrine.query_dql_command" type="service_closure" id="doctrine.query_dql_command"/>
        <argument key="doctrine.schema_update_command" type="service_closure" id="doctrine.schema_update_command"/>
        <argument key="doctrine.schema_validate_command" type="service_closure" id="doctrine.schema_validate_command"/>
        <argument key="doctrine.mapping_import_command" type="service_closure" id="doctrine.mapping_import_command"/>
        <argument key="doctrine_migrations.diff_command" type="service_closure" id=".doctrine_migrations.diff_command.lazy"/>
        <argument key="doctrine_migrations.sync_metadata_command" type="service_closure" id=".doctrine_migrations.sync_metadata_command.lazy"/>
        <argument key="doctrine_migrations.versions_command" type="service_closure" id=".doctrine_migrations.versions_command.lazy"/>
        <argument key="doctrine_migrations.current_command" type="service_closure" id=".doctrine_migrations.current_command.lazy"/>
        <argument key="doctrine_migrations.dump_schema_command" type="service_closure" id=".doctrine_migrations.dump_schema_command.lazy"/>
        <argument key="doctrine_migrations.execute_command" type="service_closure" id=".doctrine_migrations.execute_command.lazy"/>
        <argument key="doctrine_migrations.generate_command" type="service_closure" id=".doctrine_migrations.generate_command.lazy"/>
        <argument key="doctrine_migrations.latest_command" type="service_closure" id=".doctrine_migrations.latest_command.lazy"/>
        <argument key="doctrine_migrations.migrate_command" type="service_closure" id=".doctrine_migrations.migrate_command.lazy"/>
        <argument key="doctrine_migrations.rollup_command" type="service_closure" id=".doctrine_migrations.rollup_command.lazy"/>
        <argument key="doctrine_migrations.status_command" type="service_closure" id=".doctrine_migrations.status_command.lazy"/>
        <argument key="doctrine_migrations.up_to_date_command" type="service_closure" id=".doctrine_migrations.up_to_date_command.lazy"/>
        <argument key="doctrine_migrations.version_command" type="service_closure" id=".doctrine_migrations.version_command.lazy"/>
        <argument key="twig.command.debug" type="service_closure" id=".twig.command.debug.lazy"/>
        <argument key="twig.command.lint" type="service_closure" id=".twig.command.lint.lazy"/>
        <argument key="hautelook_alice.console.command.doctrine.doctrine_orm_load_data_fixtures_command" type="service_closure" id=".hautelook_alice.console.command.doctrine.doctrine_orm_load_data_fixtures_command.lazy"/>
        <argument key="security.command.debug_firewall" type="service_closure" id=".security.command.debug_firewall.lazy"/>
        <argument key="security.command.user_password_hash" type="service_closure" id=".security.command.user_password_hash.lazy"/>
        <argument key="api_platform.json_schema.json_schema_generate_command" type="service_closure" id="api_platform.json_schema.json_schema_generate_command"/>
        <argument key="api_platform.openapi.command" type="service_closure" id="api_platform.openapi.command"/>
        <argument key="api_platform.graphql.command.export_command" type="service_closure" id="api_platform.graphql.command.export_command"/>
        <argument key="debug.api_platform.debug_resource.command" type="service_closure" id="debug.api_platform.debug_resource.command"/>
        <argument key="lexik_jwt_authentication.check_config_command" type="service_closure" id=".lexik_jwt_authentication.check_config_command.lazy"/>
        <argument key="lexik_jwt_authentication.generate_token_command" type="service_closure" id=".lexik_jwt_authentication.generate_token_command.lazy"/>
        <argument key="lexik_jwt_authentication.generate_keypair_command" type="service_closure" id=".lexik_jwt_authentication.generate_keypair_command.lazy"/>
        <argument key="var_dumper.command.server_dump" type="service_closure" id=".var_dumper.command.server_dump.lazy"/>
        <argument key="monolog.command.server_log" type="service_closure" id=".monolog.command.server_log.lazy"/>
        <argument key="doctrine.fixtures_load_command" type="service_closure" id="doctrine.fixtures_load_command"/>
        <argument key="vich_uploader.command.mapping_debug_class" type="service_closure" id="vich_uploader.command.mapping_debug_class"/>
        <argument key="vich_uploader.command.mapping_debug" type="service_closure" id="vich_uploader.command.mapping_debug"/>
        <argument key="vich_uploader.command.mapping_list_classes" type="service_closure" id="vich_uploader.command.mapping_list_classes"/>
        <argument key="maker.auto_command.make_auth" type="service_closure" id=".maker.auto_command.make_auth.lazy"/>
        <argument key="maker.auto_command.make_command" type="service_closure" id=".maker.auto_command.make_command.lazy"/>
        <argument key="maker.auto_command.make_twig_component" type="service_closure" id=".maker.auto_command.make_twig_component.lazy"/>
        <argument key="maker.auto_command.make_controller" type="service_closure" id=".maker.auto_command.make_controller.lazy"/>
        <argument key="maker.auto_command.make_crud" type="service_closure" id=".maker.auto_command.make_crud.lazy"/>
        <argument key="maker.auto_command.make_docker_database" type="service_closure" id=".maker.auto_command.make_docker_database.lazy"/>
        <argument key="maker.auto_command.make_entity" type="service_closure" id=".maker.auto_command.make_entity.lazy"/>
        <argument key="maker.auto_command.make_fixtures" type="service_closure" id=".maker.auto_command.make_fixtures.lazy"/>
        <argument key="maker.auto_command.make_form" type="service_closure" id=".maker.auto_command.make_form.lazy"/>
        <argument key="maker.auto_command.make_message" type="service_closure" id=".maker.auto_command.make_message.lazy"/>
        <argument key="maker.auto_command.make_messenger_middleware" type="service_closure" id=".maker.auto_command.make_messenger_middleware.lazy"/>
        <argument key="maker.auto_command.make_registration_form" type="service_closure" id=".maker.auto_command.make_registration_form.lazy"/>
        <argument key="maker.auto_command.make_reset_password" type="service_closure" id=".maker.auto_command.make_reset_password.lazy"/>
        <argument key="maker.auto_command.make_serializer_encoder" type="service_closure" id=".maker.auto_command.make_serializer_encoder.lazy"/>
        <argument key="maker.auto_command.make_serializer_normalizer" type="service_closure" id=".maker.auto_command.make_serializer_normalizer.lazy"/>
        <argument key="maker.auto_command.make_subscriber" type="service_closure" id=".maker.auto_command.make_subscriber.lazy"/>
        <argument key="maker.auto_command.make_twig_extension" type="service_closure" id=".maker.auto_command.make_twig_extension.lazy"/>
        <argument key="maker.auto_command.make_test" type="service_closure" id=".maker.auto_command.make_test.lazy"/>
        <argument key="maker.auto_command.make_validator" type="service_closure" id=".maker.auto_command.make_validator.lazy"/>
        <argument key="maker.auto_command.make_voter" type="service_closure" id=".maker.auto_command.make_voter.lazy"/>
        <argument key="maker.auto_command.make_user" type="service_closure" id=".maker.auto_command.make_user.lazy"/>
        <argument key="maker.auto_command.make_migration" type="service_closure" id=".maker.auto_command.make_migration.lazy"/>
        <argument key="maker.auto_command.make_stimulus_controller" type="service_closure" id=".maker.auto_command.make_stimulus_controller.lazy"/>
        <argument key="maker.auto_command.make_security_form_login" type="service_closure" id=".maker.auto_command.make_security_form_login.lazy"/>
        <argument key="maker.auto_command.make_state_processor" type="service_closure" id=".maker.auto_command.make_state_processor.lazy"/>
        <argument key="maker.auto_command.make_state_provider" type="service_closure" id=".maker.auto_command.make_state_provider.lazy"/>
      </argument>
    </service>
    <service id="cache.app.recorder_inner" class="Symfony\Component\Cache\Adapter\FilesystemAdapter">
      <argument>ManBMMx31T</argument>
      <argument>0</argument>
      <argument>/srv/app/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.system.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>1qCIYBHwT2</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>6BnyNbCp8c</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>KpJkeK8Ezi</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>6n+myFZDGF</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>G-so7tQ6+z</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator_expression_language.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>mEMn3JQiF+</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.doctrine.orm.default.result.recorder_inner" class="Symfony\Component\Cache\Adapter\ArrayAdapter"/>
    <service id="cache.doctrine.orm.default.query.recorder_inner" class="Symfony\Component\Cache\Adapter\ArrayAdapter"/>
    <service id="cache.security_expression_language.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>nXQKibs415</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.security_is_granted_attribute_expression_language.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>bZ1TJLvQtl</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="api_platform.cache.route_name_resolver.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>pOvg1VtRGu</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="api_platform.cache.metadata.resource.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>b+5jXsZR75</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="api_platform.cache.metadata.property.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>2fjP0d9wEH</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="api_platform.cache.metadata.resource_collection.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>J4jDkIIEC2</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="api_platform.graphql.cache.subscription.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <argument>xjxlbvdC8y</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/srv/app/var/cache/dev/pools/system</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id=".service_locator.MaCAr52" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Twig\Extension\CsrfRuntime" type="service_closure" id="twig.runtime.security_csrf"/>
        <argument key="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" type="service_closure" id="twig.runtime.httpkernel"/>
        <argument key="Symfony\Bridge\Twig\Extension\SerializerRuntime" type="service_closure" id="twig.runtime.serializer"/>
        <argument key="Symfony\Component\Form\FormRenderer" type="service_closure" id="twig.form.renderer"/>
        <argument key="Vich\UploaderBundle\Twig\Extension\UploaderExtensionRuntime" type="service_closure" id="Vich\UploaderBundle\Twig\Extension\UploaderExtensionRuntime"/>
      </argument>
    </service>
    <service id="App\Kernel" alias="kernel" public="true"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Psr\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack"/>
    <service id="Symfony\Component\HttpKernel\HttpCache\StoreInterface" alias="http_cache.store"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator"/>
    <service id="Symfony\Component\HttpKernel\UriSigner" alias="uri_signer"/>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container"/>
    <service id="Symfony\Component\String\Slugger\SluggerInterface" alias="slugger"/>
    <service id="Symfony\Component\Clock\ClockInterface" alias="clock"/>
    <service id="Psr\Clock\ClockInterface" alias="clock"/>
    <service id="Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface" alias="fragment.uri_generator"/>
    <service id="error_renderer.html" alias="twig.error_renderer.html"/>
    <service id="error_renderer" alias="error_handler.error_renderer.serializer"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable"/>
    <service id="Symfony\Component\Asset\Packages" alias="assets.packages"/>
    <service id="Symfony\Contracts\HttpClient\HttpClientInterface" alias=".debug.http_client"/>
    <service id="Psr\Http\Client\ClientInterface" alias="psr18.http_client"/>
    <service id="mailer" alias="mailer.mailer"/>
    <service id="Symfony\Component\Mailer\MailerInterface" alias="mailer.mailer"/>
    <service id="Symfony\Component\Mailer\Transport\TransportInterface" alias="mailer.default_transport"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter"/>
    <service id="Symfony\Component\Stopwatch\Stopwatch" alias="debug.stopwatch"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context"/>
    <service id="Symfony\Component\PropertyAccess\PropertyAccessorInterface" alias="property_accessor"/>
    <service id="Symfony\Component\Serializer\SerializerInterface" alias="debug.serializer"/>
    <service id="Symfony\Component\Serializer\Normalizer\NormalizerInterface" alias="debug.serializer"/>
    <service id="Symfony\Component\Serializer\Normalizer\DenormalizerInterface" alias="debug.serializer"/>
    <service id="Symfony\Component\Serializer\Encoder\EncoderInterface" alias="debug.serializer"/>
    <service id="Symfony\Component\Serializer\Encoder\DecoderInterface" alias="debug.serializer"/>
    <service id="serializer.property_accessor" alias="property_accessor"/>
    <service id="Symfony\Component\Serializer\Mapping\ClassDiscriminatorResolverInterface" alias="serializer.mapping.class_discriminator_resolver"/>
    <service id="Symfony\Component\Serializer\Normalizer\ObjectNormalizer" alias="serializer.normalizer.object">
      <deprecated package="symfony/serializer" version="6.2">The "%alias_id%" service alias is deprecated, type-hint against "Symfony\Component\Serializer\Normalizer\NormalizerInterface" or implement "Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface" instead.</deprecated>
    </service>
    <service id="Symfony\Component\Serializer\Normalizer\PropertyNormalizer" alias="serializer.normalizer.property">
      <deprecated package="symfony/serializer" version="6.2">The "%alias_id%" service alias is deprecated, type-hint against "Symfony\Component\Serializer\Normalizer\NormalizerInterface" or implement "Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface" instead.</deprecated>
    </service>
    <service id="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface" alias="api_platform.serializer.mapping.class_metadata_factory"/>
    <service id="error_renderer.serializer" alias="error_handler.error_renderer.serializer"/>
    <service id="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyListExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="Symfony\Component\WebLink\HttpHeaderSerializer" alias="web_link.http_header_serializer"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX"/>
    <service id="cache.default_doctrine_dbal_provider" alias="doctrine.dbal.default_connection"/>
    <service id="SessionHandlerInterface" alias="session.handler.native"/>
    <service id="session.storage.factory" alias="session.storage.factory.native"/>
    <service id="session.handler" alias="session.handler.native"/>
    <service id="Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface" alias="security.csrf.token_generator"/>
    <service id="Symfony\Component\Security\Csrf\TokenStorage\TokenStorageInterface" alias="security.csrf.token_storage"/>
    <service id="Symfony\Component\Security\Csrf\CsrfTokenManagerInterface" alias="security.csrf.token_manager"/>
    <service id="Symfony\Component\Form\ResolvedFormTypeFactoryInterface" alias="form.resolved_type_factory"/>
    <service id="Symfony\Component\Form\FormRegistryInterface" alias="form.registry"/>
    <service id="Symfony\Component\Form\FormFactoryInterface" alias="form.factory"/>
    <service id="form.property_accessor" alias="property_accessor"/>
    <service id="form.choice_list_factory" alias="form.choice_list_factory.cached"/>
    <service id="Symfony\Component\Validator\Validator\ValidatorInterface" alias="debug.validator"/>
    <service id="validator.mapping.class_metadata_factory" alias="debug.validator"/>
    <service id="Symfony\Component\Mime\MimeTypesInterface" alias="mime_types"/>
    <service id="Symfony\Component\Mime\MimeTypeGuesserInterface" alias="mime_types"/>
    <service id="Doctrine\DBAL\Connection" alias="doctrine.dbal.default_connection"/>
    <service id="Doctrine\Persistence\ManagerRegistry" alias="doctrine"/>
    <service id="Doctrine\Common\Persistence\ManagerRegistry" alias="doctrine"/>
    <service id="database_connection" alias="doctrine.dbal.default_connection" public="true"/>
    <service id="doctrine.dbal.event_manager" alias="doctrine.dbal.default_connection.event_manager"/>
    <service id="Doctrine\DBAL\Connection $defaultConnection" alias="doctrine.dbal.default_connection"/>
    <service id="Doctrine\ORM\EntityManagerInterface" alias="doctrine.orm.default_entity_manager"/>
    <service id="doctrine.orm.entity_manager" alias="doctrine.orm.default_entity_manager" public="true"/>
    <service id="doctrine.orm.default_metadata_cache" alias="cache.doctrine.orm.default.metadata"/>
    <service id="doctrine.orm.default_result_cache" alias="cache.doctrine.orm.default.result"/>
    <service id="doctrine.orm.default_query_cache" alias="cache.doctrine.orm.default.query"/>
    <service id="Doctrine\ORM\EntityManagerInterface $defaultEntityManager" alias="doctrine.orm.default_entity_manager"/>
    <service id="doctrine.orm.default_entity_manager.event_manager" alias="doctrine.dbal.default_connection.event_manager"/>
    <service id="doctrine.migrations.metadata_storage" alias="doctrine.migrations.storage.table_storage"/>
    <service id="Twig_Environment" alias="twig">
      <deprecated package="symfony/twig-bundle" version="6.3">The "%alias_id%" service alias is deprecated, use "Twig\Environment" or "twig" instead.</deprecated>
    </service>
    <service id="Twig\Environment" alias="twig"/>
    <service id="Symfony\Component\Mime\BodyRendererInterface" alias="twig.mime_body_renderer"/>
    <service id="nelmio_alice.fixture_builder.expression_language.parser.token_parser" alias="nelmio_alice.fixture_builder.expression_language.parser.token_parser.registry"/>
    <service id="nelmio_alice.fixture_builder.expression_language.parser" alias="nelmio_alice.fixture_builder.expression_language.parser.function_fixture_reference_parser"/>
    <service id="nelmio_alice.fixture_builder.expression_language.lexer" alias="nelmio_alice.fixture_builder.expression_language.lexer.empty_value_lexer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture_bag" alias="nelmio_alice.fixture_builder.denormalizer.fixture.simple_fixture_bag_denormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture" alias="nelmio_alice.fixture_builder.denormalizer.fixture.tolerant_denormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.specs" alias="nelmio_alice.fixture_builder.denormalizer.specs.simple"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor" alias="nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.legacy_constructor_denormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments" alias="nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments.simple_arguments_denormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.value" alias="nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.unique_value_denormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.property" alias="nelmio_alice.fixture_builder.denormalizer.fixture.specs.property.simple_denormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls" alias="nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.simple_denormalizer"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.flag_parser" alias="nelmio_alice.fixture_builder.denormalizer.flag_parser.element"/>
    <service id="nelmio_alice.fixture_builder" alias="nelmio_alice.fixture_builder.simple"/>
    <service id="nelmio_alice.fixture_builder.denormalizer" alias="nelmio_alice.fixture_builder.denormalizer.simple"/>
    <service id="nelmio_alice.fixture_builder.denormalizer.parameter_bag" alias="nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer"/>
    <service id="nelmio_alice.property_accessor" alias="nelmio_alice.property_accessor.std"/>
    <service id="Faker\Generator" alias="nelmio_alice.faker.generator" public="true"/>
    <service id="nelmio_alice.generator.resolver.value" alias="nelmio_alice.generator.resolver.value.registry"/>
    <service id="nelmio_alice.generator.resolver.value.property_accessor" alias="property_accessor"/>
    <service id="nelmio_alice.generator.resolver.fixture_set" alias="nelmio_alice.generator.resolver.fixture_set.remove_conflicting_objects"/>
    <service id="nelmio_alice.generator.resolver.parameter_bag" alias="nelmio_alice.generator.resolver.parameter_bag.remove_conflicting_parameters"/>
    <service id="nelmio_alice.generator.resolver.fixture_bag" alias="nelmio_alice.generator.resolver.fixture_bag.template_bag"/>
    <service id="nelmio_alice.generator.caller" alias="nelmio_alice.generator.caller.simple"/>
    <service id="nelmio_alice.generator" alias="nelmio_alice.generator.double_pass"/>
    <service id="nelmio_alice.generator.object_generator" alias="nelmio_alice.generator.object_generator.complete"/>
    <service id="nelmio_alice.generator.instantiator" alias="nelmio_alice.generator.instantiator.existing_instance"/>
    <service id="nelmio_alice.generator.hydrator" alias="nelmio_alice.generator.hydrator.simple"/>
    <service id="nelmio_alice.generator.hydrator.property" alias="nelmio_alice.generator.hydrator.property.symfony_property_access"/>
    <service id="nelmio_alice.data_loader" alias="nelmio_alice.data_loader.simple" public="true"/>
    <service id="nelmio_alice.file_loader" alias="nelmio_alice.file_loader.simple" public="true"/>
    <service id="nelmio_alice.files_loader" alias="nelmio_alice.files_loader.simple" public="true"/>
    <service id="nelmio_alice.file_locator" alias="hautelook_alice.alice.file_locator.kernel"/>
    <service id="nelmio_alice.file_parser" alias="nelmio_alice.file_parser.runtime_cache"/>
    <service id="fidry_alice_data_fixtures.loader.doctrine" alias="fidry_alice_data_fixtures.doctrine.purger_loader" public="true"/>
    <service id="fidry_alice_data_fixtures.doctrine.loader" alias="fidry_alice_data_fixtures.doctrine.purger_loader"/>
    <service id="fidry_alice_data_fixtures.persistence.purger_factory.doctrine" alias="fidry_alice_data_fixtures.persistence.doctrine.purger.purger_factory" public="true"/>
    <service id="fidry_alice_data_fixtures.persistence.purger.doctrine.orm_purger" alias="fidry_alice_data_fixtures.persistence.doctrine.purger.purger_factory">
      <deprecated package="theofidry/alice-data-fixtures" version="1.0">The service alias "%alias_id%" is deprecated and will be removed in future versions.Use "fidry_alice_data_fixtures.persistence.doctrine.purger.purger_factory" instead.</deprecated>
    </service>
    <service id="fidry_alice_data_fixtures.persistence.persister.doctrine" alias="fidry_alice_data_fixtures.persistence.persister.doctrine.object_manager_persister" public="true"/>
    <service id="hautelook_alice.resolver.bundle" alias="hautelook_alice.resolver.bundle.no_bundle_resolver" public="true"/>
    <service id="hautelook_alice.resolver.file" alias="hautelook_alice.resolver.file.kernel_file_resolver" public="true"/>
    <service id="hautelook_alice.locator" alias="hautelook_alice.locator.environmentless" public="true"/>
    <service id="hautelook_alice.loader" alias="hautelook_alice.loader.doctrine_orm_loader" public="true"/>
    <service id="Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface" alias="security.authorization_checker"/>
    <service id="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface" alias="security.token_storage"/>
    <service id="Symfony\Bundle\SecurityBundle\Security" alias="security.helper"/>
    <service id="Symfony\Component\Security\Core\Security" alias="security.helper">
      <deprecated package="symfony/security-bundle" version="6.2">The "%alias_id%" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead.</deprecated>
    </service>
    <service id="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategyInterface" alias="security.authentication.session_strategy"/>
    <service id="Symfony\Component\Security\Http\Authentication\AuthenticationUtils" alias="security.authentication_utils"/>
    <service id="Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface" alias="debug.security.access.decision_manager"/>
    <service id="Symfony\Component\Security\Core\Role\RoleHierarchyInterface" alias="security.role_hierarchy"/>
    <service id="Symfony\Component\Security\Http\Firewall" alias="debug.security.firewall"/>
    <service id="Symfony\Component\Security\Http\FirewallMapInterface" alias="security.firewall.map"/>
    <service id="Symfony\Component\Security\Http\HttpUtils" alias="security.http_utils"/>
    <service id="Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactoryInterface" alias="security.password_hasher_factory"/>
    <service id="security.password_hasher" alias="security.user_password_hasher"/>
    <service id="Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface" alias="security.user_password_hasher"/>
    <service id="Symfony\Component\Security\Http\Authentication\UserAuthenticatorInterface" alias="security.user_authenticator"/>
    <service id="security.firewall" alias="debug.security.firewall"/>
    <service id="security.user_providers" alias="security.user.provider.concrete.app_user_provider"/>
    <service id="Symfony\Component\Security\Core\User\UserProviderInterface" alias="security.user.provider.concrete.app_user_provider"/>
    <service id="security.authentication.session_strategy.api" alias="security.authentication.session_strategy_noop"/>
    <service id="security.user_checker.api" alias="security.user_checker"/>
    <service id="security.authentication.session_strategy.main" alias="security.authentication.session_strategy"/>
    <service id="security.user_checker.main" alias="security.user_checker"/>
    <service id="security.firewall.context_locator" alias=".service_locator.IEeEty."/>
    <service id="Symfony\Component\Security\Core\User\UserCheckerInterface" alias="security.user_checker"/>
    <service id="api_platform.serializer" alias="debug.serializer"/>
    <service id="api_platform.property_accessor" alias="property_accessor"/>
    <service id="api_platform.property_info" alias="property_info"/>
    <service id="ApiPlatform\Api\ResourceClassResolverInterface" alias="api_platform.resource_class_resolver"/>
    <service id="ApiPlatform\Metadata\ResourceClassResolverInterface" alias="api_platform.resource_class_resolver"/>
    <service id="ApiPlatform\Api\UrlGeneratorInterface" alias="api_platform.router"/>
    <service id="ApiPlatform\Metadata\UrlGeneratorInterface" alias="api_platform.router"/>
    <service id="ApiPlatform\Serializer\SerializerContextBuilderInterface" alias="api_platform.serializer.context_builder.filter"/>
    <service id="ApiPlatform\Serializer\Filter\PropertyFilter" alias="api_platform.serializer.property_filter"/>
    <service id="ApiPlatform\Serializer\Filter\GroupFilter" alias="api_platform.serializer.group_filter"/>
    <service id="ApiPlatform\Action\PlaceholderAction" alias="api_platform.action.placeholder" public="true"/>
    <service id="api_platform.action.get_collection" alias="api_platform.action.placeholder" public="true"/>
    <service id="api_platform.action.post_collection" alias="api_platform.action.placeholder" public="true"/>
    <service id="api_platform.action.get_item" alias="api_platform.action.placeholder" public="true"/>
    <service id="api_platform.action.patch_item" alias="api_platform.action.placeholder" public="true"/>
    <service id="api_platform.action.put_item" alias="api_platform.action.placeholder" public="true"/>
    <service id="api_platform.action.delete_item" alias="api_platform.action.placeholder" public="true"/>
    <service id="ApiPlatform\Action\NotFoundAction" alias="api_platform.action.not_found" public="true"/>
    <service id="ApiPlatform\Action\NotExposedAction" alias="api_platform.action.not_exposed" public="true"/>
    <service id="api_platform.identifiers_extractor" alias="api_platform.api.identifiers_extractor"/>
    <service id="ApiPlatform\Api\IdentifiersExtractorInterface" alias="api_platform.api.identifiers_extractor"/>
    <service id="ApiPlatform\Metadata\IdentifiersExtractorInterface" alias="api_platform.api.identifiers_extractor"/>
    <service id="api_platform.iri_converter" alias="api_platform.symfony.iri_converter"/>
    <service id="ApiPlatform\Api\IriConverterInterface" alias="api_platform.symfony.iri_converter"/>
    <service id="ApiPlatform\Metadata\IriConverterInterface" alias="api_platform.symfony.iri_converter"/>
    <service id="api_platform.state_provider" alias="api_platform.state_provider.locator"/>
    <service id="api_platform.state_provider.main" alias="api_platform.state_provider.content_negotiation"/>
    <service id="api_platform.state_processor.main" alias="api_platform.state_processor.write"/>
    <service id="ApiPlatform\State\Pagination\Pagination" alias="api_platform.pagination"/>
    <service id="ApiPlatform\State\Pagination\PaginationOptions" alias="api_platform.pagination_options"/>
    <service id="ApiPlatform\State\CreateProvider" alias="api_platform.state_provider.create"/>
    <service id="ApiPlatform\State\ObjectProvider" alias="api_platform.state_provider.object"/>
    <service id="api_platform.path_segment_name_generator" alias="api_platform.metadata.path_segment_name_generator.underscore"/>
    <service id="api_platform.metadata.resource.name_collection_factory" alias="api_platform.metadata.resource.name_collection_factory.cached"/>
    <service id="ApiPlatform\Metadata\Resource\Factory\ResourceNameCollectionFactoryInterface" alias="api_platform.metadata.resource.name_collection_factory.cached"/>
    <service id="api_platform.metadata.property.name_collection_factory" alias="api_platform.metadata.property.name_collection_factory.cached"/>
    <service id="ApiPlatform\Metadata\Property\Factory\PropertyNameCollectionFactoryInterface" alias="api_platform.metadata.property.name_collection_factory.cached"/>
    <service id="api_platform.metadata.property.metadata_factory" alias="api_platform.metadata.property.metadata_factory.cached"/>
    <service id="ApiPlatform\Metadata\Property\Factory\PropertyMetadataFactoryInterface" alias="api_platform.metadata.property.metadata_factory.cached"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory" alias="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    <service id="ApiPlatform\Metadata\Resource\Factory\ResourceMetadataCollectionFactoryInterface" alias="api_platform.metadata.resource.metadata_collection_factory.cached"/>
    <service id="ApiPlatform\Metadata\Operation\Factory\OperationMetadataFactoryInterface" alias="api_platform.metadata.operation.metadata_factory"/>
    <service id="ApiPlatform\JsonSchema\TypeFactoryInterface" alias="api_platform.json_schema.type_factory"/>
    <service id="ApiPlatform\JsonSchema\SchemaFactoryInterface" alias="api_platform.hydra.json_schema.schema_factory"/>
    <service id="ApiPlatform\OpenApi\Serializer\OpenApiNormalizer" alias="api_platform.openapi.normalizer.api_gateway"/>
    <service id="ApiPlatform\OpenApi\Options" alias="api_platform.openapi.options"/>
    <service id="ApiPlatform\OpenApi\Factory\OpenApiFactoryInterface" alias="lexik_jwt_authentication.api_platform.openapi.factory"/>
    <service id="api_platform.swagger_ui.listener" alias="api_platform.swagger.listener.ui"/>
    <service id="ApiPlatform\GraphQl\Serializer\SerializerContextBuilderInterface" alias="api_platform.graphql.serializer.context_builder"/>
    <service id="api_platform.graphql.state_provider" alias="api_platform.graphql.state_provider.resolver"/>
    <service id="api_platform.graphql.state_processor" alias="api_platform.graphql.state_processor.write"/>
    <service id="ApiPlatform\Doctrine\Common\State\RemoveProcessor" alias="api_platform.doctrine.orm.state.remove_processor"/>
    <service id="ApiPlatform\Doctrine\Common\State\PersistProcessor" alias="api_platform.doctrine.orm.state.persist_processor"/>
    <service id="ApiPlatform\Doctrine\Orm\Filter\OrderFilter" alias="api_platform.doctrine.orm.order_filter"/>
    <service id="ApiPlatform\Doctrine\Orm\Filter\RangeFilter" alias="api_platform.doctrine.orm.range_filter"/>
    <service id="ApiPlatform\Doctrine\Orm\Filter\DateFilter" alias="api_platform.doctrine.orm.date_filter"/>
    <service id="ApiPlatform\Doctrine\Orm\Filter\BooleanFilter" alias="api_platform.doctrine.orm.boolean_filter"/>
    <service id="ApiPlatform\Doctrine\Orm\Filter\NumericFilter" alias="api_platform.doctrine.orm.numeric_filter"/>
    <service id="ApiPlatform\Doctrine\Orm\Filter\ExistsFilter" alias="api_platform.doctrine.orm.exists_filter"/>
    <service id="ApiPlatform\Doctrine\Orm\Extension\EagerLoadingExtension" alias="api_platform.doctrine.orm.query_extension.eager_loading"/>
    <service id="ApiPlatform\Doctrine\Orm\Extension\FilterExtension" alias="api_platform.doctrine.orm.query_extension.filter"/>
    <service id="ApiPlatform\Doctrine\Orm\Extension\FilterEagerLoadingExtension" alias="api_platform.doctrine.orm.query_extension.filter_eager_loading"/>
    <service id="ApiPlatform\Doctrine\Orm\Extension\PaginationExtension" alias="api_platform.doctrine.orm.query_extension.pagination"/>
    <service id="ApiPlatform\Doctrine\Orm\Extension\OrderExtension" alias="api_platform.doctrine.orm.query_extension.order"/>
    <service id="ApiPlatform\Doctrine\Orm\State\CollectionProvider" alias="api_platform.doctrine.orm.state.collection_provider"/>
    <service id="ApiPlatform\Doctrine\Orm\State\ItemProvider" alias="api_platform.doctrine.orm.state.item_provider"/>
    <service id="api_platform.state.item_provider" alias="api_platform.doctrine.orm.state.item_provider"/>
    <service id="ApiPlatform\Doctrine\Orm\Filter\SearchFilter" alias="api_platform.doctrine.orm.search_filter"/>
    <service id="ApiPlatform\Validator\ValidatorInterface" alias="api_platform.validator"/>
    <service id="api_platform.security.expression_language" alias="security.expression_language"/>
    <service id="ApiPlatform\Symfony\Security\ResourceAccessCheckerInterface" alias="api_platform.security.resource_access_checker"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenInterface" alias="lexik_jwt_authentication.jwt_manager"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenManagerInterface" alias="lexik_jwt_authentication.jwt_manager"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface" alias="lexik_jwt_authentication.jws_provider.lcobucci"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler" alias="lexik_jwt_authentication.handler.authentication_success"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler" alias="lexik_jwt_authentication.handler.authentication_failure"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface" alias="lexik_jwt_authentication.extractor.chain_extractor"/>
    <service id="lexik_jwt_authentication.jwt_token_authenticator" alias="lexik_jwt_authentication.security.guard.jwt_token_authenticator"/>
    <service id="lexik_jwt_authentication.encoder" alias="lexik_jwt_authentication.encoder.lcobucci" public="true"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Encoder\JWTEncoderInterface" alias="lexik_jwt_authentication.encoder.lcobucci"/>
    <service id="lexik_jwt_authentication.key_loader" alias="lexik_jwt_authentication.key_loader.raw" public="true"/>
    <service id="logger" alias="monolog.logger"/>
    <service id="Psr\Log\LoggerInterface" alias="monolog.logger"/>
    <service id="League\Flysystem\FilesystemOperator $defaultStorage" alias="default.storage"/>
    <service id="League\Flysystem\FilesystemReader $defaultStorage" alias="default.storage"/>
    <service id="League\Flysystem\FilesystemWriter $defaultStorage" alias="default.storage"/>
    <service id="vich_uploader.storage" alias="vich_uploader.storage.file_system"/>
    <service id="Vich\UploaderBundle\Storage\StorageInterface" alias="vich_uploader.storage.file_system"/>
    <service id="Vich\UploaderBundle\Storage\FileSystemStorage" alias="vich_uploader.storage.file_system"/>
    <service id="vich_uploader.metadata_driver" alias="vich_uploader.metadata_driver.chain"/>
    <service id="vich_uploader.metadata.cache" alias="vich_uploader.metadata.cache.file_cache"/>
    <service id="Vich\UploaderBundle\Mapping\PropertyMappingResolverInterface" alias="vich_uploader.property_mapping_resolver"/>
    <service id="Vich\UploaderBundle\Mapping\PropertyMappingFactory" alias="vich_uploader.property_mapping_factory"/>
    <service id="vich_uploader.namer_uniqid" alias="Vich\UploaderBundle\Naming\UniqidNamer" public="true"/>
    <service id="vich_uploader.namer_property" alias="Vich\UploaderBundle\Naming\PropertyNamer" public="true"/>
    <service id="vich_uploader.namer_origname" alias="Vich\UploaderBundle\Naming\OrignameNamer" public="true"/>
    <service id="vich_uploader.namer_hash" alias="Vich\UploaderBundle\Naming\HashNamer" public="true"/>
    <service id="vich_uploader.namer_base64" alias="Vich\UploaderBundle\Naming\Base64Namer" public="true"/>
    <service id="vich_uploader.directory_namer_subdir" alias="Vich\UploaderBundle\Naming\SubdirDirectoryNamer" public="true"/>
    <service id="vich_uploader.namer_directory_property" alias="Vich\UploaderBundle\Naming\PropertyDirectoryNamer" public="true"/>
    <service id="vich_uploader.namer_directory_current_date_time" alias="Vich\UploaderBundle\Naming\CurrentDateTimeDirectoryNamer" public="true"/>
    <service id="vich_uploader.namer_smart_unique" alias="Vich\UploaderBundle\Naming\SmartUniqueNamer" public="true"/>
    <service id="Vich\UploaderBundle\Handler\DownloadHandler" alias="vich_uploader.download_handler"/>
    <service id="Vich\UploaderBundle\Handler\UploadHandler" alias="vich_uploader.upload_handler"/>
    <service id="Vich\UploaderBundle\Form\Type\VichFileType" alias="vich_uploader.form.type.file"/>
    <service id="Vich\UploaderBundle\Form\Type\VichImageType" alias="vich_uploader.form.type.image"/>
    <service id="container.env_var_processors_locator" alias=".service_locator.7nzbL4K" public="true"/>
    <service id="twig.loader.filesystem" alias="twig.loader.native_filesystem"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.LWAGtDU"/>
    <service id="doctrine.id_generator_locator" alias=".service_locator.KLVvNIq"/>
    <service id="twig.loader" alias="twig.loader.native_filesystem"/>
    <service id="api_platform.name_converter" alias="serializer.name_converter.metadata_aware"/>
    <service id="Psr\Log\LoggerInterface $requestLogger" alias="monolog.logger.request"/>
    <service id="Psr\Log\LoggerInterface $consoleLogger" alias="monolog.logger.console"/>
    <service id="Psr\Log\LoggerInterface $cacheLogger" alias="monolog.logger.cache"/>
    <service id="Psr\Log\LoggerInterface $httpClientLogger" alias="monolog.logger.http_client"/>
    <service id="Psr\Log\LoggerInterface $mailerLogger" alias="monolog.logger.mailer"/>
    <service id="Psr\Log\LoggerInterface $phpLogger" alias="monolog.logger.php"/>
    <service id="Psr\Log\LoggerInterface $eventLogger" alias="monolog.logger.event"/>
    <service id="Psr\Log\LoggerInterface $routerLogger" alias="monolog.logger.router"/>
    <service id="Psr\Log\LoggerInterface $profilerLogger" alias="monolog.logger.profiler"/>
    <service id="Psr\Log\LoggerInterface $doctrineLogger" alias="monolog.logger.doctrine"/>
    <service id="Psr\Log\LoggerInterface $securityLogger" alias="monolog.logger.security"/>
    <service id="Psr\Log\LoggerInterface $debugLogger" alias="monolog.logger.debug"/>
    <service id="Psr\Log\LoggerInterface $deprecationLogger" alias="monolog.logger.deprecation"/>
    <service id=".service_locator.JYo.9Ts" alias=".service_locator.IEeEty."/>
    <service id=".service_locator.bnaLdkn" alias="api_platform.serializer_locator"/>
    <service id=".service_locator.S79ueEz" alias="api_platform.graphql.type_locator"/>
    <service id=".service_locator.rN7fFER" alias="api_platform.graphql.fields_builder_locator"/>
    <service id=".service_locator.o.uf2zi" alias=".service_locator.7nzbL4K"/>
    <service id=".service_locator.qSfnJmf" alias=".service_locator.PSwBGfE"/>
    <service id=".service_locator.BrqFzs1" alias=".service_locator.Zx3oYFB"/>
    <service id=".service_locator.ztMX7Fg" alias=".service_locator.LWAGtDU"/>
    <service id=".service_locator.BFrsqsn" alias=".service_locator.F9PKc.7"/>
    <service id=".service_locator.0ZtVDyf" alias=".service_locator.YdAW.ov"/>
    <service id=".service_locator.5kurTym" alias=".service_locator.Iv5zWDQ"/>
    <service id=".service_locator.jUv.zyj" alias=".service_locator.O2p6Lk7"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.deprecations.inner" alias="api_platform.metadata.resource.metadata_collection_factory.attributes"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.xml.inner" alias="api_platform.metadata.resource.metadata_collection_factory.deprecations"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.yaml.inner" alias="api_platform.metadata.resource.metadata_collection_factory.xml"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation.inner" alias="api_platform.metadata.resource.metadata_collection_factory.yaml"/>
    <service id="api_platform.state_provider.read.inner" alias="api_platform.state_provider.locator"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.uri_template.inner" alias="api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.main_controller.inner" alias="api_platform.metadata.resource.metadata_collection_factory.uri_template"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.link.inner" alias="api_platform.metadata.resource.metadata_collection_factory.main_controller"/>
    <service id="api_platform.graphql.state_provider.read.inner" alias="api_platform.state_provider.locator"/>
    <service id="api_platform.hydra.processor.link.inner" alias="api_platform.http_cache.processor.add_headers"/>
    <service id="api_platform.state_provider.deserialize.inner" alias="api_platform.state_provider.access_checker"/>
    <service id="api_platform.graphql.state_provider.denormalizer.inner" alias="api_platform.graphql.state_provider.access_checker"/>
    <service id="validator" alias="debug.validator"/>
    <service id="api_platform.state_processor.serialize.inner" alias="api_platform.hydra.processor.link"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.operation_name.inner" alias="api_platform.metadata.resource.metadata_collection_factory.link"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.input_output.inner" alias="api_platform.metadata.resource.metadata_collection_factory.operation_name"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.formats.inner" alias="api_platform.metadata.resource.metadata_collection_factory.input_output"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.filters.inner" alias="api_platform.metadata.resource.metadata_collection_factory.formats"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.alternate_uri.inner" alias="api_platform.metadata.resource.metadata_collection_factory.filters"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.php_doc.inner" alias="api_platform.metadata.resource.metadata_collection_factory.alternate_uri"/>
    <service id="api_platform.graphql.state_processor.subscription.inner" alias="api_platform.graphql.state_processor.normalize"/>
    <service id="api_platform.state_provider.query_parameter_validate.inner" alias="api_platform.state_provider.access_checker.post_deserialize"/>
    <service id="api_platform.state_provider.validate.inner" alias="api_platform.state_provider.query_parameter_validate"/>
    <service id="api_platform.graphql.state_provider.validate.inner" alias="api_platform.graphql.state_provider.access_checker.post_deserialize"/>
    <service id="api_platform.graphql.state_provider.resolver.inner" alias="api_platform.graphql.state_provider.access_checker.post_validate"/>
    <service id="api_platform.state_provider.content_negotiation.inner" alias="api_platform.state_provider.access_checker.post_validate"/>
    <service id="api_platform.state_processor.write.inner" alias="api_platform.state_processor.serialize"/>
    <service id="api_platform.graphql.state_processor.write.inner" alias="api_platform.graphql.state_processor.subscription"/>
    <service id="api_platform.metadata.property.metadata_factory.property_info.inner" alias="api_platform.metadata.property.metadata_factory.xml"/>
    <service id="api_platform.doctrine.orm.metadata.property.metadata_factory.inner" alias="api_platform.metadata.property.metadata_factory.property_info"/>
    <service id="api_platform.doctrine.orm.metadata.resource.metadata_collection_factory.inner" alias="api_platform.metadata.resource.metadata_collection_factory.php_doc"/>
    <service id="api_platform.metadata.resource.link_factory" alias="api_platform.doctrine.orm.metadata.resource.link_factory"/>
    <service id="api_platform.metadata.property.metadata_factory.serializer.inner" alias="api_platform.doctrine.orm.metadata.property.metadata_factory"/>
    <service id="api_platform.metadata.property.metadata_factory.default_property.inner" alias="api_platform.metadata.property.metadata_factory.serializer"/>
    <service id="api_platform.metadata.property.metadata_factory.identifier.inner" alias="api_platform.metadata.property.metadata_factory.default_property"/>
    <service id="api_platform.metadata.property.metadata_factory.attribute.inner" alias="api_platform.metadata.property.metadata_factory.identifier"/>
    <service id="api_platform.metadata.property.metadata_factory.yaml.inner" alias="api_platform.metadata.property.metadata_factory.attribute"/>
    <service id="api_platform.metadata.property.metadata_factory.validator.inner" alias="api_platform.metadata.property.metadata_factory.yaml"/>
    <service id="api_platform.json_schema.metadata.property.metadata_factory.schema.inner" alias="api_platform.metadata.property.metadata_factory.validator"/>
    <service id="http_client" alias=".debug.http_client"/>
    <service id=".debug.http_client.inner" alias="http_client.uri_template"/>
    <service id="event_dispatcher" alias="debug.event_dispatcher" public="true"/>
    <service id="controller_resolver" alias="debug.controller_resolver"/>
    <service id="argument_resolver" alias="debug.argument_resolver"/>
    <service id="serializer" alias="debug.serializer"/>
    <service id="doctrine.migrations.migrations_factory" alias="doctrine.migrations.container_aware_migrations_factory"/>
    <service id="twig.error_renderer.html.inner" alias="error_handler.error_renderer.html"/>
    <service id="security.access.decision_manager" alias="debug.security.access.decision_manager"/>
    <service id="security.firewall.authenticator.api" alias="debug.security.firewall.authenticator.api"/>
    <service id="security.firewall.authenticator.main" alias="debug.security.firewall.authenticator.main"/>
    <service id="api_platform.serializer.context_builder" alias="api_platform.serializer.context_builder.filter"/>
    <service id="api_platform.state_processor.respond" alias="api_platform.http_cache.processor.add_headers"/>
    <service id="api_platform.metadata.resource.name_collection_factory.attributes.inner" alias="api_platform.metadata.resource.name_collection_factory.xml"/>
    <service id="api_platform.metadata.resource.name_collection_factory.class_name.inner" alias="api_platform.metadata.resource.name_collection_factory.attributes"/>
    <service id="api_platform.metadata.property.name_collection_factory.xml.inner" alias="api_platform.metadata.property.name_collection_factory.property_info"/>
    <service id="api_platform.metadata.resource.name_collection_factory.yaml.inner" alias="api_platform.metadata.resource.name_collection_factory.class_name"/>
    <service id="api_platform.metadata.property.name_collection_factory.yaml.inner" alias="api_platform.metadata.property.name_collection_factory.xml"/>
    <service id="api_platform.state_provider.read" alias="api_platform.state_provider.access_checker"/>
    <service id="api_platform.json_schema.schema_factory" alias="api_platform.hydra.json_schema.schema_factory"/>
    <service id="api_platform.hydra.normalizer.collection" alias="api_platform.hydra.normalizer.collection_filters"/>
    <service id="api_platform.hydra.normalizer.collection_filters.inner" alias="api_platform.hydra.normalizer.partial_collection_view"/>
    <service id="api_platform.graphql.resolver.factory.collection" alias="api_platform.graphql.data_collector.resolver.factory.collection"/>
    <service id="api_platform.graphql.resolver.factory.item" alias="api_platform.graphql.data_collector.resolver.factory.item"/>
    <service id="api_platform.graphql.resolver.factory.item_mutation" alias="api_platform.graphql.data_collector.resolver.factory.item_mutation"/>
    <service id="api_platform.graphql.resolver.factory.item_subscription" alias="api_platform.graphql.data_collector.resolver.factory.item_subscription"/>
    <service id="api_platform.http_cache.processor.add_headers.inner" alias="api_platform.state_processor.add_link_header"/>
    <service id="api_platform.state_provider.access_checker.inner" alias="api_platform.swagger_ui.provider"/>
    <service id="api_platform.state_provider.deserialize" alias="api_platform.state_provider.access_checker.post_deserialize"/>
    <service id="api_platform.state_provider.validate" alias="api_platform.state_provider.access_checker.post_validate"/>
    <service id="api_platform.graphql.state_provider.read" alias="api_platform.graphql.state_provider.access_checker"/>
    <service id="api_platform.graphql.state_provider.denormalizer" alias="api_platform.graphql.state_provider.access_checker.post_deserialize"/>
    <service id="api_platform.graphql.state_provider.validate" alias="api_platform.graphql.state_provider.access_checker.post_validate"/>
    <service id="api_platform.openapi.factory" alias="lexik_jwt_authentication.api_platform.openapi.factory"/>
    <service id="var_dumper.cli_dumper" alias="var_dumper.contextualized_cli_dumper"/>
    <service id="doctrine.orm.default_metadata_driver" alias=".doctrine.orm.default_metadata_driver"/>
    <service id="security.event_dispatcher.api" alias="debug.security.event_dispatcher.api"/>
    <service id="security.event_dispatcher.main" alias="debug.security.event_dispatcher.main"/>
    <service id="serializer.mapping.class_metadata_factory" alias="api_platform.serializer.mapping.class_metadata_factory"/>
    <service id="api_platform.openapi.normalizer" alias="api_platform.openapi.normalizer.api_gateway"/>
    <service id="api_platform.metadata.resource.name_collection_factory.cached.inner" alias="api_platform.metadata.resource.name_collection_factory.yaml"/>
    <service id="api_platform.metadata.property.name_collection_factory.cached.inner" alias="api_platform.metadata.property.name_collection_factory.yaml"/>
    <service id="api_platform.metadata.property.metadata_factory.cached.inner" alias="api_platform.json_schema.metadata.property.metadata_factory.schema"/>
    <service id="api_platform.metadata.resource.metadata_collection_factory.cached.inner" alias="api_platform.doctrine.orm.metadata.resource.metadata_collection_factory"/>
    <service id=".service_locator.Xbsa8iG" alias="api_platform.graphql.resolver_locator"/>
    <service id=".service_locator.gFlme_s" alias=".service_locator.y4_Zrx."/>
    <service id=".service_locator.p6CkUtt" alias=".service_locator.God1HrF"/>
    <service id=".service_locator.N04y7t0" alias=".service_locator.dG3EoB7"/>
    <service id=".service_locator.Yd64Y7P" alias=".service_locator.j5sevqx"/>
    <service id=".service_locator._HPndik" alias=".service_locator.58iSd83"/>
    <service id=".service_locator.1KBO9Vj" alias=".service_locator.Nwfon31"/>
    <service id=".service_locator.x4ClJ5i" alias=".service_locator.PSwBGfE"/>
    <service id=".service_locator.EmZ4cZI" alias=".service_locator.Hz5btge"/>
    <service id=".service_locator.ImnDn4v" alias=".service_locator.NygMs_p"/>
    <service id=".service_locator.LtBa4Mm" alias=".service_locator.U0Nbtbo"/>
    <service id=".service_locator.9UcgfP1" alias=".service_locator.zst5.Vd"/>
    <service id=".service_locator.3RZtum9" alias=".service_locator.IVGqFDR"/>
    <service id=".service_locator.1x49IOX" alias=".service_locator.Zx3oYFB"/>
    <service id=".service_locator.Q1z.f9O" alias=".service_locator.O2p6Lk7"/>
    <service id=".service_locator.B_yLtTQ" alias=".service_locator.Lo8jEUu"/>
    <service id=".service_locator.u6DWx23" alias=".service_locator.cXsfP3P"/>
    <service id=".service_locator.BlxN3Cw" alias=".service_locator.LrCXAmX"/>
    <service id=".service_locator.xaTr.JA" alias=".service_locator.LX5ZkG."/>
    <service id=".service_locator.Pnnkjt." alias=".service_locator.ALB1BEI"/>
  </services>
</container>
