a:12:{i:0;a:6:{s:4:"type";i:16384;s:7:"message";s:275:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\ApprovePrestataireProcessor" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:1;a:6:{s:4:"type";i:16384;s:7:"message";s:290:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\AssignManagerToEstablishmentStateProcessor" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:2;a:6:{s:4:"type";i:16384;s:7:"message";s:276:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\CreateEstablishmentProcessor" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:3;a:6:{s:4:"type";i:16384;s:7:"message";s:273:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\RegisterEmployeeProcessor" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:4;a:6:{s:4:"type";i:16384;s:7:"message";s:276:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\RegisterPrestataireProcessor" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:5;a:6:{s:4:"type";i:16384;s:7:"message";s:274:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\RejectPrestataireProcessor" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:6;a:6:{s:4:"type";i:16384;s:7:"message";s:266:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\UserPasswordHasher" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:7;a:6:{s:4:"type";i:16384;s:7:"message";s:266:"Method "ApiPlatform\State\ProcessorInterface::process()" might add "T" as a native return type declaration in the future. Do the same in implementation "App\State\UserPatchProcessor" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:58:"/srv/app/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:66:"/srv/app/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:8;a:6:{s:4:"type";i:16384;s:7:"message";s:61:"Please install the "intl" PHP extension for best performance.";s:4:"file";s:83:"/srv/app/vendor/symfony/framework-bundle/DependencyInjection/FrameworkExtension.php";s:4:"line";i:295;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:89:"/srv/app/vendor/symfony/dependency-injection/Compiler/MergeExtensionConfigurationPass.php";s:4:"line";i:76;s:8:"function";s:4:"load";s:5:"class";s:69:"Symfony\Bundle\FrameworkBundle\DependencyInjection\FrameworkExtension";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:9;a:6:{s:4:"type";i:16384;s:7:"message";s:251:"Since api-platform/core 3.1: GraphQL Playground is deprecated and will be removed in API Platform 4.0. Only GraphiQL will be available in the future. Set api_platform.graphql.graphql_playground to false in the configuration to remove this deprecation.";s:4:"file";s:97:"/srv/app/vendor/api-platform/core/src/Symfony/Bundle/DependencyInjection/ApiPlatformExtension.php";s:4:"line";i:553;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:97:"/srv/app/vendor/api-platform/core/src/Symfony/Bundle/DependencyInjection/ApiPlatformExtension.php";s:4:"line";i:158;s:8:"function";s:28:"registerGraphQlConfiguration";s:5:"class";s:67:"ApiPlatform\Symfony\Bundle\DependencyInjection\ApiPlatformExtension";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:10;a:6:{s:4:"type";i:16384;s:7:"message";s:247:"Since api-platform/core 3.2: Using doctrine/inflector is deprecated since API Platform 3.2 and will be removed in API Platform 4. Use symfony/string instead. Run "composer require symfony/string" and set "keep_legacy_inflector" to false in config.";s:4:"file";s:97:"/srv/app/vendor/api-platform/core/src/Symfony/Bundle/DependencyInjection/ApiPlatformExtension.php";s:4:"line";i:892;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:97:"/srv/app/vendor/api-platform/core/src/Symfony/Bundle/DependencyInjection/ApiPlatformExtension.php";s:4:"line";i:183;s:8:"function";s:30:"registerInflectorConfiguration";s:5:"class";s:67:"ApiPlatform\Symfony\Bundle\DependencyInjection\ApiPlatformExtension";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:11;a:6:{s:4:"type";i:16384;s:7:"message";s:594:"Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY
results in SERIAL, which is not recommended.
Instead, configure identifier generation strategies explicitly through
configuration.
We currently recommend "SEQUENCE" for "Doctrine\DBAL\Platforms\PostgreSqlPlatform", so you should use
$configuration->setIdentityGenerationPreferences([
    "Doctrine\DBAL\Platforms\PostgreSqlPlatform" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,
]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https://github.com/doctrine/orm/issues/8893, package doctrine/orm)";s:4:"file";s:79:"/srv/app/vendor/doctrine/deprecations/lib/Doctrine/Deprecations/Deprecation.php";s:4:"line";i:210;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:79:"/srv/app/vendor/doctrine/deprecations/lib/Doctrine/Deprecations/Deprecation.php";s:4:"line";i:108;s:8:"function";s:24:"delegateTriggerToBackend";s:5:"class";s:33:"Doctrine\Deprecations\Deprecation";s:4:"type";s:2:"::";}}s:5:"count";i:1;}}